use uom::si::{available_energy::kilojoule_per_kilogram, f64::*, pressure::megapascal, specific_volume::cubic_meter_per_kilogram};
/// from table 2.41
const V_PH_SUBREGION_3A_COEFFS: [[f64; 3]; 32] = [
    [-12.0, 6.0, 0.529_944_062_966_028e-2],
    [-12.0, 8.0, -0.170_099_690_234_461],
    [-12.0,12.0, 0.111_323_814_312_927e2],
    [-12.0,18.0, -0.217_898_123_145_125e4],
    [-10.0, 4.0, -0.506_061_827_980_875e-3],
    [-10.0, 7.0, 0.556_495_239_685_324],
    [-10.0,10.0, -0.943_672_726_904_016e1],
    [ -8.0, 5.0, -0.297_856_807_561_527],
    [ -8.0,12.0, 0.939_353_943_717_186e2],
    [ -6.0, 3.0, 0.192_944_939_465_981e-1],
    [ -6.0, 4.0, 0.421_740_664_704_763],
    [ -6.0,22.0, -0.368_914_126_282_330e7],
    [ -4.0, 2.0, -0.737_566_847_600_639e-2],
    [ -4.0, 3.0, -0.354_753_242_424_366],
    [ -3.0, 7.0, -0.199_768_169_338_727e1],
    [ -2.0, 3.0, 0.115_456_297_059_049e1],
    [ -2.0,16.0, 0.568_366_875_815_960e4],
    [ -1.0, 0.0, 0.808_169_540_124_668e-2],
    [ -1.0, 1.0, 0.172_416_341_519_307],
    [ -1.0, 2.0, 0.104_270_175_292_927e1],
    [ -1.0, 3.0, -0.297_691_372_792_847],
    [  0.0, 0.0, 0.560_394_465_163_593],
    [  0.0, 1.0, 0.275_234_661_176_914],
    [  1.0, 0.0, -0.148_347_894_866_012],
    [  1.0, 1.0, -0.651_142_513_478_515e-1],
    [  1.0, 2.0, -0.292_468_715_386_302e1],
    [  2.0, 0.0, 0.664_876_096_952_665e-1],
    [  2.0, 2.0, 0.352_335_014_263_844e1],
    [  3.0, 0.0, -0.146_340_792_313_332e-1],
    [  4.0, 2.0, -0.224_503_486_668_184e1],
    [  5.0, 2.0, 0.110_533_464_706_142e1],
    [  8.0, 2.0, -0.408_757_344_495_612e-1],
];

#[inline]
pub fn v_ph_3a(p: Pressure, h: AvailableEnergy) -> SpecificVolume {
    let v_ref = SpecificVolume::new::<cubic_meter_per_kilogram>(0.0028);
    let p_ref = Pressure::new::<megapascal>(100.0);
    let h_ref = AvailableEnergy::new::<kilojoule_per_kilogram>(2100.0);

    let pi: f64 = (p/p_ref).into();
    let eta: f64 = (h/h_ref).into();

    // this is dimensionless volume
    let mut omega = 0.0;

    for coeffs in V_PH_SUBREGION_3A_COEFFS {
        let ii = coeffs[0];
        let ji = coeffs[1];
        let ni = coeffs[2];

        omega += ni * (pi + 0.128).powi(ii as i32) * (eta - 0.727).powi(ji as i32);
    };

    return omega * v_ref;

}


/// for copying constants by hand,
/// I found it easier to use libreoffice calc
const V_PH_SUBREGION_3B_COEFFS: [[f64; 3]; 30] = [
    [-12.0,0.0,-2.55196934336318E-09],
    [-12.0,1.0,1.40674363313486E-08],
    [-8.0,0.0,2.33784085280560E-06],
    [-8.0,1.0,-3.31833715229001E-05],
    [-8.0,3.0,1.07956778514318E-03],
    [-8.0,6.0,-2.71382067378863E-03],
    [-8.0,7.0,1.07202262490333E+00],
    [-8.0,8.0,-8.53821329075382E-01],
    [-6.0,0.0,-2.15214194340526E-05],
    [-6.0,1.0,7.69656088222730E-04],
    [-6.0,2.0,-4.31136580433864E-03],
    [-6.0,5.0,4.53342167309331E-01],
    [-6.0,6.0,-5.07749535873652E-01],
    [-6.0,10.0,-1.00475154528389E+02],
    [-4.0,3.0,-2.19201924648793E-01],
    [-4.0,6.0,-3.21087965668917E+00],
    [-4.0,10.0,6.07567815637771E+02],
    [-3.0,0.0,5.57686450685932E-04],
    [-3.0,2.0,1.87499040029550E-01],
    [-2.0,1.0,9.05368030448107E-03],
    [-2.0,2.0,2.58417173048685E-01],
    [-1.0,0.0,3.29924030996098E-02],
    [-1.0,1.0,2.39897419685483E-01],
    [-1.0,4.0,4.82754995951394E+00],
    [-1.0,5.0,-1.18035753702231E+01],
    [0.0,0.0,1.69490044091791E-01],
    [1.0,0.0,-1.79967222507787E-02],
    [1.0,1.0,3.71810116332674E-02],
    [2.0,2.0,-5.36288335065096E-02],
    [2.0,6.0,1.60697101092520E+00],
];



#[inline]
pub fn v_ph_3b(p: Pressure, h: AvailableEnergy) -> SpecificVolume {
    let v_ref = SpecificVolume::new::<cubic_meter_per_kilogram>(0.0088);
    let p_ref = Pressure::new::<megapascal>(100.0);
    let h_ref = AvailableEnergy::new::<kilojoule_per_kilogram>(2800.0);

    let pi: f64 = (p/p_ref).into();
    let eta: f64 = (h/h_ref).into();

    // this is dimensionless volume
    let mut omega = 0.0;

    for coeffs in V_PH_SUBREGION_3B_COEFFS {
        let ii = coeffs[0];
        let ji = coeffs[1];
        let ni = coeffs[2];

        omega += ni * (pi + 0.0661).powi(ii as i32) * (eta - 0.720).powi(ji as i32);
    };

    return omega * v_ref;

}
