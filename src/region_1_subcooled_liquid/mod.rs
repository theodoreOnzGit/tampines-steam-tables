
pub const REGION_1_BACK_COEFFS_PH: [[f64; 3]; 20] = [
    [0.0, 0.0, -0.23872489924521e+3],
    [0.0, 1.0, 0.40421188637945e+3],
    [0.0, 2.0, 0.11349746881718e+3],
    [0.0, 6.0, -0.58457616048039e+1],
    [0.0, 22.0, -0.15285482413140e-3],
    [0.0, 32.0, -0.10866707695377e-5],
    [1.0, 0.0, -0.13391744872602e+2],
    [1.0, 1.0, 0.43211039183559e+2],
    [1.0, 2.0, -0.54010067170506e+2],
    [1.0, 3.0, 0.30535892203916e+2],
    [1.0, 4.0, -0.65964749423638e+1],
    [1.0, 10.0, 0.93965400878363e-2],
    [1.0, 32.0, 0.11573647505340e-6],
    [2.0, 10.0, -0.25858641282073e-4],
    [2.0, 32.0, -0.40644363084799e-8],
    [3.0, 10.0, 0.66456186191635e-7],
    [3.0, 32.0, 0.80670734103027e-10],
    [4.0, 32.0, -0.93477771213947e-12],
    [5.0, 32.0, 0.58265442020601e-14],
    [6.0, 32.0, -0.15020185953503e-16],
];
const REGION_1_BACK_COEFFS_PS: [[f64; 3]; 20] = [
    [0.0, 0.0, 0.17478268058307e+03],
    [0.0, 1.0, 0.34806930892873e+02],
    [0.0, 2.0, 0.65292584978455e+01],
    [0.0, 3.0, 0.33039981775489],
    [0.0, 11.0, -0.19281382923196e-06],
    [0.0, 31.0, -0.24909197244573e-22],
    [1.0, 0.0, -0.26107636489332],
    [1.0, 1.0, 0.22592965981586],
    [1.0, 2.0, -0.64256463395226e-01],
    [1.0, 3.0, 0.78876289270526e-02],
    [1.0, 12.0, 0.35672110607366e-09],
    [1.0, 31.0, 0.17332496994895e-23],
    [2.0, 0.0, 0.56608900654837e-03],
    [2.0, 1.0, -0.32635483139717e-03],
    [2.0, 2.0, 0.44778286690632e-04],
    [2.0, 9.0, -0.51322156908507e-09],
    [2.0, 31.0, -0.42522657042207e-25],
    [3.0, 10.0, 0.26400441360689e-12],
    [3.0, 32.0, 0.78124600459723e-28],
    [4.0, 32.0, -0.30732199903668e-30],
];

pub mod gamma_dimensionless_specific_gibbs_free_energy;
pub use gamma_dimensionless_specific_gibbs_free_energy::*;
use uom::si::f64::*;
use uom::si::pressure::pascal;
use uom::si::thermodynamic_temperature::kelvin;


/// Returns the region-1 tau (dimensionless temperature)
/// Pressure is assumed to be in Pa
pub fn tau_1(t: ThermodynamicTemperature) -> f64 {
    // Temperature is assumed to be in K
    let t_kelvin = t.get::<kelvin>();
    1386.0 / t_kelvin
}

/// Returns the region-1 pi
/// Temperature is assumed to be in K
pub fn pi_1(p: Pressure) -> f64 {

    let p_pascals = p.get::<pascal>();
    // Pressure is assumed to be in Pa
    p_pascals / (16.53e6)
}
