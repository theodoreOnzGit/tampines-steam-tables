use uom::si::thermal_conductivity::milliwatt_per_meter_kelvin;
use uom::si::{available_energy::kilojoule_per_kilogram, dynamic_viscosity::micropascal_second};
use uom::si::pressure::bar;
use uom::si::f64::*;
use uom::si::ratio::ratio;
use uom::si::specific_heat_capacity::kilojoule_per_kilogram_kelvin;
use uom::si::specific_volume::cubic_meter_per_kilogram;
use uom::si::thermodynamic_temperature::degree_celsius;
use uom::si::velocity::meter_per_second;

use crate::dynamic_viscosity::mu_ph_eqm;
use crate::interfaces::functional_programming::ph_flash_eqm::{cp_ph_eqm, kappa_ph_eqm, lambda_ph_eqm, s_ph_eqm, t_ph_eqm, v_ph_eqm, w_ph_eqm};

/// single phase table (see page 201)
///
/// NOTE: ph flash UNABLE to do triple point liquid and vapour accurately.
/// or even close to 0 degc
#[test]
pub fn single_phase_table_2_to_750_degc(){

    let steam_table: Vec<[f64; 10]> =
        vec![
        //[300.000,0.000,0.000985665,29.8599,0.0002758,4.0899,1451.30000,71.23000,1733.90000,576.94000],
        [300.000,2.000,0.000985763,38.0406,0.030116,4.0909,1461.10000,72.18700,1625.20000,581.26000],
        [300.000,4.000,0.000985912,46.2234,0.059748,4.092,1470.50000,73.10400,1527.00000,585.43000],
        [300.000,6.000,0.000986109,54.4086,0.089176,4.0932,1479.40000,73.98300,1438.00000,589.48000],
        [300.000,8.000,0.000986352,62.5964,0.1184,4.0945,1488.00000,74.82300,1357.00000,593.40000],
        [300.000,10.000,0.000986638,70.7866,0.14743,4.0958,1496.10000,75.62600,1283.00000,597.21000],
        [300.000,12.000,0.000986965,78.9794,0.17626,4.097,1503.90000,76.39100,1215.40000,600.91000],
        [300.000,14.000,0.000987332,87.1748,0.2049,4.0983,1511.40000,77.12000,1153.20000,604.50000],
        [300.000,16.000,0.000987736,95.3726,0.23335,4.0995,1518.50000,77.81400,1096.00000,608.00000],
        [300.000,18.000,0.000988176,103.573,0.26161,4.1007,1525.20000,78.47300,1043.30000,611.41000],
        [300.000,20.000,0.000988652,111.775,0.28969,4.1018,1531.70000,79.09800,994.47000,614.74000],
        [300.000,25.000,0.000989984,132.291,0.35908,4.1044,1546.40000,80.51700,887.35000,622.68000],
        [300.000,30.000,0.000991511,152.819,0.42737,4.1069,1559.30000,81.73900,797.69000,630.15000],
        [300.000,35.000,0.00099322,173.36,0.49457,4.1092,1570.50000,82.77600,721.84000,637.16000],
        [300.000,40.000,0.000995099,193.911,0.56073,4.1115,1580.10000,83.63700,657.04000,643.75000],
        [300.000,45.000,0.000997141,214.475,0.62588,4.1138,1588.30000,84.33300,601.24000,649.93000],
        [300.000,50.000,0.000999339,235.05,0.69004,4.1162,1595.10000,84.87300,552.81000,655.71000],
        [300.000,55.000,0.00100169,255.637,0.75326,4.1188,1600.70000,85.26400,510.51000,661.12000],
        [300.000,60.000,0.00100418,276.238,0.81557,4.1215,1605.10000,85.51600,473.34000,666.15000],
        [300.000,65.000,0.00100681,296.853,0.87699,4.1245,1608.30000,85.63700,440.50000,670.81000],
        [300.000,70.000,0.00100958,317.483,0.93755,4.1278,1610.50000,85.63400,411.34000,675.12000],
        [300.000,75.000,0.00101249,338.131,0.99729,4.1313,1611.70000,85.51500,385.34000,679.07000],
        [300.000,80.000,0.00101553,358.797,1.0562,4.1351,1611.90000,85.28600,362.04000,682.68000],
        [300.000,85.000,0.0010187,379.482,1.1144,4.1392,1611.30000,84.95500,341.10000,685.95000],
        [300.000,90.000,0.001022,400.189,1.1718,4.1436,1609.90000,84.52800,322.20000,688.89000],
        [300.000,95.000,0.00102544,420.919,1.2285,4.1484,1607.60000,84.01000,305.09000,691.50000],
        [300.000,100.000,0.001029,441.673,1.2845,4.1534,1604.60000,83.40900,289.56000,693.79000],
        [300.000,110.000,0.00103651,483.262,1.3945,4.1646,1596.60000,81.97500,262.48000,697.45000],
        [300.000,120.000,0.00104455,524.97,1.5019,4.1772,1586.00000,80.26600,239.77000,699.90000],
        [300.000,130.000,0.00105313,566.811,1.607,4.1914,1573.00000,78.31600,220.54000,701.21000],
        [300.000,140.000,0.00106226,608.803,1.7099,4.2073,1557.90000,76.15800,204.10000,701.41000],
        [300.000,150.000,0.00107197,650.964,1.8107,4.2252,1540.70000,73.81700,189.94000,700.56000],
        [300.000,160.000,0.00108228,693.315,1.9097,4.2453,1521.70000,71.31700,177.65000,698.70000],
        [300.000,170.000,0.00109324,735.879,2.0068,4.268,1500.80000,68.67900,166.89000,695.86000],
        [300.000,180.000,0.00110488,778.683,2.1023,4.2935,1478.20000,65.92000,157.41000,692.48000],
        [300.000,190.000,0.00111725,821.759,2.1964,4.3222,1453.80000,63.05700,149.00000,688.10000],
        [300.000,200.000,0.00113043,865.14,2.289,4.3547,1427.70000,60.10500,141.49000,682.81000],
        [300.000,210.000,0.00114447,908.867,2.3805,4.3915,1399.90000,57.07800,134.73000,676.65000],
        [300.000,220.000,0.00115946,952.986,2.4709,4.4332,1370.40000,53.98900,128.61000,669.67000],
        [300.000,230.000,0.00117552,997.55,2.5603,4.4805,1339.20000,50.85200,123.03000,661.87000],
        [300.000,240.000,0.00119275,1042.62,2.649,4.5344,1306.20000,47.68200,117.90000,653.28000],
        [300.000,250.000,0.00121131,1088.26,2.7371,4.5959,1271.50000,44.49000,113.16000,643.90000],
        [300.000,260.000,0.00123138,1134.57,2.8248,4.6664,1235.10000,41.29300,108.74000,633.73000],
        [300.000,270.000,0.00125319,1181.63,2.9122,4.7476,1196.90000,38.10200,104.58000,622.77000],
        [300.000,280.000,0.001277,1229.56,2.9997,4.8417,1156.80000,34.93000,100.65000,611.00000],
        [300.000,290.000,0.00130318,1278.51,3.0874,4.9516,1114.80000,31.78800,96.88500,598.40000],
        [300.000,300.000,0.00133219,1328.66,3.1756,5.0814,1070.60000,28.68100,93.25200,584.93000],
        [300.000,310.000,0.00136464,1380.23,3.2648,5.237,1024.10000,25.61600,89.70800,570.54000],
        [300.000,320.000,0.00140138,1433.51,3.3554,5.4272,974.84000,22.60400,86.20800,555.13000],
        [300.000,330.000,0.00144362,1488.93,3.4481,5.6659,922.91000,19.66700,82.70500,538.58000],
        [300.000,340.000,0.00149319,1547.07,3.5437,5.9753,868.21000,16.82700,79.14100,520.68000],
        [300.000,350.000,0.0015529,1608.8,3.6435,6.3935,809.96000,14.08200,75.44000,501.15000],
        [300.000,360.000,0.00162769,1675.57,3.7498,7.011,744.31000,11.34500,71.49200,479.54000],
        [300.000,370.000,0.00172705,1750.19,3.8667,7.9986,672.42000,8.72690,67.10500,455.01000],
        [300.000,380.000,0.00187297,1838.26,4.0026,9.8342,590.65000,6.20870,61.90000,426.10000],
        [300.000,390.000,0.0021331,1955.23,4.1802,14.344,497.30000,3.86460,54.94300,390.64000],
        [300.000,400.000,0.00279641,2152.37,4.475,25.797,419.63000,2.09900,44.20300,339.93000],
        [300.000,410.000,0.00398397,2395.84,4.8342,19.685,432.54000,1.56540,35.62000,244.78000],
        [300.000,420.000,0.00492092,2552.87,5.0625,12.73,462.80000,1.45090,32.76200,187.87000],
        [300.000,430.000,0.00563824,2662.82,5.2201,9.5627,487.80000,1.40670,31.67400,159.41000],
        [300.000,440.000,0.00622812,2748.86,5.3416,7.7964,508.64000,1.38470,31.23200,143.07000],
        [300.000,450.000,0.00673815,2820.91,5.4419,6.6908,526.23000,1.36990,31.09100,132.73000],
        [300.000,460.000,0.00719339,2883.84,5.5284,5.937,541.56000,1.35910,31.11500,125.74000],
        [300.000,470.000,0.00760843,2940.32,5.6049,5.3861,555.31000,1.35100,31.23800,120.82000],
        [300.000,480.000,0.0079924,2991.99,5.674,4.9638,567.83000,1.34470,31.42600,117.25000],
        [300.000,490.000,0.00835153,3039.89,5.7372,4.6297,579.37000,1.33980,31.65900,114.65000],
        [300.000,500.000,0.0086903,3084.79,5.7956,4.3597,590.11000,1.33570,31.92400,112.74000],
        [300.000,510.000,0.00901209,3127.24,5.8502,4.1378,600.16000,1.33220,32.21100,111.37000],
        [300.000,520.000,0.00931954,3167.67,5.9015,3.9532,609.62000,1.32920,32.51500,110.41000],
        [300.000,530.000,0.00961471,3206.41,5.95,3.7979,618.57000,1.32650,32.83200,109.78000],
        [300.000,540.000,0.00989926,3243.71,5.9962,3.666,627.07000,1.32410,33.16000,109.42000],
        [300.000,550.000,0.0101745,3279.79,6.0403,3.5529,635.17000,1.32170,33.49400,109.29000],
        [300.000,560.000,0.0104416,3314.82,6.0826,3.4552,642.92000,1.31960,33.83500,109.34000],
        [300.000,570.000,0.0107014,3348.94,6.1233,3.3701,650.36000,1.31750,34.18100,109.55000],
        [300.000,580.000,0.0109547,3382.25,6.1626,3.2955,657.51000,1.31550,34.53000,109.90000],
        [300.000,590.000,0.0112021,3414.87,6.2006,3.2296,664.40000,1.31350,34.88200,110.37000],
        [300.000,600.000,0.0114442,3446.87,6.2374,3.1713,671.07000,1.31170,35.23600,110.94000],
        [300.000,650.000,0.0125897,3599.68,6.4077,2.9598,701.63000,1.30340,37.02700,114.98000],
        [300.000,700.000,0.0136542,3744.24,6.5602,2.8331,728.73000,1.29640,38.82900,120.30000],
        [300.000,750.000,0.0146621,3883.78,6.7,2.7549,753.38000,1.29040,40.62600,126.63000],
        //[300.000,800.000,0.0156288,4020.23,6.8303,2.7072,776.14000,1.28480,42.41200,133.49000],

        ];

        for dataset in steam_table {
            let p_bar = dataset[0];
            let t_deg_c = dataset[1];
            let v_m3_per_kg = dataset[2];
            let h_kj_per_kg = dataset[3];
            let s_kj_per_kg_k = dataset[4];
            let cp_kj_per_kg_k = dataset[5];
            let w_m_per_s = dataset[6];
            let kappa_dimensionless = dataset[7];
            let eta_micropascal_second = dataset[8];
            let lambda_milliwatt_per_meter_kelvin = dataset[9];
            assert_ph_flash(p_bar, t_deg_c, v_m3_per_kg, h_kj_per_kg, 
                s_kj_per_kg_k, cp_kj_per_kg_k, w_m_per_s, 
                kappa_dimensionless, eta_micropascal_second, 
                lambda_milliwatt_per_meter_kelvin);
        }
}

fn assert_ph_flash(
    p_bar: f64,
    t_deg_c: f64,
    v_m3_per_kg: f64,
    h_kj_per_kg: f64,
    s_kj_per_kg_k: f64,
    cp_kj_per_kg_k: f64,
    w_m_per_s: f64,
    kappa_dimensionless: f64,
    eta_micropascal_second: f64,
    lambda_milliwatt_per_meter_kelvin: f64,
){
    let p = Pressure::new::<bar>(p_bar);
    let h = AvailableEnergy::new::<kilojoule_per_kilogram>(h_kj_per_kg);

    // assert temp first to within 0.035 mk 
    let temp_tol_millikelvin = 35.0;

    let t_test = t_ph_eqm(p, h);

    approx::assert_abs_diff_eq!(
        t_deg_c,
        t_test.get::<degree_celsius>(),
        epsilon=temp_tol_millikelvin*1e-3
        );

    // assert volume to within 0.01%  (that's the tolerable error for 
    // backward eqn)
    let v_test = v_ph_eqm(p, h);
    approx::assert_relative_eq!(
        v_m3_per_kg,
        v_test.get::<cubic_meter_per_kilogram>(),
        max_relative=5e-4
        );

    // now entropy 
    let s_test = s_ph_eqm(p, h);
    approx::assert_relative_eq!(
        s_kj_per_kg_k,
        s_test.get::<kilojoule_per_kilogram_kelvin>(),
        max_relative=7e-3
        );

    // cp 
    let cp_test = cp_ph_eqm(p, h);
    approx::assert_relative_eq!(
        cp_kj_per_kg_k,
        cp_test.get::<kilojoule_per_kilogram_kelvin>(),
        max_relative=5e-3
        );
    // w 
    let w_test = w_ph_eqm(p, h);
    approx::assert_relative_eq!(
        w_m_per_s,
        w_test.get::<meter_per_second>(),
        max_relative=5e-3
        );

    // kappa
    let kappa_test = kappa_ph_eqm(p, h);
    approx::assert_relative_eq!(
        kappa_dimensionless,
        kappa_test.get::<ratio>(),
        max_relative=6e-3
        );

    // dynamic_viscosity
    //
    let eta_micropascal_second_test = mu_ph_eqm(p, h)
        .get::<micropascal_second>();
    approx::assert_relative_eq!(
        eta_micropascal_second,
        eta_micropascal_second_test,
        max_relative=2e-2
        );

    // thermal conductivity
    let lambda_test_milliwatt_per_meter_kelvin = 
        lambda_ph_eqm(p, h).get::<milliwatt_per_meter_kelvin>();
    approx::assert_relative_eq!(
        lambda_milliwatt_per_meter_kelvin,
        lambda_test_milliwatt_per_meter_kelvin,
        max_relative=1e-2
        );



}



