use uom::si::{available_energy::kilojoule_per_kilogram, dynamic_viscosity::micropascal_second};
use uom::si::pressure::bar;
use uom::si::f64::*;
use uom::si::ratio::ratio;
use uom::si::specific_heat_capacity::kilojoule_per_kilogram_kelvin;
use uom::si::specific_volume::cubic_meter_per_kilogram;
use uom::si::thermodynamic_temperature::degree_celsius;
use uom::si::velocity::meter_per_second;

use crate::{dynamic_viscosity::mu_ph_eqm, interfaces::functional_programming::ph_flash_eqm::{cp_ph_eqm, kappa_ph_eqm, s_ph_eqm, t_ph_eqm, v_ph_eqm, w_ph_eqm}};

/// single phase table (see page 201)
///
/// NOTE: ph flash UNABLE to do triple point liquid and vapour accurately.
/// or even close to 0 degc
#[test]
pub fn single_phase_table_2_to_750_degc(){

    let steam_table: Vec<[f64; 10]> =
        vec![
        //[600.000,0.000,0.000972471,58.5861,-0.002077,3.9937,1503.7000,38.7500,1692.8000,595.5300],
        [600.000,2.000,0.000972727,66.5794,0.02708,3.9996,1513.2000,39.2330,1591.2000,599.3100],
        [600.000,4.000,0.000973021,74.5842,0.056067,4.0051,1522.3000,39.6950,1499.0000,603.0100],
        [600.000,6.000,0.00097335,82.5995,0.084884,4.0102,1531.0000,40.1360,1415.0000,606.6200],
        [600.000,8.000,0.000973714,90.6246,0.11353,4.0148,1539.3000,40.5570,1338.3000,610.1600],
        [600.000,10.000,0.000974111,98.6586,0.142,4.0191,1547.2000,40.9590,1268.1000,613.6200],
        [600.000,12.000,0.000974539,106.701,0.17031,4.023,1554.8000,41.3430,1203.5000,617.0100],
        [600.000,14.000,0.000974998,114.751,0.19844,4.0267,1562.0000,41.7080,1144.1000,620.3200],
        [600.000,16.000,0.000975486,122.807,0.2264,4.03,1568.9000,42.0560,1089.2000,623.5800],
        [600.000,18.000,0.000976002,130.87,0.25419,4.0331,1575.5000,42.3870,1038.4000,626.7700],
        [600.000,20.000,0.000976545,138.939,0.28181,4.0359,1581.8000,42.7020,991.3700,629.8900],
        [600.000,25.000,0.000978019,159.135,0.35012,4.0422,1596.2000,43.4190,887.6200,637.4400],
        [600.000,30.000,0.000979648,179.359,0.41739,4.0474,1609.0000,44.0430,800.3400,644.6300],
        [600.000,35.000,0.000981425,199.608,0.48364,4.0519,1620.2000,44.5780,726.1600,651.4600],
        [600.000,40.000,0.000983342,219.877,0.54889,4.0559,1630.0000,45.0290,662.5500,657.9400],
        [600.000,45.000,0.000985394,240.166,0.61316,4.0595,1638.4000,45.4020,607.5900,664.0800],
        [600.000,50.000,0.000987575,260.472,0.67649,4.063,1645.6000,45.6990,559.7600,669.8800],
        [600.000,55.000,0.000989883,280.795,0.7389,4.0663,1651.6000,45.9250,517.8800,675.3400],
        [600.000,60.000,0.000992312,301.135,0.80042,4.0696,1656.4000,46.0840,480.9800,680.4600],
        [600.000,65.000,0.000994862,321.491,0.86107,4.0729,1660.3000,46.1790,448.3300,685.2500],
        [600.000,70.000,0.000997528,341.864,0.92087,4.0763,1663.1000,46.2130,419.2800,689.7100],
        [600.000,75.000,0.00100031,362.255,0.97987,4.0798,1665.0000,46.1900,393.3200,693.8400],
        [600.000,80.000,0.00100321,382.663,1.0381,4.0835,1666.0000,46.1130,370.0400,697.6400],
        [600.000,85.000,0.00100621,403.09,1.0955,4.0873,1666.2000,45.9850,349.0900,701.1200],
        [600.000,90.000,0.00100933,423.536,1.1522,4.0913,1665.6000,45.8090,330.1500,704.2800],
        [600.000,95.000,0.00101256,444.003,1.2082,4.0954,1664.2000,45.5890,312.9900,707.1300],
        [600.000,100.000,0.00101591,464.49,1.2634,4.0997,1662.2000,45.3260,297.4000,709.6800],
        [600.000,110.000,0.00102292,505.533,1.372,4.109,1656.1000,44.6860,270.1700,713.8700],
        [600.000,120.000,0.00103039,546.672,1.478,4.1191,1647.6000,43.9070,247.3100,716.8900],
        [600.000,130.000,0.0010383,587.918,1.5816,4.1302,1636.9000,43.0080,227.9200,718.7900],
        [600.000,140.000,0.00104668,629.28,1.6829,4.1424,1624.2000,42.0050,211.3400,719.6300],
        [600.000,150.000,0.00105553,670.77,1.7822,4.1558,1609.6000,40.9100,197.0500,719.4500],
        [600.000,160.000,0.00106488,712.401,1.8794,4.1707,1593.4000,39.7370,184.6300,718.2900],
        [600.000,170.000,0.00107475,754.189,1.9748,4.1872,1575.5000,38.4940,173.7700,716.1900],
        [600.000,180.000,0.00108516,796.15,2.0684,4.2055,1556.2000,37.1930,164.2100,713.2000],
        [600.000,190.000,0.00109614,838.305,2.1604,4.2258,1535.3000,35.8400,155.7400,709.3600],
        [600.000,200.000,0.00110773,880.675,2.2509,4.2485,1513.1000,34.4450,148.1800,705.1600],
        [600.000,210.000,0.00111996,923.284,2.34,4.2738,1489.4000,33.0130,141.4000,699.9800],
        [600.000,220.000,0.00113289,966.161,2.4279,4.302,1464.5000,31.5520,135.2900,694.0000],
        [600.000,230.000,0.00114657,1009.33,2.5145,4.3334,1438.2000,30.0680,129.7300,687.2900],
        [600.000,240.000,0.00116107,1052.84,2.6002,4.3684,1410.8000,28.5690,124.6600,679.8600],
        [600.000,250.000,0.00117644,1096.72,2.6848,4.4073,1382.1000,27.0610,120.0000,671.7500],
        [600.000,260.000,0.00119279,1141.0,2.7687,4.4507,1352.2000,25.5500,115.7000,662.9700],
        [600.000,270.000,0.00121019,1185.75,2.8518,4.4988,1321.3000,24.0430,111.7000,653.5400],
        [600.000,280.000,0.00122878,1231.0,2.9344,4.5523,1289.3000,22.5480,108.0000,643.4800],
        [600.000,290.000,0.00124867,1276.81,3.0165,4.6117,1256.4000,21.0700,104.4000,632.7900],
        [600.000,300.000,0.00127003,1323.25,3.0982,4.6775,1222.6000,19.6160,101.1000,621.4900],
        [600.000,310.000,0.00129303,1370.38,3.1797,4.7504,1188.0000,18.1920,97.9060,609.5900],
        [600.000,320.000,0.00131791,1418.28,3.2612,4.8309,1152.7000,16.8040,94.8520,597.0800],
        [600.000,330.000,0.00134492,1467.03,3.3427,4.9198,1116.8000,15.4560,91.9030,583.9600],
        [600.000,340.000,0.00137438,1516.71,3.4244,5.0175,1080.4000,14.1540,89.0390,570.2400],
        [600.000,350.000,0.00140668,1567.41,3.5064,5.1244,1043.5000,12.9010,86.2390,555.9000],
        [600.000,360.000,0.0014423,1619.3,3.589,5.2592,1004.8000,11.6660,83.4860,540.9600],
        [600.000,370.000,0.00148191,1672.64,3.6726,5.4109,965.6200,10.4870,80.7590,525.3300],
        [600.000,380.000,0.00152621,1727.58,3.7573,5.58,926.2600,9.3691,78.0450,509.0200],
        [600.000,390.000,0.00157615,1784.32,3.8435,5.7733,886.7800,8.3153,75.3330,491.9800],
        [600.000,400.000,0.00163294,1843.15,3.9316,5.9975,847.3800,7.3289,72.6090,474.1700],
        [600.000,410.000,0.00169811,1904.39,4.0219,6.2571,808.4500,6.4149,69.8650,455.5400],
        [600.000,420.000,0.00177352,1968.41,4.1149,6.5524,770.5300,5.5794,67.0950,436.0300],
        [600.000,430.000,0.00186141,2035.54,4.2111,6.8777,734.3500,4.8286,64.3040,415.6100],
        [600.000,440.000,0.00196432,2106.01,4.3106,7.217,700.8700,4.1678,61.5090,394.3100],
        [600.000,450.000,0.00208469,2179.82,4.4134,7.5398,671.1800,3.6015,58.7410,372.2200],
        [600.000,460.000,0.00222434,2256.6,4.5188,7.7999,646.4100,3.1309,56.0570,349.6200],
        [600.000,470.000,0.00238359,2335.44,4.6256,7.9454,627.4200,2.7526,53.5270,326.9700],
        [600.000,480.000,0.00256059,2415.0,4.7319,7.9414,614.4800,2.4577,51.2270,304.9100],
        [600.000,490.000,0.00275152,2493.77,4.8358,7.7888,607.1700,2.2330,49.2150,284.1400],
        [600.000,500.000,0.00295158,2570.4,4.9356,7.522,604.5300,2.0636,47.5140,265.2200],
        [600.000,510.000,0.00315612,2643.99,5.0302,7.1881,605.4400,1.9357,46.1160,248.4800],
        [600.000,520.000,0.00336069,2713.9,5.1189,6.7994,608.6800,1.8374,44.9980,233.9800],
        [600.000,530.000,0.00356327,2780.22,5.202,6.4533,613.8500,1.7625,44.1140,221.7000],
        [600.000,540.000,0.00376176,2842.9,5.2796,6.0859,620.1700,1.7040,43.4290,211.2800],
        [600.000,550.000,0.00395482,2902.06,5.3519,5.7534,627.1300,1.6574,42.9080,202.5800],
        [600.000,560.000,0.00414208,2958.09,5.4195,5.4575,634.3700,1.6192,42.5200,195.3300],
        [600.000,570.000,0.00432345,3011.32,5.483,5.1919,641.7300,1.5875,42.2410,189.3000],
        [600.000,580.000,0.00449897,3062.02,5.5428,4.9539,649.1000,1.5609,42.0510,184.3000],
        [600.000,590.000,0.00466889,3110.48,5.5993,4.7424,656.4300,1.5382,41.9330,180.1600],
        [600.000,600.000,0.00483355,3156.95,5.6528,4.5557,663.6400,1.5186,41.8760,176.7400],
        [600.000,650.000,0.00559084,3366.76,5.8867,3.9007,697.4800,1.4502,42.1890,167.1500],
        [600.000,700.000,0.00626511,3551.39,6.0815,3.5151,728.1600,1.4105,43.0690,164.6100],
        [600.000,750.000,0.00688181,3720.64,6.2512,3.273,756.1100,1.3846,44.2290,166.8300],
        //[600.000,800.000,0.00745681,3880.15,6.4034,3.1193,781.1600,1.3639,45.5410,171.1300],

        ];

        for dataset in steam_table {
            let p_bar = dataset[0];
            let t_deg_c = dataset[1];
            let v_m3_per_kg = dataset[2];
            let h_kj_per_kg = dataset[3];
            let s_kj_per_kg_k = dataset[4];
            let cp_kj_per_kg_k = dataset[5];
            let w_m_per_s = dataset[6];
            let kappa_dimensionless = dataset[7];
            let eta_micropascal_second = dataset[8];
            let lambda_milliwatt_per_meter_kelvin = dataset[9];
            assert_ph_flash(p_bar, t_deg_c, v_m3_per_kg, h_kj_per_kg, 
                s_kj_per_kg_k, cp_kj_per_kg_k, w_m_per_s, 
                kappa_dimensionless, eta_micropascal_second, 
                lambda_milliwatt_per_meter_kelvin);
        }
}

fn assert_ph_flash(
    p_bar: f64,
    t_deg_c: f64,
    v_m3_per_kg: f64,
    h_kj_per_kg: f64,
    s_kj_per_kg_k: f64,
    cp_kj_per_kg_k: f64,
    w_m_per_s: f64,
    kappa_dimensionless: f64,
    eta_micropascal_second: f64,
    lambda_milliwatt_per_meter_kelvin: f64,
){
    let p = Pressure::new::<bar>(p_bar);
    let h = AvailableEnergy::new::<kilojoule_per_kilogram>(h_kj_per_kg);

    // assert temp first to within 0.035 mk 
    let temp_tol_millikelvin = 35.0;

    let t_test = t_ph_eqm(p, h);

    approx::assert_abs_diff_eq!(
        t_deg_c,
        t_test.get::<degree_celsius>(),
        epsilon=temp_tol_millikelvin*1e-3
        );

    // assert volume to within 0.01%  (that's the tolerable error for 
    // backward eqn)
    let v_test = v_ph_eqm(p, h);
    approx::assert_relative_eq!(
        v_m3_per_kg,
        v_test.get::<cubic_meter_per_kilogram>(),
        max_relative=5e-4
        );

    // now entropy 
    let s_test = s_ph_eqm(p, h);
    approx::assert_relative_eq!(
        s_kj_per_kg_k,
        s_test.get::<kilojoule_per_kilogram_kelvin>(),
        max_relative=7e-3
        );

    // cp 
    let cp_test = cp_ph_eqm(p, h);
    approx::assert_relative_eq!(
        cp_kj_per_kg_k,
        cp_test.get::<kilojoule_per_kilogram_kelvin>(),
        max_relative=1e-3
        );
    // w 
    let w_test = w_ph_eqm(p, h);
    approx::assert_relative_eq!(
        w_m_per_s,
        w_test.get::<meter_per_second>(),
        max_relative=1e-3
        );

    // kappa
    let kappa_test = kappa_ph_eqm(p, h);
    approx::assert_relative_eq!(
        kappa_dimensionless,
        kappa_test.get::<ratio>(),
        max_relative=6e-3
        );

    // lambda tbd
    //
    let eta_micropascal_second_test = mu_ph_eqm(p, h)
        .get::<micropascal_second>();
    approx::assert_relative_eq!(
        eta_micropascal_second,
        eta_micropascal_second_test,
        max_relative=2e-2
        );



}



