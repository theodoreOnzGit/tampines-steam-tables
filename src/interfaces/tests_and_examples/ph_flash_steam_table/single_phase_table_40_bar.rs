use uom::si::{available_energy::kilojoule_per_kilogram, dynamic_viscosity::micropascal_second};
use uom::si::pressure::bar;
use uom::si::f64::*;
use uom::si::ratio::ratio;
use uom::si::specific_heat_capacity::kilojoule_per_kilogram_kelvin;
use uom::si::specific_volume::cubic_meter_per_kilogram;
use uom::si::thermodynamic_temperature::degree_celsius;
use uom::si::velocity::meter_per_second;

use crate::dynamic_viscosity::mu_ph_eqm;
use crate::interfaces::functional_programming::ph_flash_eqm::{cp_ph_eqm, kappa_ph_eqm, s_ph_eqm, t_ph_eqm, v_ph_eqm, w_ph_eqm};

/// single phase table (see page 201)
///
/// NOTE: ph flash UNABLE to do triple point liquid and vapour accurately.
/// or even close to 0 degc
#[test]
pub fn single_phase_table_2_to_750_degc(){

    let steam_table: Vec<[f64; 10]> =
        vec![

        //[40.000,0.000,0.000998184,4.02062,0.00008726,4.2003,1408.6000,496.9200,1783.2000,558.6000],
        [40.000,2.000,0.000998113,12.4157,0.03071,4.1949,1418.4000,503.9000,1666.3000,563.5100],
        [40.000,4.000,0.000998107,20.8009,0.061075,4.1904,1427.8000,510.6200,1561.3000,568.2200],
        [40.000,6.000,0.000998163,29.1779,0.091192,4.1867,1436.8000,517.0700,1466.5000,572.7500],
        [40.000,8.000,0.000998277,37.5481,0.12107,4.1835,1445.5000,523.2500,1380.6000,577.1000],
        [40.000,10.000,0.000998446,45.9125,0.15071,4.1809,1453.7000,529.1600,1302.4000,581.3000],
        [40.000,12.000,0.000998666,54.272,0.18013,4.1787,1461.6000,534.7900,1231.2000,585.3600],
        [40.000,14.000,0.000998936,62.6275,0.20933,4.1768,1469.1000,540.1700,1166.0000,589.2800],
        [40.000,16.000,0.000999252,70.9796,0.23832,4.1753,1476.3000,545.2800,1106.2000,593.0700],
        [40.000,18.000,0.000999613,79.3288,0.26709,4.1739,1483.1000,550.1300,1051.2000,596.7400],
        [40.000,20.000,0.00100002,87.6755,0.29566,4.1728,1489.6000,554.7200,1000.4000,600.2900],
        [40.000,25.000,0.0010012,108.534,0.36622,4.1708,1504.4000,565.1000,889.5100,608.7100],
        [40.000,30.000,0.00100263,129.385,0.43557,4.1696,1517.2000,573.9700,797.1600,616.5300],
        [40.000,35.000,0.00100427,150.231,0.50378,4.169,1528.2000,581.4000,719.3900,623.7900],
        [40.000,40.000,0.00100611,171.076,0.57088,4.1691,1537.6000,587.4800,653.2300,630.5500],
        [40.000,45.000,0.00100815,191.923,0.63692,4.1696,1545.4000,592.2700,596.4400,636.8300],
        [40.000,50.000,0.00101037,212.773,0.70195,4.1706,1551.8000,595.8400,547.3100,642.6600],
        [40.000,55.000,0.00101276,233.63,0.766,4.1722,1556.8000,598.2800,504.5100,648.0600],
        [40.000,55.000,0.00101276,233.63,0.766,4.1722,1556.8000,598.2800,504.5100,648.0600],
        [40.000,65.000,0.00101806,275.372,0.8913,4.1767,1563.1000,599.9800,433.8900,657.6300],
        [40.000,70.000,0.00102094,296.263,0.95263,4.1796,1564.5000,599.3800,404.5700,661.8200],
        [40.000,75.000,0.00102398,317.169,1.0131,4.1831,1564.9000,597.9000,378.4600,665.6400],
        [40.000,80.000,0.00102718,338.095,1.0728,4.1871,1564.3000,595.5700,355.1000,669.1000],
        [40.000,85.000,0.00103053,359.041,1.1317,4.1915,1562.8000,592.4700,334.1300,672.1900],
        [40.000,90.000,0.00103403,380.01,1.1898,4.1964,1560.3000,588.6400,315.2300,674.9400],
        [40.000,95.000,0.00103768,401.006,1.2473,4.2018,1557.1000,584.1200,298.1400,677.3500],
        [40.000,100.000,0.00104148,422.029,1.304,4.2078,1553.0000,578.9700,282.6400,679.4200],
        [40.000,110.000,0.00104953,464.172,1.4154,4.2212,1542.7000,566.9100,255.6400,682.6000],
        [40.000,110.000,0.00104953,464.172,1.4154,4.2212,1542.7000,566.9100,255.6400,682.6000],
        [40.000,130.000,0.00106751,548.916,1.631,4.2548,1513.9000,536.7600,213.9100,685.2900],
        [40.000,140.000,0.00107748,591.564,1.7355,4.2754,1495.9000,519.1700,197.5800,684.9000],
        [40.000,150.000,0.00108814,634.433,1.838,4.299,1475.5000,500.1700,183.5100,683.4000],
        [40.000,160.000,0.00109956,677.555,1.9388,4.326,1452.9000,479.9200,171.2900,681.0000],
        [40.000,170.000,0.00111177,720.966,2.0378,4.3569,1428.1000,458.5900,160.5800,677.8300],
        [40.000,180.000,0.00112486,764.707,2.1354,4.3923,1401.1000,436.3000,151.1400,673.5500],
        [40.000,190.000,0.00113892,808.829,2.2317,4.433,1372.0000,413.1800,142.7400,668.2800],
        [40.000,200.000,0.00115404,853.387,2.3269,4.4799,1340.6000,389.3500,135.2100,662.0600],
        [40.000,210.000,0.00117037,898.451,2.4212,4.5342,1307.1000,364.9300,128.4100,654.9000],
        [40.000,220.000,0.00118806,944.102,2.5147,4.5975,1271.2000,340.0300,122.2100,646.8200],
        [40.000,230.000,0.00120732,990.438,2.6077,4.6717,1232.9000,314.7600,116.5200,637.8100],
        [40.000,240.000,0.00122842,1037.58,2.7005,4.7595,1192.1000,289.2200,111.2400,627.8500],
        [40.000,250.000,0.00125169,1085.69,2.7933,4.8646,1148.5000,263.4500,106.3000,616.9000],
        [40.000,250.358,0.00125257,1087.43,2.7967,4.8688,1146.9000,262.5300,106.1200,616.5000],
        [40.000,250.358,0.0497766,2800.9,6.0697,4.0217,501.6400,1.2639,17.4430,50.4410],
        [40.000,260.000,0.051777,2837.19,6.1384,3.5536,513.7800,1.2746,17.9360,50.3430],
        [40.000,270.000,0.0536916,2871.2,6.2016,3.2702,524.2600,1.2797,18.4360,50.4590],
        [40.000,280.000,0.0554948,2902.88,6.2594,3.0774,533.5800,1.2826,18.9270,50.7220],
        [40.000,290.000,0.0572145,2932.91,6.3132,2.9332,542.1800,1.2844,19.4090,51.0980],
        [40.000,300.000,0.058868,2961.65,6.3638,2.8199,550.2300,1.2857,19.8850,51.5650],
        [40.000,310.000,0.0604671,2989.38,6.4118,2.7285,557.8500,1.2866,20.3550,52.1070],
        [40.000,320.000,0.0620211,3016.28,6.4575,2.6536,565.1000,1.2872,20.8200,52.7150],
        [40.000,330.000,0.0635367,3042.49,6.5014,2.5915,572.0400,1.2876,21.2800,53.3810],
        [40.000,340.000,0.0650195,3068.14,6.5435,2.5399,578.7100,1.2877,21.7360,54.0970],
        [40.000,350.000,0.066474,3093.32,6.5843,2.4967,585.1400,1.2877,22.1880,54.8590],
        [40.000,360.000,0.067904,3118.1,6.6237,2.4604,591.3500,1.2875,22.6370,55.6630],
        [40.000,370.000,0.0693123,3142.55,6.662,2.4299,597.3800,1.2871,23.0830,56.5050],
        [40.000,380.000,0.0707017,3166.71,6.6993,2.4042,603.2300,1.2867,23.5250,57.3810],
        [40.000,390.000,0.0720743,3190.64,6.7357,2.3825,608.9300,1.2862,23.9650,58.2890],
        [40.000,400.000,0.0734318,3214.37,6.7712,2.3642,614.4900,1.2855,24.4030,59.2270],
        [40.000,410.000,0.0747759,3237.94,6.8059,2.3488,619.9200,1.2849,24.8380,60.1930],
        [40.000,420.000,0.0761079,3261.36,6.84,2.3359,625.2400,1.2841,25.2710,61.1840],
        [40.000,430.000,0.077429,3284.66,6.8734,2.3251,630.4500,1.2833,25.7020,62.1990],
        [40.000,440.000,0.0787401,3307.87,6.9061,2.3162,635.5600,1.2825,26.1300,63.2370],
        [40.000,450.000,0.0800422,3330.99,6.9383,2.3088,640.5800,1.2816,26.5570,64.2950],
        [40.000,460.000,0.081336,3354.05,6.97,2.3027,645.5100,1.2807,26.9820,65.3740],
        [40.000,470.000,0.0826222,3377.05,7.0012,2.2979,650.3600,1.2798,27.4050,66.4710],
        [40.000,480.000,0.0839015,3400.01,7.0318,2.2941,655.1400,1.2789,27.8270,67.5860],
        [40.000,490.000,0.0851742,3422.94,7.0621,2.2913,659.8400,1.2780,28.2470,68.7170],
        [40.000,500.000,0.086441,3445.84,7.0919,2.2892,664.4800,1.2770,28.6660,69.8650],
        [40.000,510.000,0.0877022,3468.72,7.1213,2.2879,669.0600,1.2760,29.0820,71.0270],
        [40.000,520.000,0.0889583,3491.6,7.1503,2.2872,673.5800,1.2751,29.4980,72.2030],
        [40.000,530.000,0.0902096,3514.47,7.179,2.2871,678.0400,1.2741,29.9120,73.3930],
        [40.000,540.000,0.0914564,3537.34,7.2073,2.2875,682.4400,1.2731,30.3240,74.5960],
        [40.000,550.000,0.092699,3560.22,7.2353,2.2883,686.8000,1.2721,30.7360,75.8110],
        [40.000,560.000,0.0939376,3583.11,7.2629,2.2896,691.1000,1.2711,31.1450,77.0370],
        [40.000,570.000,0.0951726,3606.01,7.2902,2.2913,695.3600,1.2701,31.5540,78.2740],
        [40.000,580.000,0.0964041,3628.93,7.3172,2.2933,699.5800,1.2692,31.9610,79.5220],
        [40.000,590.000,0.0976323,3651.88,7.344,2.2956,703.7500,1.2682,32.3670,80.7800],
        [40.000,600.000,0.0988574,3674.85,7.3704,2.2982,707.8700,1.2672,32.7720,82.0470],
        [40.000,650.000,0.104943,3790.15,7.4989,2.3149,727.9400,1.2624,34.7770,88.5130],
        [40.000,700.000,0.110973,3906.41,7.6215,2.336,747.1700,1.2577,36.7520,95.1620],
        [40.000,750.000,0.116961,4023.8,7.7391,2.3601,765.6800,1.2531,38.6990,101.9600],
        //[40.000,800.000,0.122915,4142.46,7.8523,2.3865,783.5500,1.2487,40.6180,108.8800],

        ];

        for dataset in steam_table {
            let p_bar = dataset[0];
            let t_deg_c = dataset[1];
            let v_m3_per_kg = dataset[2];
            let h_kj_per_kg = dataset[3];
            let s_kj_per_kg_k = dataset[4];
            let cp_kj_per_kg_k = dataset[5];
            let w_m_per_s = dataset[6];
            let kappa_dimensionless = dataset[7];
            let eta_micropascal_second = dataset[8];
            let lambda_milliwatt_per_meter_kelvin = dataset[9];
            assert_ph_flash(p_bar, t_deg_c, v_m3_per_kg, h_kj_per_kg, 
                s_kj_per_kg_k, cp_kj_per_kg_k, w_m_per_s, 
                kappa_dimensionless, eta_micropascal_second, 
                lambda_milliwatt_per_meter_kelvin);
        }
}

fn assert_ph_flash(
    p_bar: f64,
    t_deg_c: f64,
    v_m3_per_kg: f64,
    h_kj_per_kg: f64,
    s_kj_per_kg_k: f64,
    cp_kj_per_kg_k: f64,
    w_m_per_s: f64,
    kappa_dimensionless: f64,
    eta_micropascal_second: f64,
    lambda_milliwatt_per_meter_kelvin: f64,
){
    let p = Pressure::new::<bar>(p_bar);
    let h = AvailableEnergy::new::<kilojoule_per_kilogram>(h_kj_per_kg);

    // assert temp first to within 0.035 mk 
    let temp_tol_millikelvin = 35.0;

    let t_test = t_ph_eqm(p, h);

    approx::assert_abs_diff_eq!(
        t_deg_c,
        t_test.get::<degree_celsius>(),
        epsilon=temp_tol_millikelvin*1e-3
        );

    // assert volume to within 0.01%  (that's the tolerable error for 
    // backward eqn)
    let v_test = v_ph_eqm(p, h);
    approx::assert_relative_eq!(
        v_m3_per_kg,
        v_test.get::<cubic_meter_per_kilogram>(),
        max_relative=1e-4
        );

    // now entropy 
    let s_test = s_ph_eqm(p, h);
    approx::assert_relative_eq!(
        s_kj_per_kg_k,
        s_test.get::<kilojoule_per_kilogram_kelvin>(),
        max_relative=7e-3
        );

    // cp 
    let cp_test = cp_ph_eqm(p, h);
    approx::assert_relative_eq!(
        cp_kj_per_kg_k,
        cp_test.get::<kilojoule_per_kilogram_kelvin>(),
        max_relative=5e-4
        );
    // w 
    let w_test = w_ph_eqm(p, h);
    approx::assert_relative_eq!(
        w_m_per_s,
        w_test.get::<meter_per_second>(),
        max_relative=1e-4
        );

    // kappa
    let kappa_test = kappa_ph_eqm(p, h);
    approx::assert_relative_eq!(
        kappa_dimensionless,
        kappa_test.get::<ratio>(),
        max_relative=6e-3
        );

    // lambda tbd
    //
    let eta_micropascal_second_test = mu_ph_eqm(p, h)
        .get::<micropascal_second>();
    approx::assert_relative_eq!(
        eta_micropascal_second,
        eta_micropascal_second_test,
        max_relative=2e-2
        );



}



