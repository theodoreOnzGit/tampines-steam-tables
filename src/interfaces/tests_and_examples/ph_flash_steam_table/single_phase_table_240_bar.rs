use uom::si::{available_energy::kilojoule_per_kilogram, dynamic_viscosity::micropascal_second};
use uom::si::pressure::bar;
use uom::si::f64::*;
use uom::si::ratio::ratio;
use uom::si::specific_heat_capacity::kilojoule_per_kilogram_kelvin;
use uom::si::specific_volume::cubic_meter_per_kilogram;
use uom::si::thermodynamic_temperature::degree_celsius;
use uom::si::velocity::meter_per_second;

use crate::dynamic_viscosity::mu_ph_eqm;
use crate::interfaces::functional_programming::ph_flash_eqm::{cp_ph_eqm, kappa_ph_eqm, s_ph_eqm, t_ph_eqm, v_ph_eqm, w_ph_eqm};

/// single phase table (see page 201)
///
/// NOTE: ph flash UNABLE to do 
/// close to 800 degc
#[test]
pub fn single_phase_table_0_to_750_degc(){

    let steam_table: Vec<[f64; 10]> =
        vec![
        [240.000,0.000,0.000988461,23.9804,0.0004328,4.1129,1441.20000,87.55200,1744.10000,572.90000],
        [240.000,2.000,0.000988522,32.2058,0.030436,4.1126,1451.00000,88.74300,1633.70000,577.34000],
        [240.000,4.000,0.000988638,40.431,0.060222,4.1126,1460.40000,89.88500,1534.10000,581.63000],
        [240.000,6.000,0.000988805,48.6565,0.089794,4.1128,1469.40000,90.98000,1443.80000,585.78000],
        [240.000,8.000,0.00098902,56.8825,0.11916,4.1132,1478.00000,92.02700,1361.80000,589.79000],
        [240.000,10.000,0.000989281,65.1095,0.14832,4.1137,1486.20000,93.02800,1287.00000,593.68000],
        [240.000,12.000,0.000989585,73.3375,0.17727,4.1143,1494.00000,93.98200,1218.50000,597.46000],
        [240.000,14.000,0.000989931,81.5667,0.20603,4.1149,1501.50000,94.89100,1155.80000,601.12000],
        [240.000,16.000,0.000990316,89.7972,0.23459,4.1156,1508.60000,95.75600,1098.00000,604.68000],
        [240.000,18.000,0.000990739,98.029,0.26296,4.1162,1515.40000,96.57700,1044.80000,608.14000],
        [240.000,20.000,0.000991199,106.262,0.29115,4.1169,1521.80000,97.35600,995.57000,611.52000],
        [240.000,25.000,0.0009925,126.851,0.36079,4.1186,1536.60000,99.12200,887.65000,619.56000],
        [240.000,30.000,0.000994005,147.449,0.4293,4.1204,1549.50000,100.64000,797.43000,627.09000],
        [240.000,35.000,0.000995698,168.055,0.49672,4.1221,1560.70000,101.93000,721.17000,634.16000],
        [240.000,40.000,0.00099757,188.67,0.56308,4.1239,1570.30000,102.99000,656.09000,640.78000],
        [240.000,45.000,0.00099961,209.294,0.62842,4.1259,1578.40000,103.84000,600.07000,646.98000],
        [240.000,50.000,0.00100181,229.929,0.69278,4.128,1585.10000,104.50000,551.50000,652.77000],
        [240.000,55.000,0.00100417,250.575,0.75618,4.1304,1590.60000,104.97000,509.10000,658.17000],
        [240.000,60.000,0.00100668,271.233,0.81865,4.133,1594.80000,105.27000,471.86000,663.18000],
        [240.000,65.000,0.00100933,291.905,0.88024,4.1359,1597.90000,105.40000,438.97000,667.83000],
        [240.000,70.000,0.00101213,312.593,0.94097,4.1391,1599.90000,105.38000,409.77000,672.10000],
        [240.000,75.000,0.00101506,333.297,1.0009,4.1426,1600.90000,105.21000,383.75000,676.03000],
        [240.000,80.000,0.00101813,354.019,1.06,4.1464,1601.00000,104.90000,360.44000,679.60000],
        [240.000,85.000,0.00102134,374.762,1.1183,4.1506,1600.20000,104.46000,339.50000,682.83000],
        [240.000,90.000,0.00102469,395.526,1.1759,4.1551,1598.50000,103.91000,320.60000,685.72000],
        [240.000,95.000,0.00102817,416.314,1.2327,4.16,1596.10000,103.24000,303.50000,688.29000],
        [240.000,100.000,0.00103178,437.127,1.2889,4.1653,1592.90000,102.47000,287.97000,690.53000],
        [240.000,110.000,0.00103941,478.836,1.3992,4.1769,1584.40000,100.63000,260.91000,694.08000],
        [240.000,120.000,0.00104758,520.669,1.507,4.1901,1573.30000,98.44700,238.23000,696.41000],
        [240.000,130.000,0.00105631,562.643,1.6124,4.205,1559.80000,95.96500,219.03000,697.59000],
        [240.000,140.000,0.00106562,604.776,1.7156,4.2219,1544.00000,93.22000,202.62000,697.66000],
        [240.000,150.000,0.00107552,647.089,1.8168,4.2409,1526.30000,90.24700,188.49000,696.67000],
        [240.000,160.000,0.00108606,689.603,1.9161,4.2624,1506.50000,87.07500,176.21000,694.66000],
        [240.000,170.000,0.00109728,732.346,2.0137,4.2866,1484.90000,83.72800,165.47000,691.66000],
        [240.000,180.000,0.00110922,775.346,2.1096,4.314,1461.40000,80.22800,156.00000,688.22000],
        [240.000,190.000,0.00112193,818.638,2.2041,4.345,1436.10000,76.59700,147.60000,683.64000],
        [240.000,200.000,0.00113549,862.26,2.2973,4.3802,1409.00000,72.85300,140.08000,678.14000],
        [240.000,210.000,0.00114998,906.258,2.3893,4.4202,1380.10000,69.01300,133.32000,671.78000],
        [240.000,220.000,0.0011655,950.682,2.4803,4.4657,1349.40000,65.09400,127.19000,664.56000],
        [240.000,230.000,0.00118217,995.593,2.5705,4.5177,1316.80000,61.11500,121.60000,656.52000],
        [240.000,240.000,0.00120013,1041.06,2.66,4.5773,1282.40000,57.09200,116.45000,647.65000],
        [240.000,250.000,0.00121955,1087.17,2.749,4.6458,1246.00000,53.04300,111.67000,637.96000],
        [240.000,260.000,0.00124066,1134.01,2.8376,4.7252,1207.70000,48.98400,107.21000,627.45000],
        [240.000,270.000,0.00126373,1181.72,2.9263,4.8176,1167.40000,44.93100,103.00000,616.09000],
        [240.000,280.000,0.00128911,1230.42,3.0151,4.9262,1124.80000,40.89600,98.99900,603.87000],
        [240.000,290.000,0.00131725,1280.31,3.1045,5.0555,1079.90000,36.88700,95.15000,590.73000],
        [240.000,300.000,0.00134878,1331.62,3.1948,5.212,1032.20000,32.91300,91.40800,576.64000],
        [240.000,310.000,0.00138457,1384.67,3.2866,5.4056,981.37000,28.98300,87.72300,561.47000],
        [240.000,320.000,0.00142586,1439.91,3.3805,5.6524,926.94000,25.10800,84.03900,545.10000],
        [240.000,330.000,0.00147461,1497.99,3.4776,5.9796,868.05000,21.29100,80.28400,527.29000],
        [240.000,340.000,0.001534,1559.93,3.5794,6.4387,803.19000,17.52300,76.36400,507.71000],
        [240.000,350.000,0.00160989,1627.56,3.6888,7.1423,730.87000,13.82500,72.12400,485.74000],
        [240.000,360.000,0.00171529,1704.72,3.8116,8.4459,647.89000,10.19700,67.25300,460.32000],
        [240.000,370.000,0.00189103,1802.54,3.9649,11.773,538.24000,6.38330,60.86800,429.53000],
        [240.000,380.000,0.00261206,2025.16,4.3076,67.846,355.44000,2.01530,45.48600,429.81000],
        [240.000,390.000,0.00561344,2500.75,5.032,18.2,426.49000,1.35010,29.36200,189.95000],
        [240.000,400.000,0.00673124,2637.37,5.2366,10.804,463.97000,1.33250,28.30000,145.67000],
        [240.000,410.000,0.00754038,2730.75,5.3744,8.182,489.68000,1.32500,28.07200,127.21000],
        [240.000,420.000,0.00820459,2804.86,5.4821,6.7651,510.09000,1.32140,28.12300,116.99000],
        [240.000,430.000,0.00878146,2867.81,5.5723,5.8859,527.11000,1.31830,28.30400,110.61000],
        [240.000,440.000,0.00929927,2923.48,5.6509,5.2815,541.87000,1.31560,28.55700,106.33000],
        [240.000,450.000,0.00977372,2973.96,5.7212,4.8354,555.03000,1.31330,28.85300,103.36000],
        [240.000,460.000,0.0102146,3020.53,5.7852,4.4912,566.99000,1.31130,29.17700,101.26000],
        [240.000,470.000,0.0106287,3064.02,5.8441,4.2179,577.99000,1.30970,29.51900,99.79200],
        [240.000,480.000,0.0110207,3105.06,5.899,3.9963,588.23000,1.30820,29.87500,98.78700],
        [240.000,490.000,0.0113944,3144.08,5.9504,3.8138,597.81000,1.30680,30.24000,98.14100],
        [240.000,500.000,0.0117526,3181.43,5.9991,3.6614,606.84000,1.30560,30.61100,97.78000],
        [240.000,510.000,0.0120975,3217.39,6.0453,3.5328,615.40000,1.30440,30.98600,97.64900],
        [240.000,520.000,0.0124309,3252.15,6.0894,3.4232,623.54000,1.30320,31.36500,97.70900],
        [240.000,530.000,0.0127542,3285.9,6.1317,3.329,631.32000,1.30210,31.74500,97.92800],
        [240.000,540.000,0.0130686,3318.78,6.1723,3.2474,638.77000,1.30090,32.12700,98.28300],
        [240.000,550.000,0.0133751,3350.89,6.2116,3.1764,645.93000,1.29980,32.51000,98.75500],
        [240.000,560.000,0.0136745,3382.33,6.2496,3.1141,652.83000,1.29860,32.89400,99.32800],
        [240.000,570.000,0.0139675,3413.19,6.2864,3.0593,659.50000,1.29750,33.27700,99.99100],
        [240.000,580.000,0.0142547,3443.54,6.3222,3.0107,665.95000,1.29630,33.66100,100.73000],
        [240.000,590.000,0.0145367,3473.43,6.357,2.9676,672.21000,1.29520,34.04400,101.54000],
        [240.000,600.000,0.0148139,3502.91,6.391,2.9292,678.29000,1.29400,34.42700,102.42000],
        [240.000,650.000,0.0161403,3645.56,6.5499,2.7892,706.51000,1.28860,36.33100,107.53000],
        [240.000,700.000,0.0173913,3782.76,6.6946,2.706,731.93000,1.28350,38.21500,113.49000],
        [240.000,750.000,0.0185887,3916.71,6.8289,2.6564,755.31000,1.27880,40.07600,120.12000],
        //[240.000,800.000,0.0197464,4048.76,6.9549,2.6286,777.08000,1.27420,41.91500,127.14000],

        ];

        for dataset in steam_table {
            let p_bar = dataset[0];
            let t_deg_c = dataset[1];
            let v_m3_per_kg = dataset[2];
            let h_kj_per_kg = dataset[3];
            let s_kj_per_kg_k = dataset[4];
            let cp_kj_per_kg_k = dataset[5];
            let w_m_per_s = dataset[6];
            let kappa_dimensionless = dataset[7];
            let eta_micropascal_second = dataset[8];
            let lambda_milliwatt_per_meter_kelvin = dataset[9];
            assert_ph_flash(p_bar, t_deg_c, v_m3_per_kg, h_kj_per_kg, 
                s_kj_per_kg_k, cp_kj_per_kg_k, w_m_per_s, 
                kappa_dimensionless, eta_micropascal_second, 
                lambda_milliwatt_per_meter_kelvin);
        }
}

fn assert_ph_flash(
    p_bar: f64,
    t_deg_c: f64,
    v_m3_per_kg: f64,
    h_kj_per_kg: f64,
    s_kj_per_kg_k: f64,
    cp_kj_per_kg_k: f64,
    w_m_per_s: f64,
    kappa_dimensionless: f64,
    eta_micropascal_second: f64,
    lambda_milliwatt_per_meter_kelvin: f64,
){
    let p = Pressure::new::<bar>(p_bar);
    let h = AvailableEnergy::new::<kilojoule_per_kilogram>(h_kj_per_kg);

    // assert temp first to within 0.035 mk 
    let temp_tol_millikelvin = 35.0;

    let t_test = t_ph_eqm(p, h);

    approx::assert_abs_diff_eq!(
        t_deg_c,
        t_test.get::<degree_celsius>(),
        epsilon=temp_tol_millikelvin*1e-3
        );

    // assert volume to within 0.01%  (that's the tolerable error for 
    // backward eqn)
    let v_test = v_ph_eqm(p, h);
    approx::assert_relative_eq!(
        v_m3_per_kg,
        v_test.get::<cubic_meter_per_kilogram>(),
        max_relative=5e-4
        );

    // now entropy 
    let s_test = s_ph_eqm(p, h);
    approx::assert_relative_eq!(
        s_kj_per_kg_k,
        s_test.get::<kilojoule_per_kilogram_kelvin>(),
        max_relative=7e-3
        );

    // cp 
    let cp_test = cp_ph_eqm(p, h);
    approx::assert_relative_eq!(
        cp_kj_per_kg_k,
        cp_test.get::<kilojoule_per_kilogram_kelvin>(),
        max_relative=5e-3
        );
    // w 
    let w_test = w_ph_eqm(p, h);
    approx::assert_relative_eq!(
        w_m_per_s,
        w_test.get::<meter_per_second>(),
        max_relative=5e-3
        );

    // kappa
    let kappa_test = kappa_ph_eqm(p, h);
    approx::assert_relative_eq!(
        kappa_dimensionless,
        kappa_test.get::<ratio>(),
        max_relative=6e-3
        );

    // lambda tbd
    //
    let eta_micropascal_second_test = mu_ph_eqm(p, h)
        .get::<micropascal_second>();
    approx::assert_relative_eq!(
        eta_micropascal_second,
        eta_micropascal_second_test,
        max_relative=2e-2
        );



}



