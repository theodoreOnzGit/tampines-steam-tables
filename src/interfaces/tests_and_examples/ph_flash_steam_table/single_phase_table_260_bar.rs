use uom::si::thermal_conductivity::milliwatt_per_meter_kelvin;
use uom::si::{available_energy::kilojoule_per_kilogram, dynamic_viscosity::micropascal_second};
use uom::si::pressure::bar;
use uom::si::f64::*;
use uom::si::ratio::ratio;
use uom::si::specific_heat_capacity::kilojoule_per_kilogram_kelvin;
use uom::si::specific_volume::cubic_meter_per_kilogram;
use uom::si::thermodynamic_temperature::degree_celsius;
use uom::si::velocity::meter_per_second;

use crate::dynamic_viscosity::mu_ph_eqm;
use crate::interfaces::functional_programming::ph_flash_eqm::{cp_ph_eqm, kappa_ph_eqm, lambda_ph_eqm, s_ph_eqm, t_ph_eqm, v_ph_eqm, w_ph_eqm};

/// single phase table (see page 201)
///
/// NOTE: ph flash UNABLE to do triple point liquid and vapour accurately.
/// or even close to 0 degc
#[test]
pub fn single_phase_table_2_to_750_degc(){

    let steam_table: Vec<[f64; 10]> =
        vec![
        //[260.000,0.000,0.000987523,25.9455,0.0003931,4.1051,1444.50000,81.27100,1740.60000,574.26000],
        [260.000,2.000,0.000987597,34.1558,0.030341,4.1052,1454.30000,82.37200,1630.80000,578.66000],
        [260.000,4.000,0.000987724,42.3666,0.060074,4.1056,1463.70000,83.42800,1531.70000,582.91000],
        [260.000,6.000,0.000987901,50.5784,0.089597,4.1062,1472.70000,84.44000,1441.80000,587.02000],
        [260.000,8.000,0.000988125,58.7914,0.11891,4.1069,1481.30000,85.40800,1360.10000,591.00000],
        [260.000,10.000,0.000988395,67.0059,0.14803,4.1076,1489.50000,86.33200,1285.60000,594.87000],
        [260.000,12.000,0.000988707,75.222,0.17694,4.1084,1497.30000,87.21400,1217.40000,598.61000],
        [260.000,14.000,0.000989059,83.4397,0.20566,4.1093,1504.80000,88.05400,1154.90000,602.26000],
        [260.000,16.000,0.000989451,91.6591,0.23419,4.1101,1511.90000,88.85300,1097.30000,605.80000],
        [260.000,18.000,0.00098988,99.8802,0.26252,4.111,1518.70000,89.61200,1044.30000,609.24000],
        [260.000,20.000,0.000990345,108.103,0.29067,4.1118,1525.10000,90.33200,995.19000,612.60000],
        [260.000,25.000,0.000991657,128.667,0.36022,4.1138,1539.80000,91.96400,887.54000,620.61000],
        [260.000,30.000,0.000993169,149.241,0.42866,4.1158,1552.70000,93.36900,797.51000,628.12000],
        [260.000,35.000,0.000994867,169.825,0.496,4.1178,1563.90000,94.55800,721.38000,635.16000],
        [260.000,40.000,0.000996742,190.419,0.5623,4.1197,1573.60000,95.54400,656.40000,641.77000],
        [260.000,45.000,0.000998783,211.023,0.62757,4.1218,1581.70000,96.33800,600.46000,647.96000],
        [260.000,50.000,0.00100098,231.637,0.69186,4.124,1588.50000,96.95000,551.94000,653.75000],
        [260.000,55.000,0.00100334,252.263,0.7552,4.1265,1593.90000,97.39100,509.57000,659.15000],
        [260.000,60.000,0.00100584,272.902,0.81762,4.1291,1598.20000,97.67100,472.35000,664.18000],
        [260.000,65.000,0.00100849,293.555,0.87916,4.1321,1601.40000,97.79800,439.48000,668.83000],
        [260.000,70.000,0.00101127,314.223,0.93983,4.1353,1603.40000,97.78200,410.30000,673.11000],
        [260.000,75.000,0.0010142,334.908,0.99967,4.1388,1604.50000,97.63200,384.28000,677.05000],
        [260.000,80.000,0.00101726,355.612,1.0587,4.1426,1604.70000,97.35500,360.98000,680.63000],
        [260.000,85.000,0.00102046,376.335,1.117,4.1468,1603.90000,96.96000,340.03000,683.87000],
        [260.000,90.000,0.00102379,397.08,1.1745,4.1513,1602.30000,96.45300,321.14000,686.78000],
        [260.000,95.000,0.00102725,417.848,1.2313,4.1561,1599.90000,95.84300,304.03000,689.36000],
        [260.000,100.000,0.00103084,438.641,1.2874,4.1613,1596.80000,95.13600,288.50000,691.62000],
        [260.000,110.000,0.00103843,480.31,1.3976,4.1727,1588.50000,93.45400,261.44000,695.20000],
        [260.000,120.000,0.00104656,522.101,1.5053,4.1857,1577.50000,91.45400,238.75000,697.58000],
        [260.000,130.000,0.00105524,564.03,1.6106,4.2004,1564.20000,89.17700,219.53000,698.80000],
        [260.000,140.000,0.00106449,606.116,1.7137,4.217,1548.70000,86.65900,203.12000,698.92000],
        [260.000,150.000,0.00107433,648.377,1.8148,4.2356,1531.10000,83.92900,188.97000,697.97000],
        [260.000,160.000,0.00108479,690.836,1.914,4.2566,1511.60000,81.01600,176.69000,696.01000],
        [260.000,170.000,0.00109592,733.518,2.0114,4.2803,1490.30000,77.94200,165.94000,693.07000],
        [260.000,180.000,0.00110775,776.452,2.1072,4.307,1467.10000,74.72800,156.47000,689.65000],
        [260.000,190.000,0.00112035,819.67,2.2015,4.3373,1442.10000,71.39300,148.07000,685.13000],
        [260.000,200.000,0.00113378,863.21,2.2945,4.3715,1415.30000,67.95400,140.55000,679.70000],
        [260.000,210.000,0.00114812,907.116,2.3863,4.4104,1386.80000,64.42700,133.79000,673.41000],
        [260.000,220.000,0.00116346,951.435,2.4771,4.4546,1356.50000,60.82900,127.67000,666.28000],
        [260.000,230.000,0.00117991,996.227,2.5671,4.5049,1324.40000,57.17400,122.08000,658.32000],
        [260.000,240.000,0.00119762,1041.56,2.6563,4.5625,1290.40000,53.47900,116.94000,649.54000],
        [260.000,250.000,0.00121675,1087.51,2.7449,4.6286,1254.70000,49.76100,112.17000,639.96000],
        [260.000,260.000,0.0012375,1134.16,2.8333,4.7048,1217.00000,46.03400,107.73000,629.56000],
        [260.000,270.000,0.00126012,1181.64,2.9215,4.7932,1177.40000,42.31400,103.54000,618.34000],
        [260.000,280.000,0.00128495,1230.08,3.0099,4.8966,1135.80000,38.61200,99.55800,606.27000],
        [260.000,290.000,0.0013124,1279.64,3.0987,5.0188,1091.90000,34.93800,95.74000,593.33000],
        [260.000,300.000,0.00134302,1330.53,3.1882,5.1654,1045.40000,31.29800,92.03700,579.45000],
        [260.000,310.000,0.0013776,1383.05,3.2791,5.3447,996.13000,27.70400,88.40400,564.56000],
        [260.000,320.000,0.00141722,1437.58,3.3718,5.5697,943.68000,24.16800,84.78800,548.54000],
        [260.000,330.000,0.00146353,1494.67,3.4672,5.8618,887.58000,20.70300,81.12900,531.19000],
        [260.000,340.000,0.00151912,1555.16,3.5667,6.2589,826.76000,17.30600,77.34700,512.24000],
        [260.000,350.000,0.00158845,1620.44,3.6723,6.8365,759.34000,13.96100,73.32600,491.22000],
        [260.000,360.000,0.00168051,1693.16,3.788,7.805,684.72000,10.73000,68.85400,467.32000],
        [260.000,370.000,0.00181755,1779.58,3.9234,9.746,593.74000,7.45980,63.46500,439.03000],
        [260.000,380.000,0.00208694,1901.05,4.1107,16.212,474.65000,4.15200,55.60300,404.95000],
        [260.000,390.000,0.00355176,2242.7,4.629,47.316,379.01000,1.55560,36.83600,331.22000],
        [260.000,400.000,0.00528668,2510.55,5.0304,16.237,436.89000,1.38860,30.65300,190.95000],
        [260.000,410.000,0.0062564,2639.46,5.2206,10.554,469.97000,1.35780,29.49500,151.85000],
        [260.000,420.000,0.00699044,2731.76,5.3548,8.1627,494.42000,1.34500,29.15900,133.44000],
        [260.000,430.000,0.00760205,2806.08,5.4612,6.8141,514.15000,1.33740,29.12900,122.82000],
        [260.000,440.000,0.00813711,2869.65,5.551,5.9567,530.78000,1.33160,29.24900,116.03000],
        [260.000,450.000,0.00861924,2926.06,5.6296,5.3574,545.33000,1.32700,29.45400,111.42000],
        [260.000,460.000,0.00906196,2977.3,5.7,4.9105,558.38000,1.32330,29.71200,108.17000],
        [260.000,470.000,0.0094739,3024.6,5.764,4.5635,570.28000,1.32030,30.00400,105.84000],
        [260.000,480.000,0.00986106,3068.8,5.8231,4.2866,581.27000,1.31780,30.32000,104.19000],
        [260.000,490.000,0.0102278,3110.51,5.8781,4.0614,591.50000,1.31570,30.65200,103.04000],
        [260.000,500.000,0.0105776,3150.16,5.9298,3.8754,601.10000,1.31380,30.99600,102.27000],
        [260.000,510.000,0.0109128,3188.11,5.9785,3.7198,610.16000,1.31210,31.34900,101.80000],
        [260.000,520.000,0.0112356,3224.64,6.0249,3.5883,618.74000,1.31050,31.70900,101.58000],
        [260.000,530.000,0.0115477,3259.95,6.0691,3.4761,626.91000,1.30900,32.07300,101.57000],
        [260.000,540.000,0.0118502,3294.21,6.1115,3.3796,634.71000,1.30750,32.44000,101.72000],
        [260.000,550.000,0.0121444,3327.58,6.1523,3.2959,642.19000,1.30610,32.81000,102.02000],
        [260.000,560.000,0.0124312,3360.17,6.1917,3.2229,649.38000,1.30470,33.18200,102.45000],
        [260.000,570.000,0.0127112,3392.07,6.2297,3.1587,656.30000,1.30330,33.55500,102.98000],
        [260.000,580.000,0.0129853,3423.37,6.2666,3.1021,662.99000,1.30190,33.92900,103.61000],
        [260.000,590.000,0.0132538,3454.13,6.3025,3.052,669.47000,1.30060,34.30400,104.32000],
        [260.000,600.000,0.0135174,3484.42,6.3374,3.0073,675.75000,1.29930,34.67900,105.11000],
        [260.000,650.000,0.014774,3630.36,6.5,2.8447,704.78000,1.29310,36.55100,109.91000],
        [260.000,700.000,0.0159531,3769.97,6.6473,2.7476,730.78000,1.28750,38.41100,115.69000],
        [260.000,750.000,0.0170777,3905.75,6.7833,2.6888,754.59000,1.28240,40.25300,122.24000],
        //[260.000,800.000,0.018162,4039.25,6.9107,2.6545,776.71000,1.27760,42.07500,129.21000],

        ];

        for dataset in steam_table {
            let p_bar = dataset[0];
            let t_deg_c = dataset[1];
            let v_m3_per_kg = dataset[2];
            let h_kj_per_kg = dataset[3];
            let s_kj_per_kg_k = dataset[4];
            let cp_kj_per_kg_k = dataset[5];
            let w_m_per_s = dataset[6];
            let kappa_dimensionless = dataset[7];
            let eta_micropascal_second = dataset[8];
            let lambda_milliwatt_per_meter_kelvin = dataset[9];
            assert_ph_flash(p_bar, t_deg_c, v_m3_per_kg, h_kj_per_kg, 
                s_kj_per_kg_k, cp_kj_per_kg_k, w_m_per_s, 
                kappa_dimensionless, eta_micropascal_second, 
                lambda_milliwatt_per_meter_kelvin);
        }
}

fn assert_ph_flash(
    p_bar: f64,
    t_deg_c: f64,
    v_m3_per_kg: f64,
    h_kj_per_kg: f64,
    s_kj_per_kg_k: f64,
    cp_kj_per_kg_k: f64,
    w_m_per_s: f64,
    kappa_dimensionless: f64,
    eta_micropascal_second: f64,
    lambda_milliwatt_per_meter_kelvin: f64,
){
    let p = Pressure::new::<bar>(p_bar);
    let h = AvailableEnergy::new::<kilojoule_per_kilogram>(h_kj_per_kg);

    // assert temp first to within 0.035 mk 
    let temp_tol_millikelvin = 35.0;

    let t_test = t_ph_eqm(p, h);

    approx::assert_abs_diff_eq!(
        t_deg_c,
        t_test.get::<degree_celsius>(),
        epsilon=temp_tol_millikelvin*1e-3
        );

    // assert volume to within 0.01%  (that's the tolerable error for 
    // backward eqn)
    let v_test = v_ph_eqm(p, h);
    approx::assert_relative_eq!(
        v_m3_per_kg,
        v_test.get::<cubic_meter_per_kilogram>(),
        max_relative=5e-4
        );

    // now entropy 
    let s_test = s_ph_eqm(p, h);
    approx::assert_relative_eq!(
        s_kj_per_kg_k,
        s_test.get::<kilojoule_per_kilogram_kelvin>(),
        max_relative=7e-3
        );

    // cp 
    let cp_test = cp_ph_eqm(p, h);
    approx::assert_relative_eq!(
        cp_kj_per_kg_k,
        cp_test.get::<kilojoule_per_kilogram_kelvin>(),
        max_relative=5e-3
        );
    // w 
    let w_test = w_ph_eqm(p, h);
    approx::assert_relative_eq!(
        w_m_per_s,
        w_test.get::<meter_per_second>(),
        max_relative=5e-3
        );

    // kappa
    let kappa_test = kappa_ph_eqm(p, h);
    approx::assert_relative_eq!(
        kappa_dimensionless,
        kappa_test.get::<ratio>(),
        max_relative=6e-3
        );

    // dynamic_viscosity
    //
    let eta_micropascal_second_test = mu_ph_eqm(p, h)
        .get::<micropascal_second>();
    approx::assert_relative_eq!(
        eta_micropascal_second,
        eta_micropascal_second_test,
        max_relative=2e-2
        );

    // thermal conductivity
    let lambda_test_milliwatt_per_meter_kelvin = 
        lambda_ph_eqm(p, h).get::<milliwatt_per_meter_kelvin>();
    approx::assert_relative_eq!(
        lambda_milliwatt_per_meter_kelvin,
        lambda_test_milliwatt_per_meter_kelvin,
        max_relative=1e-2
        );



}



