use uom::si::available_energy::kilojoule_per_kilogram;
use uom::si::pressure::bar;
use uom::si::f64::*;
use uom::si::ratio::ratio;
use uom::si::specific_heat_capacity::kilojoule_per_kilogram_kelvin;
use uom::si::specific_volume::cubic_meter_per_kilogram;
use uom::si::thermodynamic_temperature::degree_celsius;
use uom::si::velocity::meter_per_second;

use crate::interfaces::functional_programming::ph_flash_eqm::{cp_ph_eqm, kappa_ph_eqm, s_ph_eqm, t_ph_eqm, v_ph_eqm, w_ph_eqm};

/// single phase table (see page 201)
///
/// NOTE: ph flash UNABLE to do triple point liquid and vapour accurately.
/// or even close to 0 degc
#[test]
pub fn single_phase_table_2_to_750_degc(){

    let steam_table: Vec<[f64; 10]> =
        vec![
        //[400.000,0.000,0.000981126,39.5556,-0.0002298,4.0544,1468.5000,54.9460,1718.4000,583.4300],
        [400.000,2.000,0.00098128,47.6674,0.029359,4.0573,1478.2000,55.6680,1612.3000,587.5500],
        [400.000,4.000,0.000981481,55.7849,0.058755,4.0602,1487.5000,56.3590,1516.4000,591.5500],
        [400.000,6.000,0.000981726,63.908,0.087959,4.0629,1496.4000,57.0200,1429.2000,595.4400],
        [400.000,8.000,0.000982012,72.0363,0.11697,4.0655,1504.9000,57.6520,1349.8000,599.2200],
        [400.000,10.000,0.000982338,80.1697,0.1458,4.0679,1513.0000,58.2560,1277.2000,602.9000],
        [400.000,12.000,0.000982701,88.3079,0.17444,4.0702,1520.7000,58.8310,1210.7000,606.4800],
        [400.000,14.000,0.000983101,96.4505,0.2029,4.0724,1528.1000,59.3790,1149.5000,609.9800],
        [400.000,16.000,0.000983535,104.597,0.23117,4.0744,1535.1000,59.9010,1093.2000,613.3800],
        [400.000,18.000,0.000984002,112.748,0.25926,4.0763,1541.8000,60.3970,1041.2000,616.7100],
        [400.000,20.000,0.000984502,120.902,0.28717,4.0781,1548.2000,60.8680,993.0000,619.9600],
        [400.000,25.000,0.000985884,141.303,0.35618,4.0821,1562.9000,61.9380,887.1200,627.7600],
        [400.000,30.000,0.000987447,161.723,0.4241,4.0857,1575.7000,62.8620,798.3400,635.1100],
        [400.000,35.000,0.00098918,182.159,0.49096,4.0888,1587.0000,63.6500,723.1000,642.0600],
        [400.000,40.000,0.000991072,202.611,0.5568,4.0918,1596.7000,64.3080,658.7500,648.6000],
        [400.000,45.000,0.000993117,223.077,0.62164,4.0946,1605.0000,64.8430,603.2600,654.7600],
        [400.000,50.000,0.000995309,243.557,0.68551,4.0974,1611.9000,65.2630,555.0600,660.5400],
        [400.000,55.000,0.000997641,264.051,0.74844,4.1003,1617.6000,65.5730,512.9200,665.9600],
        [400.000,60.000,0.00100011,284.56,0.81047,4.1033,1622.2000,65.7800,475.8500,671.0100],
        [400.000,65.000,0.00100271,305.084,0.87162,4.1064,1625.6000,65.8890,443.0900,675.7100],
        [400.000,70.000,0.00100545,325.624,0.93191,4.1097,1628.1000,65.9060,413.9700,680.0700],
        [400.000,75.000,0.00100831,346.181,0.99139,4.1132,1629.5000,65.8360,387.9900,684.0800],
        [400.000,80.000,0.0010113,366.757,1.0501,4.117,1630.1000,65.6850,364.7100,687.7500],
        [400.000,85.000,0.00101441,387.351,1.108,4.121,1629.7000,65.4570,343.7700,691.0900],
        [400.000,90.000,0.00101765,407.967,1.1651,4.1252,1628.6000,65.1570,324.8600,694.1000],
        [400.000,95.000,0.00102101,428.604,1.2216,4.1298,1626.7000,64.7900,307.7400,696.7900],
        [400.000,100.000,0.00102449,449.265,1.2773,4.1346,1624.0000,64.3590,292.1800,699.1700],
        [400.000,110.000,0.00103183,490.662,1.3868,4.145,1616.7000,63.3250,265.0600,703.0000],
        [400.000,120.000,0.00103966,532.169,1.4937,4.1567,1606.8000,62.0850,242.3000,705.6500],
        [400.000,130.000,0.001048,573.8,1.5983,4.1697,1594.7000,60.6640,223.0300,707.1600],
        [400.000,140.000,0.00105685,615.569,1.7006,4.1843,1580.5000,59.0870,206.5500,707.5800],
        [400.000,150.000,0.00106625,657.491,1.8009,4.2005,1564.3000,57.3730,192.3500,706.9600],
        [400.000,160.000,0.00107622,699.585,1.8992,4.2186,1546.3000,55.5400,180.0100,705.3400],
        [400.000,170.000,0.00108677,741.871,1.9957,4.2389,1526.5000,53.6050,169.2200,702.7600],
        [400.000,180.000,0.00109796,784.371,2.0906,4.2616,1505.1000,51.5800,159.7200,699.2800],
        [400.000,190.000,0.00110982,827.113,2.1839,4.2871,1482.1000,49.4780,151.2900,695.4000],
        [400.000,200.000,0.00112241,870.124,2.2758,4.3158,1457.4000,47.3110,143.7700,690.4300],
        [400.000,210.000,0.00113577,913.44,2.3663,4.348,1431.2000,45.0880,137.0100,684.6100],
        [400.000,220.000,0.00114999,957.098,2.4558,4.3843,1403.5000,42.8210,130.9000,677.9900],
        [400.000,230.000,0.00116514,1001.14,2.5442,4.4252,1374.2000,40.5190,125.3400,670.5800],
        [400.000,240.000,0.00118132,1045.62,2.6317,4.4713,1343.4000,38.1930,120.2400,662.4100],
        [400.000,250.000,0.00119864,1090.59,2.7185,4.5234,1311.1000,35.8520,115.5400,653.5000],
        [400.000,260.000,0.00121724,1136.11,2.8047,4.5824,1277.3000,33.5060,111.1700,643.8500],
        [400.000,270.000,0.00123729,1182.26,2.8905,4.6493,1242.0000,31.1670,107.0900,633.4600],
        [400.000,280.000,0.00125898,1229.13,2.976,4.7254,1205.2000,28.8450,103.2300,622.3500],
        [400.000,290.000,0.00128255,1276.8,3.0614,4.8123,1167.0000,26.5480,99.5780,610.4900],
        [400.000,300.000,0.00130831,1325.41,3.1469,4.912,1127.4000,24.2870,96.0770,597.8900],
        [400.000,310.000,0.00133664,1375.1,3.2329,5.0272,1086.2000,22.0680,92.6990,584.5100],
        [400.000,320.000,0.00136803,1426.02,3.3195,5.1615,1043.4000,19.8950,89.4090,570.3300],
        [400.000,330.000,0.00140314,1478.41,3.407,5.3198,998.6900,17.7710,86.1750,555.2900],
        [400.000,340.000,0.00144284,1532.52,3.496,5.5097,951.9900,15.7030,82.9620,539.3100],
        [400.000,350.000,0.0014884,1588.74,3.587,5.7424,903.6200,13.7150,79.7320,522.2600],
        [400.000,360.000,0.00154152,1647.62,3.6807,6.044,853.4500,11.8130,76.4450,504.0000],
        [400.000,370.000,0.00160475,1709.93,3.7783,6.4342,800.7700,9.9896,73.0540,484.3300],
        [400.000,380.000,0.00168216,1776.72,3.8814,6.9509,745.7500,8.2653,69.4930,462.8800],
        [400.000,390.000,0.00178035,1849.61,3.9921,7.6679,688.5200,6.6568,65.6770,439.1800],
        [400.000,400.000,0.00191069,1931.13,4.1141,8.7012,630.1400,5.1954,61.4970,412.5200],
        [400.000,410.000,0.00209341,2025.18,4.2527,10.192,573.7600,3.9314,56.8290,381.9500],
        [400.000,420.000,0.00236117,2136.3,4.4142,12.045,526.6100,2.9362,51.6630,346.3500],
        [400.000,430.000,0.00274238,2263.84,4.5969,13.205,499.0800,2.2707,46.4840,305.3200],
        [400.000,440.000,0.00320965,2394.03,4.7807,12.554,493.6600,1.8982,42.2730,263.1800],
        [400.000,450.000,0.00369271,2511.77,4.9447,10.95,501.5000,1.7027,39.4440,227.6000],
        [400.000,460.000,0.00414901,2613.32,5.0842,9.3909,514.6600,1.5960,37.6870,201.0100],
        [400.000,470.000,0.00456732,2700.69,5.2026,8.1475,528.9500,1.5315,36.6170,181.8900],
        [400.000,480.000,0.00494969,2777.18,5.3048,7.1892,542.9200,1.4888,35.9720,168.0600],
        [400.000,490.000,0.0053004,2845.2,5.3946,6.4475,556.2500,1.4594,35.6010,157.9400],
        [400.000,500.000,0.0056249,2906.69,5.4746,5.8745,568.8300,1.4381,35.4110,150.4100],
        [400.000,510.000,0.0059279,2963.09,5.5471,5.4221,580.6700,1.4220,35.3450,144.7200],
        [400.000,520.000,0.00621295,3015.42,5.6135,5.0563,591.8100,1.4093,35.3670,140.3700],
        [400.000,530.000,0.0064828,3064.43,5.6749,4.7551,602.3000,1.3990,35.4540,137.0200],
        [400.000,540.000,0.00673966,3110.69,5.7322,4.5044,612.2100,1.3903,35.5890,134.4500],
        [400.000,550.000,0.00698531,3154.65,5.7859,4.2938,621.6000,1.3828,35.7620,132.4800],
        [400.000,560.000,0.00722123,3196.67,5.8366,4.1156,630.5100,1.3763,35.9640,131.0000],
        [400.000,570.000,0.00744864,3237.05,5.8848,3.9634,638.9900,1.3704,36.1890,129.9100],
        [400.000,580.000,0.00766855,3276.01,5.9308,3.8324,647.0900,1.3651,36.4320,129.1400],
        [400.000,590.000,0.00788179,3313.75,5.9747,3.7188,654.8500,1.3602,36.6910,128.6500],
        [400.000,600.000,0.00808906,3350.43,6.017,3.6194,662.3100,1.3557,36.9620,128.3900],
        [400.000,650.000,0.00905378,3521.76,6.2079,3.2666,695.9800,1.3375,38.4390,129.5300],
        [400.000,700.000,0.00993098,3679.42,6.3743,3.057,725.3600,1.3245,40.0320,133.1600],
        [400.000,750.000,0.0107484,3828.75,6.5239,2.9259,751.7600,1.3145,41.6760,138.6200],
        //[400.000,800.000,0.0115229,3972.81,6.6614,2.8428,775.8300,1.3059,43.3430,144.9600],

        ];

        for dataset in steam_table {
            let p_bar = dataset[0];
            let t_deg_c = dataset[1];
            let v_m3_per_kg = dataset[2];
            let h_kj_per_kg = dataset[3];
            let s_kj_per_kg_k = dataset[4];
            let cp_kj_per_kg_k = dataset[5];
            let w_m_per_s = dataset[6];
            let kappa_dimensionless = dataset[7];
            let eta_micropascal_second = dataset[8];
            let lambda_milliwatt_per_meter_kelvin = dataset[9];
            assert_ph_flash(p_bar, t_deg_c, v_m3_per_kg, h_kj_per_kg, 
                s_kj_per_kg_k, cp_kj_per_kg_k, w_m_per_s, 
                kappa_dimensionless, eta_micropascal_second, 
                lambda_milliwatt_per_meter_kelvin);
        }
}

fn assert_ph_flash(
    p_bar: f64,
    t_deg_c: f64,
    v_m3_per_kg: f64,
    h_kj_per_kg: f64,
    s_kj_per_kg_k: f64,
    cp_kj_per_kg_k: f64,
    w_m_per_s: f64,
    kappa_dimensionless: f64,
    eta_micropascal_second: f64,
    lambda_milliwatt_per_meter_kelvin: f64,
){
    let p = Pressure::new::<bar>(p_bar);
    let h = AvailableEnergy::new::<kilojoule_per_kilogram>(h_kj_per_kg);

    // assert temp first to within 0.035 mk 
    let temp_tol_millikelvin = 35.0;

    let t_test = t_ph_eqm(p, h);

    approx::assert_abs_diff_eq!(
        t_deg_c,
        t_test.get::<degree_celsius>(),
        epsilon=temp_tol_millikelvin*1e-3
        );

    // assert volume to within 0.01%  (that's the tolerable error for 
    // backward eqn)
    let v_test = v_ph_eqm(p, h);
    approx::assert_relative_eq!(
        v_m3_per_kg,
        v_test.get::<cubic_meter_per_kilogram>(),
        max_relative=5e-4
        );

    // now entropy 
    let s_test = s_ph_eqm(p, h);
    approx::assert_relative_eq!(
        s_kj_per_kg_k,
        s_test.get::<kilojoule_per_kilogram_kelvin>(),
        max_relative=7e-3
        );

    // cp 
    let cp_test = cp_ph_eqm(p, h);
    approx::assert_relative_eq!(
        cp_kj_per_kg_k,
        cp_test.get::<kilojoule_per_kilogram_kelvin>(),
        max_relative=1e-3
        );
    // w 
    let w_test = w_ph_eqm(p, h);
    approx::assert_relative_eq!(
        w_m_per_s,
        w_test.get::<meter_per_second>(),
        max_relative=1e-3
        );

    // kappa
    let kappa_test = kappa_ph_eqm(p, h);
    approx::assert_relative_eq!(
        kappa_dimensionless,
        kappa_test.get::<ratio>(),
        max_relative=6e-3
        );

    // eta and lambda tbd



}



