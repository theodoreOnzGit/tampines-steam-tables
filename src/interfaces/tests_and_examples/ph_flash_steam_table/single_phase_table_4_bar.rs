use uom::si::thermal_conductivity::milliwatt_per_meter_kelvin;
use uom::si::{available_energy::kilojoule_per_kilogram, dynamic_viscosity::micropascal_second};
use uom::si::pressure::bar;
use uom::si::f64::*;
use uom::si::ratio::ratio;
use uom::si::specific_heat_capacity::kilojoule_per_kilogram_kelvin;
use uom::si::specific_volume::cubic_meter_per_kilogram;
use uom::si::thermodynamic_temperature::degree_celsius;
use uom::si::velocity::meter_per_second;

use crate::dynamic_viscosity::mu_ph_eqm;
use crate::interfaces::functional_programming::ph_flash_eqm::{cp_ph_eqm, kappa_ph_eqm, lambda_ph_eqm, s_ph_eqm, t_ph_eqm, v_ph_eqm, w_ph_eqm};

/// single phase table (see page 201)
///
/// NOTE: ph flash UNABLE to do triple point liquid and vapour accurately.
/// or even close to 0 degc
#[test]
pub fn single_phase_table_2_to_800_degc(){

    let steam_table: Vec<[f64; 10]> =
        vec![
        //[4.0,0.0,0.001,0.36519,-0.0001277,4.2179,1402.9,4920.4,1791.1,555.88],
        [4.0,2.0,0.000999906,8.79442,0.030619,4.2115,1412.7,4989.8,1673.0,560.88],
        [4.0,4.0,0.000999877,17.2118,0.061101,4.2061,1422.1,5056.6,1566.8,565.68],
        [4.0,6.0,0.000999911,25.6192,0.091327,4.2015,1431.1,5120.8,1471.1,570.28],
        [4.0,8.0,0.00100001,34.0182,0.12131,4.1976,1439.8,5182.3,1384.4,574.71],
        [4.0,10.0,0.00100016,42.41,0.15105,4.1943,1448.0,5241.1,1305.6,578.97],
        [4.0,12.0,0.00100036,50.7957,0.18056,4.1915,1455.9,5297.3,1233.8,583.08],
        [4.0,14.0,0.00100061,59.1763,0.20985,4.1891,1463.4,5350.8,1168.2,587.05],
        [4.0,16.0,0.00100092,67.5525,0.23892,4.1871,1470.6,5401.7,1107.9,590.89],
        [4.0,18.0,0.00100127,75.9249,0.26777,4.1854,1477.4,5450.0,1052.6,594.6],
        [4.0,20.0,0.00100166,84.2941,0.29642,4.1839,1483.9,5495.7,1001.5,598.19],
        [4.0,25.0,0.00100283,105.206,0.36715,4.181,1498.6,5599.0,889.98,606.69],
        [4.0,30.0,0.00100423,126.106,0.43667,4.1792,1511.5,5687.2,797.22,614.56],
        [4.0,35.0,0.00100586,146.999,0.50503,4.1782,1522.5,5761.0,719.15,621.87],
        [4.0,40.0,0.0010077,167.889,0.57228,4.1778,1531.8,5821.1,652.77,628.65],
        [4.0,45.0,0.00100974,188.778,0.63846,4.1781,1539.5,5868.3,595.82,634.95],
        [4.0,50.0,0.00101196,209.671,0.70361,4.1789,1545.8,5903.3,546.58,640.79],
        [4.0,55.0,0.00101437,230.568,0.76779,4.1802,1550.7,5926.8,503.7,646.19],
        [4.0,60.0,0.00101694,251.474,0.83101,4.1821,1554.4,5939.6,466.11,651.17],
        [4.0,65.0,0.00101968,272.39,0.89333,4.1845,1556.8,5942.2,432.99,655.75],
        [4.0,70.0,0.00102259,293.32,0.95477,4.1874,1558.1,5935.3,403.63,659.93],
        [4.0,75.0,0.00102565,314.265,1.0154,4.1909,1558.4,5919.4,377.5,663.74],
        [4.0,80.0,0.00102887,335.229,1.0752,4.1949,1557.6,5895.2,354.14,667.17],
        [4.0,85.0,0.00103225,356.215,1.1342,4.1993,1555.9,5863.2,333.16,670.24],
        [4.0,90.0,0.00103578,377.224,1.1924,4.2044,1553.4,5823.9,314.26,672.96],
        [4.0,95.0,0.00103947,398.259,1.2499,4.2099,1549.9,5777.7,297.17,675.34],
        [4.0,100.0,0.0010433,419.323,1.3068,4.216,1545.7,5725.1,281.67,677.39],
        [4.0,110.0,0.00105144,461.55,1.4185,4.2297,1535.0,5602.3,254.68,680.5],
        [4.0,120.0,0.00106021,503.926,1.5276,4.2459,1521.5,5458.4,232.09,682.36],
        [4.0,130.0,0.00106963,546.476,1.6345,4.2645,1505.3,5296.2,212.97,683.03],
        [4.0,140.0,0.00107974,589.225,1.7392,4.2859,1486.7,5117.8,196.65,682.55],
        [4.0,143.6,0.00108356,604.723,1.7766,4.2944,1479.4,5049.8,191.34,682.1],
        [4.0,143.6,0.462392,2738.06,6.8954,2.3403,491.09,1.3039,13.742,29.477],
        [4.0,150.0,0.470887,2752.78,6.9305,2.2749,495.98,1.306,14.009,30.006],
        [4.0,160.0,0.483935,2775.19,6.9828,2.2121,503.07,1.3074,14.426,30.845],
        [4.0,170.0,0.496761,2797.09,7.0328,2.1708,509.78,1.3078,14.844,31.697],
        [4.0,180.0,0.509418,2818.64,7.0809,2.1403,516.24,1.3079,15.261,32.563],
        [4.0,190.0,0.521938,2839.92,7.1274,2.1167,522.51,1.3077,15.678,33.442],
        [4.0,200.0,0.534345,2860.99,7.1724,2.0984,528.61,1.3073,16.096,34.336],
        [4.0,210.0,0.546656,2881.9,7.2161,2.0841,534.56,1.3068,16.513,35.245],
        [4.0,220.0,0.558886,2902.69,7.2587,2.0732,540.38,1.3062,16.931,36.168],
        [4.0,230.0,0.571047,2923.37,7.3002,2.0649,546.08,1.3055,17.349,37.105],
        [4.0,240.0,0.583149,2943.99,7.3408,2.0588,551.68,1.3048,17.767,38.056],
        [4.0,250.0,0.595199,2964.56,7.3805,2.0546,557.17,1.3039,18.185,39.021],
        [4.0,260.0,0.607205,2985.09,7.4194,2.0519,562.57,1.303,18.603,40.0],
        [4.0,270.0,0.619173,3005.6,7.4575,2.0504,567.88,1.3021,19.022,40.993],
        [4.0,280.0,0.631106,3026.1,7.4949,2.05,573.11,1.3011,19.44,41.998],
        [4.0,290.0,0.643008,3046.6,7.5316,2.0505,578.26,1.3001,19.858,43.016],
        [4.0,300.0,0.654884,3067.11,7.5677,2.0518,583.34,1.299,20.277,44.047],
        [4.0,310.0,0.666736,3087.64,7.6032,2.0537,588.36,1.298,20.695,45.09],
        [4.0,320.0,0.678566,3108.19,7.6381,2.0561,593.31,1.2969,21.113,46.145],
        [4.0,330.0,0.690376,3128.76,7.6725,2.0591,598.19,1.2958,21.53,47.211],
        [4.0,340.0,0.70217,3149.37,7.7064,2.0624,603.02,1.2947,21.948,48.288],
        [4.0,350.0,0.713947,3170.01,7.7398,2.0661,607.8,1.2936,22.365,49.376],
        [4.0,360.0,0.725709,3190.69,7.7728,2.0702,612.52,1.2924,22.782,50.475],
        [4.0,370.0,0.737458,3211.42,7.8052,2.0745,617.18,1.2913,23.199,51.584],
        [4.0,380.0,0.749196,3232.18,7.8373,2.079,621.8,1.2902,23.615,52.703],
        [4.0,390.0,0.760921,3253.0,7.8689,2.0838,626.37,1.289,24.031,53.832],
        [4.0,400.0,0.772637,3273.86,7.9001,2.0887,630.9,1.2879,24.446,54.971],
        [4.0,410.0,0.784343,3294.77,7.931,2.0938,635.38,1.2868,24.861,56.118],
        [4.0,420.0,0.79604,3315.74,7.9614,2.0991,639.81,1.2856,25.275,57.275],
        [4.0,430.0,0.807729,3336.76,7.9915,2.1046,644.2,1.2845,25.689,58.44],
        [4.0,440.0,0.81941,3357.83,8.0213,2.1101,648.56,1.2833,26.103,59.614],
        [4.0,450.0,0.831084,3378.96,8.0507,2.1158,652.87,1.2822,26.515,60.796],
        [4.0,460.0,0.842751,3400.15,8.0798,2.1216,657.14,1.281,26.927,61.986],
        [4.0,470.0,0.854413,3421.39,8.1086,2.1275,661.38,1.2799,27.339,63.184],
        [4.0,480.0,0.866068,3442.69,8.1371,2.1334,665.58,1.2788,27.75,64.389],
        [4.0,490.0,0.877718,3464.06,8.1652,2.1395,669.75,1.2776,28.16,65.602],
        [4.0,500.0,0.889363,3485.49,8.1931,2.1456,673.88,1.2765,28.569,66.823],
        [4.0,510.0,0.901003,3506.97,8.2207,2.1519,677.98,1.2754,28.978,68.05],
        [4.0,520.0,0.912638,3528.52,8.2481,2.1581,682.04,1.2743,29.386,69.284],
        [4.0,530.0,0.924269,3550.14,8.2752,2.1645,686.07,1.2732,29.793,70.525],
        [4.0,540.0,0.935896,3571.81,8.302,2.1709,690.07,1.272,30.199,71.772],
        [4.0,550.0,0.94752,3593.55,8.3286,2.1773,694.04,1.2709,30.604,73.026],
        [4.0,560.0,0.959139,3615.36,8.3549,2.1838,697.99,1.2698,31.009,74.286],
        [4.0,570.0,0.970756,3637.23,8.381,2.1904,701.9,1.2688,31.413,75.552],
        [4.0,580.0,0.982369,3659.17,8.4069,2.1969,705.78,1.2677,31.816,76.824],
        [4.0,590.0,0.993979,3681.17,8.4325,2.2036,709.64,1.2666,32.218,78.101],
        [4.0,600.0,1.00559,3703.24,8.4579,2.2102,713.47,1.2655,32.619,79.384],
        [4.0,650.0,1.06359,3814.59,8.5819,2.2439,732.23,1.2603,34.612,85.88],
        [4.0,700.0,1.12153,3927.63,8.7012,2.2779,750.4,1.2552,36.581,92.497],
        [4.0,750.0,1.17944,4042.38,8.8161,2.3122,768.04,1.2504,38.526,99.221],
        [4.0,800.0,1.23731,4158.85,8.9273,2.3466,785.19,1.2457,40.446,106.04],



        ];

        for dataset in steam_table {
            let p_bar = dataset[0];
            let t_deg_c = dataset[1];
            let v_m3_per_kg = dataset[2];
            let h_kj_per_kg = dataset[3];
            let s_kj_per_kg_k = dataset[4];
            let cp_kj_per_kg_k = dataset[5];
            let w_m_per_s = dataset[6];
            let kappa_dimensionless = dataset[7];
            let eta_micropascal_second = dataset[8];
            let lambda_milliwatt_per_meter_kelvin = dataset[9];
            assert_ph_flash(p_bar, t_deg_c, v_m3_per_kg, h_kj_per_kg, 
                s_kj_per_kg_k, cp_kj_per_kg_k, w_m_per_s, 
                kappa_dimensionless, eta_micropascal_second, 
                lambda_milliwatt_per_meter_kelvin);
        }
}

fn assert_ph_flash(
    p_bar: f64,
    t_deg_c: f64,
    v_m3_per_kg: f64,
    h_kj_per_kg: f64,
    s_kj_per_kg_k: f64,
    cp_kj_per_kg_k: f64,
    w_m_per_s: f64,
    kappa_dimensionless: f64,
    eta_micropascal_second: f64,
    lambda_milliwatt_per_meter_kelvin: f64,
){
    let p = Pressure::new::<bar>(p_bar);
    let h = AvailableEnergy::new::<kilojoule_per_kilogram>(h_kj_per_kg);

    // assert temp first to within 0.035 mk 
    let temp_tol_millikelvin = 35.0;

    let t_test = t_ph_eqm(p, h);

    approx::assert_abs_diff_eq!(
        t_deg_c,
        t_test.get::<degree_celsius>(),
        epsilon=temp_tol_millikelvin*1e-3
        );

    // assert volume to within 0.01%  (that's the tolerable error for 
    // backward eqn)
    let v_test = v_ph_eqm(p, h);
    approx::assert_relative_eq!(
        v_m3_per_kg,
        v_test.get::<cubic_meter_per_kilogram>(),
        max_relative=1e-4
        );

    // now entropy 
    let s_test = s_ph_eqm(p, h);
    approx::assert_relative_eq!(
        s_kj_per_kg_k,
        s_test.get::<kilojoule_per_kilogram_kelvin>(),
        max_relative=7e-3
        );

    // cp 
    let cp_test = cp_ph_eqm(p, h);
    approx::assert_relative_eq!(
        cp_kj_per_kg_k,
        cp_test.get::<kilojoule_per_kilogram_kelvin>(),
        max_relative=1e-4
        );
    // w 
    let w_test = w_ph_eqm(p, h);
    approx::assert_relative_eq!(
        w_m_per_s,
        w_test.get::<meter_per_second>(),
        max_relative=1e-4
        );

    // kappa
    let kappa_test = kappa_ph_eqm(p, h);
    approx::assert_relative_eq!(
        kappa_dimensionless,
        kappa_test.get::<ratio>(),
        max_relative=6e-3
        );

    // dynamic_viscosity
    //
    let eta_micropascal_second_test = mu_ph_eqm(p, h)
        .get::<micropascal_second>();
    approx::assert_relative_eq!(
        eta_micropascal_second,
        eta_micropascal_second_test,
        max_relative=2e-2
        );

    // thermal conductivity
    let lambda_test_milliwatt_per_meter_kelvin = 
        lambda_ph_eqm(p, h).get::<milliwatt_per_meter_kelvin>();
    approx::assert_relative_eq!(
        lambda_milliwatt_per_meter_kelvin,
        lambda_test_milliwatt_per_meter_kelvin,
        max_relative=1e-2
        );



}



