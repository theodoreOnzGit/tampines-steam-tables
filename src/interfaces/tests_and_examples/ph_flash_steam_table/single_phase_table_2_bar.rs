use uom::si::thermal_conductivity::milliwatt_per_meter_kelvin;
use uom::si::{available_energy::kilojoule_per_kilogram, dynamic_viscosity::micropascal_second};
use uom::si::pressure::bar;
use uom::si::f64::*;
use uom::si::ratio::ratio;
use uom::si::specific_heat_capacity::kilojoule_per_kilogram_kelvin;
use uom::si::specific_volume::cubic_meter_per_kilogram;
use uom::si::thermodynamic_temperature::degree_celsius;
use uom::si::velocity::meter_per_second;

use crate::dynamic_viscosity::mu_ph_eqm;
use crate::interfaces::functional_programming::ph_flash_eqm::{cp_ph_eqm, kappa_ph_eqm, lambda_ph_eqm, s_ph_eqm, t_ph_eqm, v_ph_eqm, w_ph_eqm};

/// single phase table (see page 201)
///
/// NOTE: ph flash UNABLE to do triple point liquid and vapour accurately.
/// or even close to 0 degc
#[test]
pub fn single_phase_table_2_to_800_degc_except_triple_pt(){

    let steam_table: Vec<[f64; 10]> =
        vec![

        //[2.0,0.0,0.00100011,0.16152,-0.0001411,4.2189,1402.6,9835.3,1791.5,555.73],
        [2.0,2.0,0.00100001,8.59268,0.030613,4.2124,1412.4,9974.1,1673.3,560.74],
        [2.0,4.0,0.00099998,17.0119,0.061101,4.2069,1421.8,10108.0,1567.1,565.54],
        [2.0,6.0,0.00100001,25.421,0.091333,4.2023,1430.8,10236.0,1471.3,570.14],
        [2.0,8.0,0.0010001,33.8216,0.12132,4.1984,1439.5,10359.0,1384.6,574.57],
        [2.0,10.0,0.00100025,42.215,0.15107,4.1951,1447.7,10477.0,1305.8,578.84],
        [2.0,12.0,0.00100045,50.6022,0.18058,4.1922,1455.6,10589.0,1234.0,582.95],
        [2.0,14.0,0.00100071,58.9842,0.20988,4.1898,1463.1,10696.0,1168.3,586.93],
        [2.0,16.0,0.00100101,67.3618,0.23895,4.1878,1470.3,10798.0,1108.0,590.76],
        [2.0,18.0,0.00100136,75.7355,0.26781,4.186,1477.1,10894.0,1052.6,594.48],
        [2.0,20.0,0.00100175,84.1059,0.29646,4.1845,1483.6,10986.0,1001.6,598.07],
        [2.0,25.0,0.00100292,105.021,0.36721,4.1816,1498.3,11192.0,890.01,606.57],
        [2.0,30.0,0.00100432,125.924,0.43673,4.1798,1511.1,11369.0,797.22,614.45],
        [2.0,35.0,0.00100595,146.82,0.5051,4.1787,1522.1,11516.0,719.13,621.76],
        [2.0,40.0,0.00100779,167.712,0.57235,4.1783,1531.5,11636.0,652.74,628.55],
        [2.0,45.0,0.00100983,188.604,0.63854,4.1785,1539.2,11730.0,595.79,634.85],
        [2.0,50.0,0.00101205,209.498,0.70371,4.1793,1545.5,11800.0,546.54,640.69],
        [2.0,55.0,0.00101446,230.398,0.76789,4.1807,1550.4,11847.0,503.65,646.09],
        [2.0,60.0,0.00101703,251.306,0.83112,4.1825,1554.0,11873.0,466.07,651.07],
        [2.0,65.0,0.00101977,272.224,0.89344,4.1849,1556.5,11878.0,432.94,655.64],
        [2.0,70.0,0.00102268,293.156,0.95489,4.1879,1557.8,11864.0,403.58,659.83],
        [2.0,75.0,0.00102575,314.104,1.0155,4.1913,1558.0,11832.0,377.45,663.63],
        [2.0,80.0,0.00102897,335.07,1.0753,4.1953,1557.2,11784.0,354.08,667.06],
        [2.0,85.0,0.00103235,356.058,1.1343,4.1998,1555.6,11720.0,333.11,670.13],
        [2.0,90.0,0.00103588,377.069,1.1926,4.2048,1553.0,11641.0,314.21,672.85],
        [2.0,95.0,0.00103957,398.107,1.2501,4.2103,1549.5,11548.0,297.12,675.23],
        [2.0,100.0,0.00104341,419.173,1.3069,4.2164,1545.3,11443.0,281.61,677.27],
        [2.0,110.0,0.00105155,461.405,1.4186,4.2302,1534.6,11197.0,254.63,680.38],
        [2.0,120.0,0.00106033,503.786,1.5278,4.2464,1521.0,10909.0,232.03,682.24],
        [2.0,120.212,0.00106052,504.684,1.5301,4.2467,1520.7,10903.0,231.6,682.27],
        [2.0,120.212,0.885735,2706.24,7.1269,2.1752,481.88,1.3108,12.934,26.675],
        [2.0,130.0,0.910412,2727.25,7.1796,2.1232,488.81,1.3122,13.326,27.5],
        [2.0,140.0,0.935281,2748.31,7.2312,2.0902,495.51,1.3126,13.728,28.354],
        [2.0,150.0,0.959894,2769.09,7.2809,2.0667,501.97,1.3125,14.132,29.218],
        [2.0,160.0,0.984303,2789.66,7.329,2.0492,508.26,1.3122,14.537,30.095],
        [2.0,170.0,1.00854,2810.09,7.3756,2.0359,514.39,1.3118,14.943,30.984],
        [2.0,180.0,1.03265,2830.39,7.4209,2.0261,520.39,1.3112,15.35,31.887],
        [2.0,190.0,1.05663,2850.62,7.465,2.0189,526.26,1.3105,15.759,32.802],
        [2.0,200.0,1.08052,2870.78,7.5081,2.0139,532.02,1.3098,16.168,33.73],
        [2.0,210.0,1.10432,2890.9,7.5502,2.0106,537.68,1.3089,16.578,34.672],
        [2.0,220.0,1.12805,2911.0,7.5914,2.0089,543.23,1.308,16.99,35.626],
        [2.0,230.0,1.15172,2931.08,7.6317,2.0083,548.7,1.3071,17.402,36.593],
        [2.0,240.0,1.17534,2951.17,7.6712,2.0087,554.09,1.3061,17.814,37.572],
        [2.0,250.0,1.19891,2971.26,7.71,2.01,559.4,1.305,18.228,38.564],
        [2.0,260.0,1.22244,2991.37,7.7481,2.012,564.63,1.304,18.642,39.568],
        [2.0,270.0,1.24593,3011.5,7.7855,2.0145,569.8,1.3029,19.056,40.584],
        [2.0,280.0,1.26939,3031.66,7.8223,2.0176,574.89,1.3018,19.471,41.612],
        [2.0,290.0,1.29282,3051.85,7.8584,2.0211,579.93,1.3007,19.885,42.651],
        [2.0,300.0,1.31623,3072.08,7.894,2.025,584.9,1.2996,20.301,43.701],
        [2.0,310.0,1.33962,3092.35,7.9291,2.0291,589.81,1.2984,20.716,44.761],
        [2.0,320.0,1.36298,3112.67,7.9636,2.0336,594.67,1.2973,21.131,45.833],
        [2.0,330.0,1.38632,3133.03,7.9977,2.0383,599.48,1.2961,21.547,46.915],
        [2.0,340.0,1.40965,3153.43,8.0312,2.0432,604.23,1.295,21.962,48.007],
        [2.0,350.0,1.43296,3173.89,8.0643,2.0483,608.93,1.2938,22.377,49.108],
        [2.0,360.0,1.45626,3194.4,8.097,2.0535,613.59,1.2927,22.793,50.219],
        [2.0,370.0,1.47955,3214.96,8.1292,2.059,618.2,1.2915,23.208,51.34],
        [2.0,380.0,1.50282,3235.58,8.161,2.0645,622.76,1.2903,23.622,52.47],
        [2.0,390.0,1.52608,3256.25,8.1924,2.0702,627.28,1.2892,24.037,53.609],
        [2.0,400.0,1.54934,3276.98,8.2235,2.076,631.75,1.288,24.451,54.756],
        [2.0,410.0,1.57258,3297.77,8.2541,2.0818,636.19,1.2868,24.865,55.912],
        [2.0,420.0,1.59581,3318.62,8.2844,2.0878,640.58,1.2857,25.278,57.076],
        [2.0,430.0,1.61904,3339.53,8.3144,2.0939,644.93,1.2845,25.691,58.248],
        [2.0,440.0,1.64226,3360.5,8.344,2.1,649.25,1.2834,26.103,59.428],
        [2.0,450.0,1.66547,3381.53,8.3733,2.1062,653.53,1.2822,26.515,60.616],
        [2.0,460.0,1.68868,3402.62,8.4022,2.1125,657.77,1.2811,26.926,61.812],
        [2.0,470.0,1.71187,3423.78,8.4309,2.1189,661.97,1.2799,27.337,63.014],
        [2.0,480.0,1.73507,3445.0,8.4593,2.1253,666.14,1.2788,27.747,64.224],
        [2.0,490.0,1.75825,3466.29,8.4873,2.1317,670.28,1.2776,28.157,65.441],
        [2.0,500.0,1.78144,3487.64,8.5151,2.1382,674.39,1.2765,28.565,66.665],
        [2.0,510.0,1.80462,3509.05,8.5426,2.1448,678.46,1.2754,28.973,67.895],
        [2.0,520.0,1.82779,3530.53,8.5699,2.1514,682.5,1.2742,29.381,69.132],
        [2.0,530.0,1.85096,3552.08,8.5969,2.158,686.51,1.2731,29.787,70.375],
        [2.0,540.0,1.87412,3573.69,8.6236,2.1647,690.49,1.272,30.193,71.624],
        [2.0,550.0,1.89728,3595.37,8.6501,2.1715,694.44,1.2709,30.599,72.88],
        [2.0,560.0,1.92044,3617.12,8.6764,2.1782,698.36,1.2698,31.003,74.141],
        [2.0,570.0,1.9436,3638.94,8.7024,2.185,702.26,1.2687,31.406,75.408],
        [2.0,580.0,1.96675,3660.82,8.7282,2.1918,706.12,1.2676,31.809,76.681],
        [2.0,590.0,1.9899,3682.77,8.7538,2.1986,709.96,1.2665,32.211,77.96],
        [2.0,600.0,2.01304,3704.79,8.7792,2.2055,713.78,1.2654,32.612,79.244],
        [2.0,650.0,2.12873,3815.93,8.9029,2.24,732.47,1.2602,34.604,85.74],
        [2.0,700.0,2.24437,3928.8,9.022,2.2748,750.59,1.2551,36.572,92.354],
        [2.0,750.0,2.35996,4043.41,9.1368,2.3096,768.18,1.2502,38.517,99.073],
        [2.0,800.0,2.47553,4159.76,9.2479,2.3445,785.29,1.2455,40.437,105.89],


        ];

        for dataset in steam_table {
            let p_bar = dataset[0];
            let t_deg_c = dataset[1];
            let v_m3_per_kg = dataset[2];
            let h_kj_per_kg = dataset[3];
            let s_kj_per_kg_k = dataset[4];
            let cp_kj_per_kg_k = dataset[5];
            let w_m_per_s = dataset[6];
            let kappa_dimensionless = dataset[7];
            let eta_micropascal_second = dataset[8];
            let lambda_milliwatt_per_meter_kelvin = dataset[9];
            assert_ph_flash(p_bar, t_deg_c, v_m3_per_kg, h_kj_per_kg, 
                s_kj_per_kg_k, cp_kj_per_kg_k, w_m_per_s, 
                kappa_dimensionless, eta_micropascal_second, 
                lambda_milliwatt_per_meter_kelvin);
        }
}

fn assert_ph_flash(
    p_bar: f64,
    t_deg_c: f64,
    v_m3_per_kg: f64,
    h_kj_per_kg: f64,
    s_kj_per_kg_k: f64,
    cp_kj_per_kg_k: f64,
    w_m_per_s: f64,
    kappa_dimensionless: f64,
    eta_micropascal_second: f64,
    lambda_milliwatt_per_meter_kelvin: f64,
){
    let p = Pressure::new::<bar>(p_bar);
    let h = AvailableEnergy::new::<kilojoule_per_kilogram>(h_kj_per_kg);

    // assert temp first to within 0.025 mk 
    let temp_tol_millikelvin = 25.0;

    let t_test = t_ph_eqm(p, h);

    approx::assert_abs_diff_eq!(
        t_deg_c,
        t_test.get::<degree_celsius>(),
        epsilon=temp_tol_millikelvin*1e-3
        );

    // assert volume to within 0.01%  (that's the tolerable error for 
    // backward eqn)
    let v_test = v_ph_eqm(p, h);
    approx::assert_relative_eq!(
        v_m3_per_kg,
        v_test.get::<cubic_meter_per_kilogram>(),
        max_relative=1e-4
        );

    // now entropy 
    let s_test = s_ph_eqm(p, h);
    approx::assert_relative_eq!(
        s_kj_per_kg_k,
        s_test.get::<kilojoule_per_kilogram_kelvin>(),
        max_relative=7e-3
        );

    // cp 
    let cp_test = cp_ph_eqm(p, h);
    approx::assert_relative_eq!(
        cp_kj_per_kg_k,
        cp_test.get::<kilojoule_per_kilogram_kelvin>(),
        max_relative=1e-4
        );
    // w 
    let w_test = w_ph_eqm(p, h);
    approx::assert_relative_eq!(
        w_m_per_s,
        w_test.get::<meter_per_second>(),
        max_relative=1e-4
        );

    // kappa
    let kappa_test = kappa_ph_eqm(p, h);
    approx::assert_relative_eq!(
        kappa_dimensionless,
        kappa_test.get::<ratio>(),
        max_relative=6e-3
        );

    // dynamic_viscosity
    //
    let eta_micropascal_second_test = mu_ph_eqm(p, h)
        .get::<micropascal_second>();
    approx::assert_relative_eq!(
        eta_micropascal_second,
        eta_micropascal_second_test,
        max_relative=2e-2
        );

    // thermal conductivity
    let lambda_test_milliwatt_per_meter_kelvin = 
        lambda_ph_eqm(p, h).get::<milliwatt_per_meter_kelvin>();
    approx::assert_relative_eq!(
        lambda_milliwatt_per_meter_kelvin,
        lambda_test_milliwatt_per_meter_kelvin,
        max_relative=1e-2
        );



}



