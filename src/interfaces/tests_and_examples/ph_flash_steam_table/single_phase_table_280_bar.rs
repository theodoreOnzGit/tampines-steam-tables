use uom::si::thermal_conductivity::milliwatt_per_meter_kelvin;
use uom::si::{available_energy::kilojoule_per_kilogram, dynamic_viscosity::micropascal_second};
use uom::si::pressure::bar;
use uom::si::f64::*;
use uom::si::ratio::ratio;
use uom::si::specific_heat_capacity::kilojoule_per_kilogram_kelvin;
use uom::si::specific_volume::cubic_meter_per_kilogram;
use uom::si::thermodynamic_temperature::degree_celsius;
use uom::si::velocity::meter_per_second;

use crate::dynamic_viscosity::mu_ph_eqm;
use crate::interfaces::functional_programming::ph_flash_eqm::{cp_ph_eqm, kappa_ph_eqm, lambda_ph_eqm, s_ph_eqm, t_ph_eqm, v_ph_eqm, w_ph_eqm};

/// single phase table (see page 201)
///
/// NOTE: ph flash UNABLE to do triple point liquid and vapour accurately.
/// or even close to 0 degc
#[test]
pub fn single_phase_table_2_to_750_degc(){

    let steam_table: Vec<[f64; 10]> =
        vec![
        //[280.000,0.000,0.000986591,27.9053,0.0003407,4.0974,1447.90000,75.89100,1737.20000,575.60000],
        [280.000,2.000,0.000986677,36.1007,0.030234,4.098,1457.70000,76.91500,1628.00000,579.97000],
        [280.000,4.000,0.000986815,44.2973,0.059917,4.0987,1467.10000,77.89600,1529.30000,584.18000],
        [280.000,6.000,0.000987002,52.4957,0.089391,4.0996,1476.10000,78.83700,1439.90000,588.26000],
        [280.000,8.000,0.000987236,60.696,0.11866,4.1006,1484.60000,79.73600,1358.50000,592.21000],
        [280.000,10.000,0.000987514,68.8983,0.14773,4.1017,1492.80000,80.59500,1284.30000,596.04000],
        [280.000,12.000,0.000987834,77.1026,0.17661,4.1027,1500.60000,81.41500,1216.40000,599.76000],
        [280.000,14.000,0.000988193,85.3091,0.20529,4.1037,1508.10000,82.19600,1154.00000,603.38000],
        [280.000,16.000,0.000988591,93.5176,0.23377,4.1048,1515.20000,82.93800,1096.70000,606.90000],
        [280.000,18.000,0.000989026,101.728,0.26207,4.1058,1521.90000,83.64400,1043.80000,610.33000],
        [280.000,20.000,0.000989496,109.941,0.29018,4.1068,1528.40000,84.31300,994.82000,613.67000],
        [280.000,25.000,0.000990818,130.48,0.35966,4.1091,1543.10000,85.83100,887.44000,621.65000],
        [280.000,30.000,0.000992338,151.032,0.42801,4.1113,1556.00000,87.13800,797.60000,629.13000],
        [280.000,35.000,0.000994041,171.594,0.49529,4.1135,1567.20000,88.24600,721.61000,636.16000],
        [280.000,40.000,0.000995918,192.166,0.56151,4.1156,1576.80000,89.16500,656.72000,642.76000],
        [280.000,45.000,0.00099796,212.749,0.62672,4.1178,1585.00000,89.90600,600.85000,648.95000],
        [280.000,50.000,0.00100016,233.344,0.69095,4.1201,1591.80000,90.47900,552.37000,654.74000],
        [280.000,55.000,0.00100251,253.951,0.75423,4.1226,1597.30000,90.89400,510.04000,660.14000],
        [280.000,60.000,0.00100501,274.57,0.81659,4.1253,1601.60000,91.15900,472.85000,665.16000],
        [280.000,65.000,0.00100765,295.204,0.87807,4.1283,1604.80000,91.28300,439.99000,669.82000],
        [280.000,70.000,0.00101043,315.853,0.93869,4.1315,1607.00000,91.27400,410.82000,674.12000],
        [280.000,75.000,0.00101334,336.52,0.99848,4.135,1608.10000,91.14000,384.81000,678.06000],
        [280.000,80.000,0.00101639,357.204,1.0575,4.1388,1608.30000,90.88900,361.51000,681.66000],
        [280.000,85.000,0.00101958,377.909,1.1157,4.143,1607.60000,90.52800,340.57000,684.91000],
        [280.000,90.000,0.00102289,398.634,1.1732,4.1474,1606.10000,90.06400,321.67000,687.84000],
        [280.000,95.000,0.00102634,419.383,1.2299,4.1522,1603.80000,89.50400,304.56000,690.43000],
        [280.000,100.000,0.00102992,440.157,1.2859,4.1573,1600.70000,88.85300,289.03000,692.71000],
        [280.000,110.000,0.00103747,481.785,1.396,4.1686,1592.50000,87.30400,261.96000,696.33000],
        [280.000,120.000,0.00104555,523.534,1.5036,4.1814,1581.70000,85.46000,239.26000,698.74000],
        [280.000,130.000,0.00105418,565.42,1.6088,4.1959,1568.60000,83.35900,220.04000,700.01000],
        [280.000,140.000,0.00106337,607.458,1.7118,4.2121,1553.30000,81.03400,203.61000,700.17000],
        [280.000,150.000,0.00107314,649.668,1.8128,4.2304,1536.00000,78.51300,189.46000,699.27000],
        [280.000,160.000,0.00108353,692.073,1.9118,4.2509,1516.70000,75.82100,177.17000,697.36000],
        [280.000,170.000,0.00109457,734.696,2.0091,4.2741,1495.60000,72.98100,166.42000,694.47000],
        [280.000,180.000,0.00110631,777.564,2.1047,4.3002,1472.60000,70.01100,156.94000,691.06000],
        [280.000,190.000,0.00111879,820.71,2.1989,4.3297,1448.00000,66.92900,148.53000,686.62000],
        [280.000,200.000,0.00113209,864.17,2.2918,4.363,1421.60000,63.75100,141.02000,681.26000],
        [280.000,210.000,0.00114628,907.986,2.3834,4.4008,1393.40000,60.49200,134.26000,675.04000],
        [280.000,220.000,0.00116144,952.204,2.474,4.4437,1363.50000,57.16700,128.14000,667.98000],
        [280.000,230.000,0.0011777,996.88,2.5637,4.4925,1331.80000,53.79000,122.55000,660.10000],
        [280.000,240.000,0.00119516,1042.08,2.6526,4.5482,1298.40000,50.37600,117.42000,651.42000],
        [280.000,250.000,0.001214,1087.87,2.741,4.612,1263.20000,46.94100,112.67000,641.94000],
        [280.000,260.000,0.0012344,1134.35,2.829,4.6852,1226.10000,43.49800,108.24000,631.66000],
        [280.000,270.000,0.00125661,1181.61,2.9168,4.7699,1187.30000,40.06100,104.06000,620.57000],
        [280.000,280.000,0.00128092,1229.79,3.0047,4.8684,1146.40000,36.64400,100.11000,608.65000],
        [280.000,290.000,0.00130771,1279.04,3.0929,4.9842,1103.50000,33.25500,96.31800,595.88000],
        [280.000,300.000,0.0013375,1329.55,3.1818,5.1219,1058.20000,29.90200,92.65200,582.21000],
        [280.000,310.000,0.00137097,1381.57,3.2718,5.2887,1010.30000,26.59200,89.06500,567.58000],
        [280.000,320.000,0.00140908,1435.45,3.3634,5.4951,959.59000,23.33900,85.51000,551.88000],
        [280.000,330.000,0.00145324,1491.66,3.4574,5.7582,905.78000,20.16300,81.93400,534.95000],
        [280.000,340.000,0.00150559,1550.9,3.5548,6.1067,848.38000,17.07300,78.26900,516.55000],
        [280.000,350.000,0.00156965,1614.25,3.6573,6.5932,785.84000,14.05100,74.42400,496.33000],
        [280.000,360.000,0.00165196,1683.64,3.7677,7.3526,716.33000,11.09300,70.24700,473.68000],
        [280.000,370.000,0.00176645,1763.1,3.8922,8.6798,636.68000,8.19560,65.45300,447.49000],
        [280.000,380.000,0.00195213,1862.42,4.0454,11.672,541.56000,5.36580,59.35500,415.81000],
        [280.000,390.000,0.00239786,2022.34,4.2882,23.482,428.02000,2.72870,49.48800,378.18000],
        [280.000,400.000,0.00385452,2334.42,4.7552,27.31,409.44000,1.55330,35.66900,272.72000],
        [280.000,410.000,0.00507063,2529.06,5.0424,14.334,449.43000,1.42270,31.77400,189.73000],
        [280.000,420.000,0.00590405,2648.46,5.216,10.103,478.15000,1.38300,30.62300,156.26000],
        [280.000,430.000,0.00656344,2738.07,5.3444,8.0188,500.89000,1.36520,30.21700,138.67000],
        [280.000,440.000,0.00712296,2811.6,5.4483,6.7824,519.63000,1.35380,30.12200,128.05000],
        [280.000,450.000,0.00761715,2875.11,5.5367,5.97,535.67000,1.34540,30.19000,121.08000],
        [280.000,460.000,0.00806487,2931.77,5.6145,5.39,549.86000,1.33890,30.35100,116.25000],
        [280.000,470.000,0.00847736,2983.38,5.6845,4.9518,562.68000,1.33390,30.57200,112.80000],
        [280.000,480.000,0.00886205,3031.12,5.7483,4.6086,574.44000,1.32980,30.83400,110.31000],
        [280.000,490.000,0.00922415,3075.78,5.8072,4.333,585.34000,1.32660,31.12300,108.51000],
        [280.000,500.000,0.00956757,3117.94,5.8621,4.1079,595.51000,1.32380,31.43200,107.23000],
        [280.000,510.000,0.00989528,3158.06,5.9136,3.9213,605.06000,1.32130,31.75600,106.36000],
        [280.000,520.000,0.0102096,3196.47,5.9624,3.7649,614.09000,1.31910,32.09100,105.81000],
        [280.000,530.000,0.0105124,3233.44,6.0087,3.6324,622.65000,1.31710,32.43400,105.51000],
        [280.000,540.000,0.0108052,3269.18,6.0529,3.5191,630.80000,1.31520,32.78400,105.43000],
        [280.000,550.000,0.0110891,3303.87,6.0953,3.4214,638.60000,1.31340,33.13800,105.53000],
        [280.000,560.000,0.0113653,3337.65,6.1361,3.3366,646.07000,1.31160,33.49600,105.78000],
        [280.000,570.000,0.0116344,3370.64,6.1755,3.2624,653.25000,1.31000,33.85600,106.17000],
        [280.000,580.000,0.0118973,3402.93,6.2136,3.1971,660.17000,1.30830,34.21900,106.67000],
        [280.000,590.000,0.0121545,3434.61,6.2505,3.1393,666.86000,1.30670,34.58300,107.26000],
        [280.000,600.000,0.0124065,3465.74,6.2863,3.088,673.34000,1.30520,34.94800,107.95000],
        [280.000,650.000,0.0136035,3615.07,6.4527,2.9016,703.15000,1.29800,36.78300,112.39000],
        [280.000,700.000,0.0147212,3757.13,6.6026,2.79,729.71000,1.29180,38.61500,117.96000],
        [280.000,750.000,0.0157832,3894.78,6.7405,2.7216,753.95000,1.28630,40.43600,124.40000],
        //[280.000,800.000,0.0168046,4029.74,6.8693,2.6808,776.40000,1.28110,42.24100,131.33000],

        ];

        for dataset in steam_table {
            let p_bar = dataset[0];
            let t_deg_c = dataset[1];
            let v_m3_per_kg = dataset[2];
            let h_kj_per_kg = dataset[3];
            let s_kj_per_kg_k = dataset[4];
            let cp_kj_per_kg_k = dataset[5];
            let w_m_per_s = dataset[6];
            let kappa_dimensionless = dataset[7];
            let eta_micropascal_second = dataset[8];
            let lambda_milliwatt_per_meter_kelvin = dataset[9];
            assert_ph_flash(p_bar, t_deg_c, v_m3_per_kg, h_kj_per_kg, 
                s_kj_per_kg_k, cp_kj_per_kg_k, w_m_per_s, 
                kappa_dimensionless, eta_micropascal_second, 
                lambda_milliwatt_per_meter_kelvin);
        }
}

fn assert_ph_flash(
    p_bar: f64,
    t_deg_c: f64,
    v_m3_per_kg: f64,
    h_kj_per_kg: f64,
    s_kj_per_kg_k: f64,
    cp_kj_per_kg_k: f64,
    w_m_per_s: f64,
    kappa_dimensionless: f64,
    eta_micropascal_second: f64,
    lambda_milliwatt_per_meter_kelvin: f64,
){
    let p = Pressure::new::<bar>(p_bar);
    let h = AvailableEnergy::new::<kilojoule_per_kilogram>(h_kj_per_kg);

    // assert temp first to within 0.035 mk 
    let temp_tol_millikelvin = 35.0;

    let t_test = t_ph_eqm(p, h);

    approx::assert_abs_diff_eq!(
        t_deg_c,
        t_test.get::<degree_celsius>(),
        epsilon=temp_tol_millikelvin*1e-3
        );

    // assert volume to within 0.01%  (that's the tolerable error for 
    // backward eqn)
    let v_test = v_ph_eqm(p, h);
    approx::assert_relative_eq!(
        v_m3_per_kg,
        v_test.get::<cubic_meter_per_kilogram>(),
        max_relative=5e-4
        );

    // now entropy 
    let s_test = s_ph_eqm(p, h);
    approx::assert_relative_eq!(
        s_kj_per_kg_k,
        s_test.get::<kilojoule_per_kilogram_kelvin>(),
        max_relative=7e-3
        );

    // cp 
    let cp_test = cp_ph_eqm(p, h);
    approx::assert_relative_eq!(
        cp_kj_per_kg_k,
        cp_test.get::<kilojoule_per_kilogram_kelvin>(),
        max_relative=5e-3
        );
    // w 
    let w_test = w_ph_eqm(p, h);
    approx::assert_relative_eq!(
        w_m_per_s,
        w_test.get::<meter_per_second>(),
        max_relative=1e-3
        );

    // kappa
    let kappa_test = kappa_ph_eqm(p, h);
    approx::assert_relative_eq!(
        kappa_dimensionless,
        kappa_test.get::<ratio>(),
        max_relative=6e-3
        );

    // dynamic_viscosity
    //
    let eta_micropascal_second_test = mu_ph_eqm(p, h)
        .get::<micropascal_second>();
    approx::assert_relative_eq!(
        eta_micropascal_second,
        eta_micropascal_second_test,
        max_relative=2e-2
        );

    // thermal conductivity
    let lambda_test_milliwatt_per_meter_kelvin = 
        lambda_ph_eqm(p, h).get::<milliwatt_per_meter_kelvin>();
    approx::assert_relative_eq!(
        lambda_milliwatt_per_meter_kelvin,
        lambda_test_milliwatt_per_meter_kelvin,
        max_relative=1e-2
        );



}



