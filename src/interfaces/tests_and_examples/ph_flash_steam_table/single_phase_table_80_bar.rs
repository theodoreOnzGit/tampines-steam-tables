use uom::si::available_energy::kilojoule_per_kilogram;
use uom::si::pressure::bar;
use uom::si::f64::*;
use uom::si::ratio::ratio;
use uom::si::specific_heat_capacity::kilojoule_per_kilogram_kelvin;
use uom::si::specific_volume::cubic_meter_per_kilogram;
use uom::si::thermodynamic_temperature::degree_celsius;
use uom::si::velocity::meter_per_second;

use crate::interfaces::functional_programming::ph_flash_eqm::{cp_ph_eqm, kappa_ph_eqm, s_ph_eqm, t_ph_eqm, v_ph_eqm, w_ph_eqm};

/// single phase table (see page 201)
///
/// NOTE: ph flash UNABLE to do triple point liquid and vapour accurately.
/// or even close to 0 degc
#[test]
pub fn single_phase_table_2_to_750_degc(){

    let steam_table: Vec<[f64; 10]> =
        vec![
        //[80.000,0.000,0.000996188,8.05907,0.0002693,4.1814,1414.9000,251.2200,1774.7000,561.5600],
        [80.000,2.000,0.000996145,16.4176,0.030758,4.1772,1424.8000,254.7300,1659.3000,566.3700],
        [80.000,4.000,0.000996165,24.7683,0.060998,4.1737,1434.2000,258.1000,1555.4000,571.0000],
        [80.000,6.000,0.000996245,33.1127,0.090998,4.1708,1443.2000,261.3400,1461.5000,575.4400],
        [80.000,8.000,0.00099638,41.4519,0.12076,4.1685,1451.9000,264.4400,1376.5000,579.7300],
        [80.000,10.000,0.000996568,49.7868,0.15031,4.1665,1460.1000,267.4100,1299.1000,583.8600],
        [80.000,12.000,0.000996806,58.1182,0.17963,4.1649,1468.0000,270.2400,1228.4000,587.8500],
        [80.000,14.000,0.000997092,66.4467,0.20873,4.1636,1475.5000,272.9400,1163.7000,591.7200],
        [80.000,16.000,0.000997423,74.7728,0.23763,4.1625,1482.7000,275.5000,1104.4000,595.4600],
        [80.000,18.000,0.000997797,83.097,0.26632,4.1617,1489.5000,277.9400,1049.7000,599.0800],
        [80.000,20.000,0.000998213,91.4196,0.2948,4.1609,1496.0000,280.2400,999.3100,602.6000],
        [80.000,25.000,0.000999424,112.221,0.36516,4.1597,1510.7000,285.4600,889.0300,610.9400],
        [80.000,30.000,0.00100086,133.018,0.43434,4.1592,1523.6000,289.9200,797.1400,618.6900],
        [80.000,35.000,0.00100252,153.814,0.50238,4.1591,1534.7000,293.6700,719.6900,625.9100],
        [80.000,40.000,0.00100437,174.61,0.56932,4.1596,1544.1000,296.7400,653.7600,632.6400],
        [80.000,45.000,0.0010064,195.41,0.63522,4.1604,1552.0000,299.1700,597.1400,638.9000],
        [80.000,50.000,0.00100862,216.215,0.70011,4.1617,1558.5000,301.0000,548.1300,644.7200],
        [80.000,55.000,0.00101101,237.028,0.76402,4.1634,1563.6000,302.2600,505.4100,650.1100],
        [80.000,60.000,0.00101356,257.85,0.82699,4.1656,1567.4000,302.9900,467.9500,655.1000],
        [80.000,65.000,0.00101627,278.684,0.88906,4.1681,1570.1000,303.2100,434.9000,659.7000],
        [80.000,70.000,0.00101913,299.532,0.95027,4.1712,1571.6000,302.9600,405.6100,663.9100],
        [80.000,75.000,0.00102215,320.396,1.0106,4.1746,1572.2000,302.2600,379.5100,667.7500],
        [80.000,80.000,0.00102532,341.279,1.0702,4.1786,1571.7000,301.1500,356.1700,671.2300],
        [80.000,85.000,0.00102864,362.183,1.129,4.1829,1570.3000,299.6600,335.2100,674.3500],
        [80.000,90.000,0.00103211,383.109,1.187,4.1878,1568.1000,297.7900,316.3100,677.1300],
        [80.000,95.000,0.00103572,404.061,1.2443,4.1931,1565.0000,295.5900,299.2200,679.5600],
        [80.000,100.000,0.00103948,425.041,1.3009,4.1989,1561.1000,293.0700,283.7100,681.6700],
        [80.000,110.000,0.00104745,467.093,1.4121,4.2119,1551.2000,287.1500,256.7100,684.9300],
        [80.000,120.000,0.00105601,509.285,1.5208,4.2269,1538.5000,280.1900,234.0900,686.9500],
        [80.000,130.000,0.00106519,551.639,1.6272,4.2442,1523.4000,272.3200,214.9500,687.7800],
        [80.000,140.000,0.00107502,594.178,1.7314,4.264,1505.8000,263.6500,198.6000,687.4800],
        [80.000,150.000,0.00108552,636.929,1.8337,4.2866,1486.0000,254.2900,184.5200,686.1000],
        [80.000,160.000,0.00109674,679.921,1.9341,4.3123,1464.1000,244.3000,172.2900,683.6600],
        [80.000,170.000,0.00110874,723.187,2.0328,4.3417,1440.0000,233.7800,161.5800,680.6900],
        [80.000,180.000,0.00112157,766.768,2.1301,4.3752,1413.8000,222.7800,152.1300,676.5400],
        [80.000,190.000,0.00113533,810.708,2.226,4.4137,1385.6000,211.3700,143.7300,671.4100],
        [80.000,200.000,0.0011501,855.061,2.3207,4.4578,1355.2000,199.6100,136.2100,665.3500],
        [80.000,210.000,0.00116601,899.887,2.4145,4.5087,1322.7000,187.5500,129.4200,658.3600],
        [80.000,220.000,0.0011832,945.262,2.5074,4.5677,1288.0000,175.2500,123.2500,650.4700],
        [80.000,230.000,0.00120186,991.273,2.5998,4.6363,1251.0000,162.7700,117.5800,641.6700],
        [80.000,240.000,0.00122222,1038.03,2.6918,4.7169,1211.6000,150.1500,112.3300,631.9500],
        [80.000,250.000,0.00124457,1085.66,2.7837,4.8125,1169.8000,137.4300,107.4300,621.3000],
        [80.000,260.000,0.0012693,1134.34,2.8759,4.9272,1125.0000,124.6500,102.8000,609.6700],
        [80.000,270.000,0.00129694,1184.29,2.9687,5.0674,1077.0000,111.8000,98.3760,597.0100],
        [80.000,280.000,0.00132823,1235.81,3.0627,5.2431,1024.9000,98.8650,94.0900,583.2300],
        [80.000,290.000,0.00136429,1289.33,3.1586,5.4713,967.7200,85.8030,89.8660,568.1800],
        [80.000,295.009,0.00138466,1317.08,3.2077,5.614,936.7300,79.2120,87.7450,560.0900],
        [80.000,295.009,0.0235275,2758.61,5.7448,5.8831,484.0700,1.2450,19.3260,68.0520],
        [80.000,300.000,0.0242802,2786.38,5.7935,5.287,493.5600,1.2541,19.5960,66.7090],
        [80.000,310.000,0.0256318,2835.27,5.8781,4.5559,509.1100,1.2640,20.1250,65.0070],
        [80.000,320.000,0.0268425,2878.35,5.9514,4.0905,522.1600,1.2697,20.6400,64.0290],
        [80.000,330.000,0.0279551,2917.53,6.0169,3.762,533.6900,1.2736,21.1450,63.4890],
        [80.000,340.000,0.0289946,2953.87,6.0766,3.5176,544.1200,1.2764,21.6390,63.2470],
        [80.000,350.000,0.0299776,2988.06,6.1319,3.3288,553.7100,1.2785,22.1260,63.2230],
        [80.000,360.000,0.0309152,3020.57,6.1837,3.1789,562.6400,1.2800,22.6050,63.3700],
        [80.000,370.000,0.0318155,3051.73,6.2325,3.0573,571.0200,1.2811,23.0780,63.6520],
        [80.000,380.000,0.0326848,3081.79,6.2789,2.9572,578.9400,1.2818,23.5460,64.0480],
        [80.000,390.000,0.0335276,3110.93,6.3232,2.8738,586.4600,1.2823,24.0080,64.5390],
        [80.000,400.000,0.0343477,3139.31,6.3657,2.8037,593.6500,1.2825,24.4650,65.1110],
        [80.000,410.000,0.0351482,3167.04,6.4066,2.7444,600.5400,1.2826,24.9180,65.7550],
        [80.000,420.000,0.0359315,3194.23,6.4461,2.6939,607.1700,1.2825,25.3670,66.4620],
        [80.000,430.000,0.0366996,3220.95,6.4843,2.6507,613.5600,1.2822,25.8120,67.2250],
        [80.000,440.000,0.0374543,3247.26,6.5215,2.6136,619.7500,1.2819,26.2540,68.0390],
        [80.000,450.000,0.038197,3273.23,6.5577,2.5817,625.7500,1.2814,26.6930,68.8980],
        [80.000,460.000,0.038929,3298.91,6.5929,2.5541,631.5900,1.2809,27.1280,69.7980],
        [80.000,470.000,0.0396513,3324.33,6.6274,2.5303,637.2700,1.2803,27.5610,70.7360],
        [80.000,480.000,0.0403649,3349.53,6.6611,2.5097,642.8200,1.2796,27.9920,71.7080],
        [80.000,490.000,0.0410706,3374.53,6.694,2.4919,648.2400,1.2789,28.4190,72.7130],
        [80.000,500.000,0.0417691,3399.37,6.7264,2.4765,653.5400,1.2782,28.8450,73.7460],
        [80.000,510.000,0.0424609,3424.07,6.7581,2.4631,658.7300,1.2774,29.2680,74.8070],
        [80.000,520.000,0.0431467,3448.64,6.7893,2.4516,663.8200,1.2766,29.6890,75.8930],
        [80.000,530.000,0.0438269,3473.11,6.8199,2.4416,668.8200,1.2758,30.1080,77.0030],
        [80.000,540.000,0.0445019,3497.48,6.8501,2.4331,673.7300,1.2750,30.5250,78.1350],
        [80.000,550.000,0.0451721,3521.77,6.8798,2.4258,678.5600,1.2741,30.9400,79.2870],
        [80.000,560.000,0.0458379,3546.0,6.9091,2.4196,683.3100,1.2733,31.3530,80.4580],
        [80.000,570.000,0.0464996,3570.17,6.9379,2.4144,687.9900,1.2724,31.7640,81.6470],
        [80.000,580.000,0.0471574,3594.29,6.9663,2.4101,692.6000,1.2715,32.1740,82.8530],
        [80.000,590.000,0.0478117,3618.37,6.9944,2.4066,697.1500,1.2707,32.5820,84.0750],
        [80.000,600.000,0.0484625,3642.42,7.0221,2.4038,701.6400,1.2698,32.9890,85.3120],
        [80.000,650.000,0.0516732,3762.42,7.1557,2.3983,723.2500,1.2654,34.9990,91.6920],
        [80.000,700.000,0.0548251,3882.42,7.2823,2.4032,743.7000,1.2610,36.9740,98.3330],
        [80.000,750.000,0.0579325,4002.86,7.403,2.4152,763.2000,1.2568,38.9180,105.1800],
        //[80.000,800.000,0.0610054,4124.02,7.5186,2.4322,781.8800,1.2526,40.8310,112.1900],

        ];

        for dataset in steam_table {
            let p_bar = dataset[0];
            let t_deg_c = dataset[1];
            let v_m3_per_kg = dataset[2];
            let h_kj_per_kg = dataset[3];
            let s_kj_per_kg_k = dataset[4];
            let cp_kj_per_kg_k = dataset[5];
            let w_m_per_s = dataset[6];
            let kappa_dimensionless = dataset[7];
            let eta_micropascal_second = dataset[8];
            let lambda_milliwatt_per_meter_kelvin = dataset[9];
            assert_ph_flash(p_bar, t_deg_c, v_m3_per_kg, h_kj_per_kg, 
                s_kj_per_kg_k, cp_kj_per_kg_k, w_m_per_s, 
                kappa_dimensionless, eta_micropascal_second, 
                lambda_milliwatt_per_meter_kelvin);
        }
}

fn assert_ph_flash(
    p_bar: f64,
    t_deg_c: f64,
    v_m3_per_kg: f64,
    h_kj_per_kg: f64,
    s_kj_per_kg_k: f64,
    cp_kj_per_kg_k: f64,
    w_m_per_s: f64,
    kappa_dimensionless: f64,
    eta_micropascal_second: f64,
    lambda_milliwatt_per_meter_kelvin: f64,
){
    let p = Pressure::new::<bar>(p_bar);
    let h = AvailableEnergy::new::<kilojoule_per_kilogram>(h_kj_per_kg);

    // assert temp first to within 0.035 mk 
    let temp_tol_millikelvin = 35.0;

    let t_test = t_ph_eqm(p, h);

    approx::assert_abs_diff_eq!(
        t_deg_c,
        t_test.get::<degree_celsius>(),
        epsilon=temp_tol_millikelvin*1e-3
        );

    // assert volume to within 0.01%  (that's the tolerable error for 
    // backward eqn)
    let v_test = v_ph_eqm(p, h);
    approx::assert_relative_eq!(
        v_m3_per_kg,
        v_test.get::<cubic_meter_per_kilogram>(),
        max_relative=1e-4
        );

    // now entropy 
    let s_test = s_ph_eqm(p, h);
    approx::assert_relative_eq!(
        s_kj_per_kg_k,
        s_test.get::<kilojoule_per_kilogram_kelvin>(),
        max_relative=7e-3
        );

    // cp 
    let cp_test = cp_ph_eqm(p, h);
    approx::assert_relative_eq!(
        cp_kj_per_kg_k,
        cp_test.get::<kilojoule_per_kilogram_kelvin>(),
        max_relative=5e-4
        );
    // w 
    let w_test = w_ph_eqm(p, h);
    approx::assert_relative_eq!(
        w_m_per_s,
        w_test.get::<meter_per_second>(),
        max_relative=2e-4
        );

    // kappa
    let kappa_test = kappa_ph_eqm(p, h);
    approx::assert_relative_eq!(
        kappa_dimensionless,
        kappa_test.get::<ratio>(),
        max_relative=6e-3
        );

    // eta and lambda tbd



}



