use uom::si::thermal_conductivity::milliwatt_per_meter_kelvin;
use uom::si::{available_energy::kilojoule_per_kilogram, dynamic_viscosity::micropascal_second};
use uom::si::pressure::bar;
use uom::si::f64::*;
use uom::si::ratio::ratio;
use uom::si::specific_heat_capacity::kilojoule_per_kilogram_kelvin;
use uom::si::specific_volume::cubic_meter_per_kilogram;
use uom::si::thermodynamic_temperature::degree_celsius;
use uom::si::velocity::meter_per_second;

use crate::dynamic_viscosity::mu_ph_eqm;
use crate::interfaces::functional_programming::ph_flash_eqm::{cp_ph_eqm, kappa_ph_eqm, lambda_ph_eqm, s_ph_eqm, t_ph_eqm, v_ph_eqm, w_ph_eqm};

/// single phase table (see page 201)
///
/// NOTE: ph flash UNABLE to do triple point liquid and vapour accurately.
/// or even close to 0 degc
#[test]
pub fn single_phase_table_2_to_750_degc(){

    let steam_table: Vec<[f64; 10]> =
        vec![
        //[20.000,0.000,0.000999193,1.99229,-0.00002608,4.21,1405.40000,988.40000,1787.50000,557.09000],
        [20.000,2.000,0.000999107,10.4062,0.030665,4.2041,1415.20000,1002.30000,1670.00000,562.05000],
        [20.000,4.000,0.000999088,18.8091,0.061094,4.199,1424.60000,1015.70000,1564.30000,566.81000],
        [20.000,6.000,0.000999132,27.2029,0.091271,4.1948,1433.70000,1028.60000,1469.00000,571.38000],
        [20.000,8.000,0.000999235,35.589,0.12121,4.1913,1442.30000,1040.90000,1382.70000,575.78000],
        [20.000,10.000,0.000999394,43.9685,0.1509,4.1883,1450.60000,1052.70000,1304.20000,580.01000],
        [20.000,12.000,0.000999605,52.3425,0.18038,4.1858,1458.40000,1063.90000,1232.60000,584.10000],
        [20.000,14.000,0.000999866,60.7118,0.20962,4.1836,1466.00000,1074.70000,1167.20000,588.04000],
        [20.000,16.000,0.00100018,69.0772,0.23865,4.1818,1473.10000,1084.90000,1107.20000,591.86000],
        [20.000,18.000,0.00100053,77.4392,0.26747,4.1802,1479.90000,1094.50000,1051.90000,595.55000],
        [20.000,20.000,0.00100093,85.7984,0.29609,4.1789,1486.40000,1103.70000,1001.00000,599.12000],
        [20.000,25.000,0.0010021,106.686,0.36674,4.1764,1501.20000,1124.40000,889.76000,607.59000],
        [20.000,30.000,0.00100352,127.564,0.43618,4.1749,1514.00000,1142.10000,797.19000,615.44000],
        [20.000,35.000,0.00100515,148.437,0.50447,4.1741,1525.00000,1156.90000,719.25000,622.73000],
        [20.000,40.000,0.001007,169.306,0.57166,4.1739,1534.40000,1169.00000,652.97000,629.50000],
        [20.000,45.000,0.00100903,190.177,0.63778,4.1743,1542.20000,1178.50000,596.10000,635.79000],
        [20.000,50.000,0.00101125,211.05,0.70287,4.1752,1548.50000,1185.60000,546.90000,641.62000],
        [20.000,55.000,0.00101365,231.929,0.76699,4.1766,1553.40000,1190.30000,504.06000,647.02000],
        [20.000,60.000,0.00101622,252.817,0.83016,4.1786,1557.10000,1193.00000,466.50000,652.01000],
        [20.000,65.000,0.00101896,273.716,0.89243,4.181,1559.60000,1193.60000,433.39000,656.59000],
        [20.000,70.000,0.00102185,294.628,0.95382,4.184,1561.00000,1192.30000,404.05000,660.78000],
        [20.000,75.000,0.00102491,315.556,1.0144,4.1874,1561.30000,1189.20000,377.93000,664.59000],
        [20.000,80.000,0.00102812,336.503,1.0741,4.1914,1560.60000,1184.40000,354.57000,668.03000],
        [20.000,85.000,0.00103148,357.471,1.1331,4.1958,1559.00000,1178.10000,333.59000,671.11000],
        [20.000,90.000,0.001035,378.462,1.1913,4.2008,1556.50000,1170.30000,314.69000,673.84000],
        [20.000,95.000,0.00103867,399.479,1.2487,4.2063,1553.10000,1161.20000,297.60000,676.24000],
        [20.000,100.000,0.00104249,420.526,1.3055,4.2123,1549.00000,1150.80000,282.10000,678.29000],
        [20.000,110.000,0.00105059,462.715,1.4171,4.2259,1538.40000,1126.40000,255.11000,681.44000],
        [20.000,120.000,0.00105932,505.051,1.5262,4.2418,1525.10000,1097.80000,232.51000,683.33000],
        [20.000,130.000,0.00106869,547.559,1.6329,4.2601,1509.20000,1065.60000,213.39000,684.04000],
        [20.000,140.000,0.00107873,590.263,1.7376,4.2812,1490.80000,1030.10000,197.06000,683.59000],
        [20.000,150.000,0.00108948,633.193,1.8403,4.3053,1470.10000,991.86000,183.00000,682.05000],
        [20.000,160.000,0.00110099,676.382,1.9411,4.333,1447.20000,951.08000,170.78000,679.66000],
        [20.000,170.000,0.00111332,719.867,2.0404,4.3647,1422.00000,908.11000,160.08000,676.39000],
        [20.000,180.000,0.00112654,763.691,2.1382,4.4011,1394.60000,863.22000,150.64000,672.04000],
        [20.000,190.000,0.00114075,807.906,2.2347,4.443,1365.00000,816.67000,142.23000,666.70000],
        [20.000,200.000,0.00115606,852.572,2.3301,4.4914,1333.20000,768.70000,134.70000,660.40000],
        [20.000,210.000,0.0011726,897.76,2.4246,4.5476,1299.00000,719.55000,127.89000,653.16000],
        [20.000,212.385,0.00117675,908.622,2.447,4.5623,1290.60000,707.68000,126.36000,651.29000],
        [20.000,212.385,0.0995805,2798.38,6.3392,3.1904,504.66000,1.27880,16.09100,40.93600],
        [20.000,220.000,0.102167,2821.67,6.3868,2.9487,512.58000,1.28580,16.45400,41.31300],
        [20.000,230.000,0.105394,2850.17,6.444,2.7665,521.47000,1.29010,16.92400,41.87400],
        [20.000,240.000,0.108488,2877.21,6.4972,2.6481,529.47000,1.29200,17.38800,42.49200],
        [20.000,250.000,0.111484,2903.23,6.5474,2.5602,536.96000,1.29310,17.84800,43.15800],
        [20.000,260.000,0.1144,2928.47,6.5952,2.4909,544.07000,1.29380,18.30300,43.86600],
        [20.000,270.000,0.117251,2953.09,6.641,2.4349,550.89000,1.29410,18.75500,44.61200],
        [20.000,280.000,0.120046,2977.21,6.685,2.389,557.44000,1.29430,19.20300,45.39300],
        [20.000,290.000,0.122794,3000.9,6.7274,2.3512,563.78000,1.29420,19.64900,46.20600],
        [20.000,300.000,0.125501,3024.25,6.7685,2.3201,569.91000,1.29400,20.09200,47.04800],
        [20.000,310.000,0.128174,3047.32,6.8084,2.2944,575.87000,1.29370,20.53300,47.91900],
        [20.000,320.000,0.130816,3070.16,6.8472,2.2733,581.67000,1.29320,20.97100,48.81500],
        [20.000,330.000,0.133431,3092.8,6.8851,2.2559,587.33000,1.29260,21.40800,49.73600],
        [20.000,340.000,0.136023,3115.28,6.9221,2.2417,592.86000,1.29200,21.84200,50.68100],
        [20.000,350.000,0.138594,3137.64,6.9582,2.2301,598.27000,1.29130,22.27500,51.64700],
        [20.000,360.000,0.141147,3159.89,6.9937,2.2207,603.57000,1.29050,22.70600,52.63300],
        [20.000,370.000,0.143683,3182.06,7.0284,2.2133,608.77000,1.28970,23.13600,53.63900],
        [20.000,380.000,0.146205,3204.16,7.0625,2.2074,613.88000,1.28880,23.56400,54.66400],
        [20.000,390.000,0.148712,3226.21,7.096,2.203,618.91000,1.28790,23.99100,55.70600],
        [20.000,400.000,0.151208,3248.23,7.129,2.1997,623.85000,1.28690,24.41700,56.76500],
        [20.000,410.000,0.153693,3270.21,7.1614,2.1974,628.72000,1.28600,24.84100,57.84000],
        [20.000,420.000,0.156167,3292.18,7.1933,2.1961,633.52000,1.28500,25.26400,58.93100],
        [20.000,430.000,0.158632,3314.14,7.2248,2.1955,638.25000,1.28400,25.68600,60.03600],
        [20.000,440.000,0.161088,3336.09,7.2558,2.1957,642.92000,1.28300,26.10600,61.15400],
        [20.000,450.000,0.163537,3358.05,7.2863,2.1964,647.52000,1.28190,26.52500,62.28600],
        [20.000,460.000,0.165978,3380.02,7.3165,2.1976,652.08000,1.28090,26.94400,63.43100],
        [20.000,470.000,0.168413,3402.01,7.3463,2.1994,656.57000,1.27990,27.36100,64.58800],
        [20.000,480.000,0.170841,3424.01,7.3757,2.2015,661.02000,1.27880,27.77600,65.75700],
        [20.000,490.000,0.173263,3446.04,7.4048,2.2041,665.41000,1.27770,28.19100,66.93700],
        [20.000,500.000,0.17568,3468.09,7.4335,2.2069,669.76000,1.27670,28.60500,68.12700],
        [20.000,510.000,0.178092,3490.18,7.4619,2.2101,674.06000,1.27560,29.01700,69.32800],
        [20.000,520.000,0.180499,3512.3,7.4899,2.2136,678.32000,1.27460,29.42900,70.53900],
        [20.000,530.000,0.182902,3534.45,7.5177,2.2173,682.54000,1.27350,29.83900,71.75900],
        [20.000,540.000,0.1853,3556.64,7.5451,2.2212,686.71000,1.27250,30.24900,72.98800],
        [20.000,550.000,0.187694,3578.88,7.5723,2.2254,690.85000,1.27140,30.65700,74.22600],
        [20.000,560.000,0.190085,3601.15,7.5992,2.2297,694.95000,1.27040,31.06400,75.47300],
        [20.000,570.000,0.192472,3623.47,7.6258,2.2342,699.01000,1.26930,31.47000,76.72800],
        [20.000,580.000,0.194856,3645.84,7.6522,2.2389,703.04000,1.26830,31.87500,77.99000],
        [20.000,590.000,0.197237,3668.25,7.6783,2.2437,707.03000,1.26720,32.27900,79.26000],
        [20.000,600.000,0.199614,3690.71,7.7042,2.2486,710.99000,1.26620,32.68200,80.53800],
        [20.000,650.000,0.211464,3803.79,7.8301,2.275,730.32000,1.26110,34.68100,87.02500],
        [20.000,700.000,0.22326,3918.24,7.9509,2.3035,748.96000,1.25620,36.65300,93.66000],
        [20.000,750.000,0.235015,4034.16,8.067,2.3333,766.98000,1.25150,38.60000,100.42000],
        //[20.000,800.000,0.246737,4151.59,8.1791,2.3642,784.44000,1.24700,40.52000,107.29000],

        ];

        for dataset in steam_table {
            let p_bar = dataset[0];
            let t_deg_c = dataset[1];
            let v_m3_per_kg = dataset[2];
            let h_kj_per_kg = dataset[3];
            let s_kj_per_kg_k = dataset[4];
            let cp_kj_per_kg_k = dataset[5];
            let w_m_per_s = dataset[6];
            let kappa_dimensionless = dataset[7];
            let eta_micropascal_second = dataset[8];
            let lambda_milliwatt_per_meter_kelvin = dataset[9];
            assert_ph_flash(p_bar, t_deg_c, v_m3_per_kg, h_kj_per_kg, 
                s_kj_per_kg_k, cp_kj_per_kg_k, w_m_per_s, 
                kappa_dimensionless, eta_micropascal_second, 
                lambda_milliwatt_per_meter_kelvin);
        }
}

fn assert_ph_flash(
    p_bar: f64,
    t_deg_c: f64,
    v_m3_per_kg: f64,
    h_kj_per_kg: f64,
    s_kj_per_kg_k: f64,
    cp_kj_per_kg_k: f64,
    w_m_per_s: f64,
    kappa_dimensionless: f64,
    eta_micropascal_second: f64,
    lambda_milliwatt_per_meter_kelvin: f64,
){
    let p = Pressure::new::<bar>(p_bar);
    let h = AvailableEnergy::new::<kilojoule_per_kilogram>(h_kj_per_kg);

    // assert temp first to within 0.035 mk 
    let temp_tol_millikelvin = 35.0;

    let t_test = t_ph_eqm(p, h);

    approx::assert_abs_diff_eq!(
        t_deg_c,
        t_test.get::<degree_celsius>(),
        epsilon=temp_tol_millikelvin*1e-3
        );

    // assert volume to within 0.01%  (that's the tolerable error for 
    // backward eqn)
    let v_test = v_ph_eqm(p, h);
    approx::assert_relative_eq!(
        v_m3_per_kg,
        v_test.get::<cubic_meter_per_kilogram>(),
        max_relative=1e-4
        );

    // now entropy 
    let s_test = s_ph_eqm(p, h);
    approx::assert_relative_eq!(
        s_kj_per_kg_k,
        s_test.get::<kilojoule_per_kilogram_kelvin>(),
        max_relative=7e-3
        );

    // cp 
    let cp_test = cp_ph_eqm(p, h);
    approx::assert_relative_eq!(
        cp_kj_per_kg_k,
        cp_test.get::<kilojoule_per_kilogram_kelvin>(),
        max_relative=1e-4
        );
    // w 
    let w_test = w_ph_eqm(p, h);
    approx::assert_relative_eq!(
        w_m_per_s,
        w_test.get::<meter_per_second>(),
        max_relative=1e-4
        );

    // kappa
    let kappa_test = kappa_ph_eqm(p, h);
    approx::assert_relative_eq!(
        kappa_dimensionless,
        kappa_test.get::<ratio>(),
        max_relative=6e-3
        );

    // dynamic_viscosity
    //
    let eta_micropascal_second_test = mu_ph_eqm(p, h)
        .get::<micropascal_second>();
    approx::assert_relative_eq!(
        eta_micropascal_second,
        eta_micropascal_second_test,
        max_relative=2e-2
        );

    // thermal conductivity
    let lambda_test_milliwatt_per_meter_kelvin = 
        lambda_ph_eqm(p, h).get::<milliwatt_per_meter_kelvin>();
    approx::assert_relative_eq!(
        lambda_milliwatt_per_meter_kelvin,
        lambda_test_milliwatt_per_meter_kelvin,
        max_relative=2e-2
        );




}



