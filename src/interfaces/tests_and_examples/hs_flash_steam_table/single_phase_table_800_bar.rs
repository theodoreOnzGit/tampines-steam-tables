
use uom::si::{dynamic_viscosity::micropascal_second, thermal_conductivity::milliwatt_per_meter_kelvin};
use uom::si::available_energy::kilojoule_per_kilogram;
use uom::si::pressure::{bar, kilopascal, megapascal};
use uom::si::f64::*;
use uom::si::ratio::ratio;
use uom::si::specific_heat_capacity::kilojoule_per_kilogram_kelvin;
use uom::si::specific_volume::cubic_meter_per_kilogram;
use uom::si::thermodynamic_temperature::degree_celsius;
use uom::si::velocity::meter_per_second;

use crate::interfaces::functional_programming::hs_flash_eqm::{cp_hs_eqm, kappa_hs_eqm, lambda_hs_eqm, mu_hs_eqm, tpvx_hs_flash_eqm, w_hs_eqm};
use crate::interfaces::functional_programming::ph_flash_eqm::x_ph_flash;

/// single phase table (see page 201)
///
/// thermal conductivity off by 8%
#[test]
pub fn single_phase_table_2_to_750_degc(){

    let steam_table: Vec<[f64; 10]> =
        vec![
        //[800.000,0.000,0.000964341,77.1804,-0.004907,3.9446,1539.6000,30.7240,1673.7000,606.5500],
        [800.000,2.000,0.000964684,85.0779,0.0239,3.9527,1548.9000,31.0860,1575.7000,610.0600],
        [800.000,4.000,0.000965058,92.9907,0.052555,3.96,1557.8000,31.4310,1486.5000,613.5100],
        [800.000,6.000,0.00096546,100.918,0.081053,3.9667,1566.2000,31.7600,1405.1000,616.9000],
        [800.000,8.000,0.000965892,108.857,0.10939,3.9728,1574.3000,32.0740,1330.6000,620.2300],
        [800.000,10.000,0.00096635,116.809,0.13758,3.9784,1582.0000,32.3740,1262.2000,623.5200],
        [800.000,12.000,0.000966834,124.77,0.1656,3.9835,1589.4000,32.6590,1199.2000,626.7500],
        [800.000,14.000,0.000967344,132.742,0.19345,3.9881,1596.4000,32.9320,1141.1000,629.9300],
        [800.000,16.000,0.000967879,140.723,0.22115,3.9923,1603.1000,33.1920,1087.4000,633.0600],
        [800.000,18.000,0.000968437,148.711,0.24868,3.9962,1609.6000,33.4390,1037.7000,636.1400],
        [800.000,20.000,0.000969019,156.707,0.27605,3.9998,1615.7000,33.6740,991.4500,639.1700],
        [800.000,25.000,0.000970572,176.726,0.34377,4.0076,1629.9000,34.2120,889.3900,646.5400],
        [800.000,30.000,0.00097226,196.781,0.41047,4.014,1642.4000,34.6820,803.2800,653.6100],
        [800.000,35.000,0.000974076,216.865,0.47618,4.0194,1653.6000,35.0880,729.9200,660.3800],
        [800.000,40.000,0.000976016,236.974,0.54092,4.0242,1663.3000,35.4340,666.8900,666.8400],
        [800.000,45.000,0.000978074,257.106,0.60469,4.0284,1671.8000,35.7210,612.3300,672.9800],
        [800.000,50.000,0.000980249,277.257,0.66754,4.0322,1679.1000,35.9540,564.7700,678.8200],
        [800.000,55.000,0.000982535,297.427,0.72948,4.0359,1685.3000,36.1350,523.0600,684.3500],
        [800.000,60.000,0.000984931,317.616,0.79054,4.0394,1690.4000,36.2660,486.2800,689.5500],
        [800.000,65.000,0.000987434,337.821,0.85074,4.0428,1694.5000,36.3500,453.6800,694.4400],
        [800.000,70.000,0.000990043,358.044,0.9101,4.0463,1697.7000,36.3890,424.6500,699.0200],
        [800.000,75.000,0.000992756,378.284,0.96866,4.0497,1699.9000,36.3860,398.7000,703.2700],
        [800.000,80.000,0.000995572,398.542,1.0264,4.0533,1701.3000,36.3430,375.4000,707.2100],
        [800.000,85.000,0.000998489,418.817,1.0834,4.0569,1701.9000,36.2620,354.4100,710.8400],
        [800.000,90.000,0.00100151,439.11,1.1397,4.0605,1701.7000,36.1450,335.4300,714.1600],
        [800.000,95.000,0.00100463,459.422,1.1953,4.0643,1700.8000,35.9940,318.2200,717.1700],
        [800.000,100.000,0.00100785,479.754,1.2501,4.0683,1699.3000,35.8120,302.5700,719.8800],
        [800.000,110.000,0.00101459,520.477,1.3578,4.0765,1694.2000,35.3620,275.2200,724.4200],
        [800.000,120.000,0.00102173,561.286,1.463,4.0853,1686.7000,34.8080,252.2400,727.8100],
        [800.000,130.000,0.00102928,602.186,1.5657,4.0948,1677.2000,34.1640,232.7300,730.1000],
        [800.000,140.000,0.00103724,643.185,1.6661,4.1052,1665.8000,33.4410,216.0400,731.3400],
        [800.000,150.000,0.00104564,684.292,1.7645,4.1164,1652.7000,32.6510,201.6400,731.5600],
        [800.000,160.000,0.00105447,725.517,1.8607,4.1287,1637.9000,31.8020,189.1300,730.8300],
        [800.000,170.000,0.00106375,766.871,1.9551,4.1423,1621.6000,30.9010,178.1900,729.1900],
        [800.000,180.000,0.00107351,808.368,2.0477,4.1572,1604.0000,29.9570,168.5500,726.6700],
        [800.000,190.000,0.00108377,850.022,2.1387,4.1738,1585.0000,28.9750,160.0200,723.3100],
        [800.000,200.000,0.00109454,891.849,2.228,4.1921,1564.7000,27.9600,152.4100,719.1600],
        [800.000,210.000,0.00110587,933.87,2.3159,4.2124,1543.2000,26.9180,145.6000,714.6500],
        [800.000,220.000,0.00111778,976.104,2.4024,4.2348,1520.5000,25.8540,139.4600,709.2900],
        [800.000,230.000,0.00113031,1018.57,2.4877,4.2597,1496.7000,24.7730,133.8900,703.1900],
        [800.000,240.000,0.0011435,1061.31,2.5718,4.2872,1471.8000,23.6790,128.8200,696.4000],
        [800.000,250.000,0.0011574,1104.33,2.6548,4.3174,1445.8000,22.5770,124.1700,688.9700],
        [800.000,260.000,0.00117207,1147.67,2.7368,4.3508,1419.0000,21.4730,119.9000,680.9100],
        [800.000,270.000,0.00118757,1191.35,2.818,4.3873,1391.2000,20.3710,115.9300,672.2600],
        [800.000,280.000,0.00120397,1235.42,2.8984,4.4273,1362.6000,19.2770,112.2500,663.0300],
        [800.000,290.000,0.00122135,1279.91,2.9781,4.4708,1333.4000,18.1950,108.7900,653.2500],
        [800.000,300.000,0.00123981,1324.85,3.0572,4.5181,1303.5000,17.1310,105.5400,642.9300],
        [800.000,310.000,0.00125944,1370.29,3.1358,4.5692,1273.2000,16.0880,102.4600,632.0800],
        [800.000,320.000,0.00128038,1416.25,3.214,4.6241,1242.5000,15.0710,99.5310,620.7300],
        [800.000,330.000,0.00130275,1462.78,3.2918,4.6825,1211.5000,14.0830,96.7280,608.9000],
        [800.000,340.000,0.00132672,1509.91,3.3693,4.744,1180.3000,13.1260,94.0330,596.5800],
        [800.000,350.000,0.00135245,1557.67,3.4465,4.8076,1149.0000,12.2030,91.4300,583.8100],
        [800.000,360.000,0.00138016,1606.1,3.5236,4.8842,1117.3000,11.3050,88.9060,570.6100],
        [800.000,370.000,0.0014101,1655.38,3.6008,4.9727,1084.6000,10.4280,86.4450,556.9900],
        [800.000,380.000,0.00144256,1705.56,3.6783,5.0634,1051.8000,9.5864,84.0370,542.9400],
        [800.000,390.000,0.00147784,1756.67,3.7559,5.1586,1019.2000,8.7860,81.6750,528.4900],
        [800.000,400.000,0.00151632,1808.76,3.8339,5.2623,986.8500,8.0282,79.3510,513.6600],
        [800.000,410.000,0.00155843,1861.95,3.9123,5.3768,954.9600,7.3147,77.0610,498.4600],
        [800.000,420.000,0.00160468,1916.33,3.9913,5.5024,923.7600,6.6472,74.7990,482.9100],
        [800.000,430.000,0.00165561,1972.03,4.0711,5.6371,893.4900,6.0274,72.5650,467.0100],
        [800.000,440.000,0.00171181,2029.1,4.1517,5.7774,864.4400,5.4566,70.3620,450.8100],
        [800.000,450.000,0.00177388,2087.58,4.2331,5.9181,836.9100,4.9356,68.1960,434.3500],
        [800.000,460.000,0.0018424,2147.44,4.3153,6.0528,811.1900,4.4645,66.0760,417.7000],
        [800.000,470.000,0.00191784,2208.59,4.3982,6.1737,787.5900,4.0430,64.0170,400.9400],
        [800.000,480.000,0.00200054,2270.84,4.4814,6.2727,766.4000,3.6701,62.0330,384.2100],
        [800.000,490.000,0.00209065,2333.94,4.5646,6.342,747.8600,3.3440,60.1430,367.6600],
        [800.000,500.000,0.00218803,2397.56,4.6474,6.3749,732.1200,3.0622,58.3650,351.4400],
        [800.000,510.000,0.00229222,2461.31,4.7294,6.3679,719.2700,2.8212,56.7130,335.7500],
        [800.000,520.000,0.00240251,2524.78,4.8099,6.3205,709.2400,2.6172,55.2020,320.7600],
        [800.000,530.000,0.00251797,2587.59,4.8886,6.2361,701.8600,2.4454,53.8390,306.6300],
        [800.000,540.000,0.0026375,2649.4,4.9651,6.1206,696.8600,2.3015,52.6250,293.4900],
        [800.000,550.000,0.00276004,2709.93,5.0391,5.9817,693.9500,2.1810,51.5570,281.4100],
        [800.000,560.000,0.00288461,2768.96,5.1103,5.8423,692.8900,2.0804,50.6300,270.4500],
        [800.000,570.000,0.00301014,2826.43,5.1789,5.6505,693.2900,1.9960,49.8330,260.5100],
        [800.000,580.000,0.00313543,2882.02,5.2445,5.4708,694.7900,1.9245,49.1590,251.6900],
        [800.000,590.000,0.00326009,2935.89,5.3072,5.3034,696.9600,1.8625,48.5930,243.9000],
        [800.000,600.000,0.00338369,2988.09,5.3674,5.1372,699.8100,1.8092,48.1230,237.0300],
        [800.000,650.000,0.003975,3225.67,5.6321,4.4081,721.8000,1.6384,46.8630,213.7700],
        [800.000,700.000,0.00451614,3432.92,5.8509,3.9135,747.6300,1.5471,46.7470,202.3500],
        [800.000,750.000,0.00501331,3619.74,6.0382,3.5834,773.3100,1.4911,47.2370,199.6500],
        //[800.000,800.000,0.00547622,3793.32,6.2039,3.3765,796.7700,1.4491,48.0710,200.7500],


        ];

        for dataset in steam_table {
            let p_bar = dataset[0];
            let t_deg_c = dataset[1];
            let v_m3_per_kg = dataset[2];
            let h_kj_per_kg = dataset[3];
            let s_kj_per_kg_k = dataset[4];
            let cp_kj_per_kg_k = dataset[5];
            let w_m_per_s = dataset[6];
            let kappa_dimensionless = dataset[7];
            let eta_micropascal_second = dataset[8];
            let lambda_milliwatt_per_meter_kelvin = dataset[9];
            assert_hs_flash(p_bar, t_deg_c, v_m3_per_kg, h_kj_per_kg, 
                s_kj_per_kg_k, cp_kj_per_kg_k, w_m_per_s, 
                kappa_dimensionless, eta_micropascal_second, 
                lambda_milliwatt_per_meter_kelvin);
        }

}

fn assert_hs_flash(
    p_bar: f64,
    t_deg_c: f64,
    v_m3_per_kg: f64,
    h_kj_per_kg: f64,
    s_kj_per_kg_k: f64,
    cp_kj_per_kg_k: f64,
    w_m_per_s: f64,
    kappa_dimensionless: f64,
    eta_micropascal_second: f64,
    lambda_milliwatt_per_meter_kelvin: f64,
){
    let p = Pressure::new::<bar>(p_bar);
    let h = AvailableEnergy::new::<kilojoule_per_kilogram>(h_kj_per_kg);
    let s = SpecificHeatCapacity::new::<kilojoule_per_kilogram_kelvin>(
        s_kj_per_kg_k
    );

    // assert temp first to within 0.050 k
    // based on table 2.8
    let temp_tol_millikelvin = 50.0;

    let (t_test, p_test, v_test, _x_test) = 
        tpvx_hs_flash_eqm(h, s);

    approx::assert_abs_diff_eq!(
        t_deg_c,
        t_test.get::<degree_celsius>(),
        epsilon=temp_tol_millikelvin*1e-3
        );

    // assert volume to within 0.5%  
    approx::assert_relative_eq!(
        v_m3_per_kg,
        v_test.get::<cubic_meter_per_kilogram>(),
        max_relative=5e-3
        );

    // assert pressure to within 50 kPa or 0.60%
    if p > Pressure::new::<megapascal>(2.5) {
        let pressure_error_tol = Pressure::new::<kilopascal>(50.0);
        let pressure_error_tol_bar = pressure_error_tol.get::<bar>();
        approx::assert_abs_diff_eq!(
            p_bar,
            p_test.get::<bar>(),
            epsilon=pressure_error_tol_bar
        ); 
    } else {
        dbg!(&(p_bar,t_deg_c));
        approx::assert_relative_eq!(
            p_bar,
            p_test.get::<bar>(),
            max_relative = 2e-2
        ); 

    }
    // the x for ph is quite reliable, i'll use that as reference 
    // also this is more than supercritical pressure, doesn't matter 
    // the quality
    let _x_ref = x_ph_flash(p, h);

    //approx::assert_relative_eq!(
    //    x_ref.round(),
    //    x_test.get::<ratio>(),
    //    max_relative = 1e-3
    //);


    // cp 
    let cp_test = cp_hs_eqm(h, s);
    approx::assert_relative_eq!(
        cp_kj_per_kg_k,
        cp_test.get::<kilojoule_per_kilogram_kelvin>(),
        max_relative=1e-3
        );
    // w 
    let w_test = w_hs_eqm(h, s);
    approx::assert_relative_eq!(
        w_m_per_s,
        w_test.get::<meter_per_second>(),
        max_relative=1e-3
        );

    // kappa
    let kappa_test = kappa_hs_eqm(h, s);
    approx::assert_relative_eq!(
        kappa_dimensionless,
        kappa_test.get::<ratio>(),
        max_relative=2e-2
        );

    // dynamic_viscosity
    //
    let eta_micropascal_second_test = mu_hs_eqm(h, s)
        .get::<micropascal_second>();
    approx::assert_relative_eq!(
        eta_micropascal_second,
        eta_micropascal_second_test,
        max_relative=2e-2
        );

    // thermal thermal conductivity
    let lambda_test_milliwatt_per_meter_kelvin = 
        lambda_hs_eqm(h, s).get::<milliwatt_per_meter_kelvin>();
    approx::assert_relative_eq!(
        lambda_milliwatt_per_meter_kelvin,
        lambda_test_milliwatt_per_meter_kelvin,
        max_relative=8e-2
        );

}












