use uom::si::{dynamic_viscosity::micropascal_second, thermal_conductivity::milliwatt_per_meter_kelvin};
use uom::si::available_energy::kilojoule_per_kilogram;
use uom::si::pressure::{bar, kilopascal, megapascal};
use uom::si::f64::*;
use uom::si::ratio::ratio;
use uom::si::specific_heat_capacity::kilojoule_per_kilogram_kelvin;
use uom::si::specific_volume::cubic_meter_per_kilogram;
use uom::si::thermodynamic_temperature::degree_celsius;
use uom::si::velocity::meter_per_second;

use crate::interfaces::functional_programming::hs_flash_eqm::{cp_hs_eqm, kappa_hs_eqm, lambda_hs_eqm, mu_hs_eqm, tpvx_hs_flash_eqm, w_hs_eqm};
use crate::interfaces::functional_programming::ph_flash_eqm::x_ph_flash;

/// single phase table (see page 201)
///
/// thermal conductivity off by 8%
#[test]
pub fn single_phase_table_2_to_750_degc(){

    let steam_table: Vec<[f64; 10]> =
        vec![
        //[220.000,0.000,0.000989405,22.0098,0.0004596,4.1209,1437.80000,94.97800,1747.60000,571.53000],
        [220.000,2.000,0.000989454,30.2508,0.03052,4.1201,1447.70000,96.27500,1636.60000,576.02000],
        [220.000,4.000,0.000989558,38.4907,0.060358,4.1198,1457.10000,97.52000,1536.50000,580.34000],
        [220.000,6.000,0.000989715,46.73,0.08998,4.1196,1466.10000,98.71200,1445.90000,584.52000],
        [220.000,8.000,0.000989921,54.9693,0.11939,4.1197,1474.70000,99.85300,1363.50000,588.57000],
        [220.000,10.000,0.000990173,63.2089,0.14859,4.1199,1482.90000,100.94000,1288.40000,592.49000],
        [220.000,12.000,0.000990469,71.4491,0.17759,4.1203,1490.70000,101.98000,1219.70000,596.29000],
        [220.000,14.000,0.000990808,79.69,0.20639,4.1207,1498.20000,102.97000,1156.70000,599.97000],
        [220.000,16.000,0.000991186,87.9318,0.235,4.1211,1505.30000,103.92000,1098.70000,603.56000],
        [220.000,18.000,0.000991604,96.1745,0.2634,4.1216,1512.10000,104.81000,1045.30000,607.04000],
        [220.000,20.000,0.000992058,104.418,0.29162,4.1221,1518.60000,105.66000,995.97000,610.43000],
        [220.000,25.000,0.000993349,125.032,0.36135,4.1235,1533.30000,107.58000,887.78000,618.50000],
        [220.000,30.000,0.000994845,145.654,0.42994,4.125,1546.20000,109.24000,797.36000,626.06000],
        [220.000,35.000,0.000996534,166.282,0.49743,4.1265,1557.40000,110.63000,720.96000,633.15000],
        [220.000,40.000,0.000998403,186.919,0.56386,4.1282,1567.00000,111.79000,655.78000,639.78000],
        [220.000,45.000,0.00100044,207.564,0.62927,4.13,1575.10000,112.72000,599.69000,645.98000],
        [220.000,50.000,0.00100265,228.22,0.69369,4.1321,1581.80000,113.43000,551.07000,651.78000],
        [220.000,55.000,0.00100501,248.885,0.75715,4.1343,1587.20000,113.94000,508.63000,657.17000],
        [220.000,60.000,0.00100752,269.563,0.81969,4.1369,1591.40000,114.25000,471.36000,662.19000],
        [220.000,65.000,0.00101018,290.255,0.88134,4.1398,1594.40000,114.39000,438.45000,666.82000],
        [220.000,70.000,0.00101298,310.962,0.94212,4.1429,1596.40000,114.35000,409.25000,671.09000],
        [220.000,75.000,0.00101593,331.685,1.0021,4.1464,1597.30000,114.16000,383.22000,675.00000],
        [220.000,80.000,0.00101901,352.427,1.0612,4.1503,1597.40000,113.82000,359.91000,678.56000],
        [220.000,85.000,0.00102223,373.188,1.1196,4.1545,1596.50000,113.33000,338.96000,681.78000],
        [220.000,90.000,0.00102559,393.972,1.1772,4.1591,1594.80000,112.72000,320.07000,684.66000],
        [220.000,95.000,0.00102909,414.78,1.2341,4.164,1592.20000,111.98000,302.97000,687.21000],
        [220.000,100.000,0.00103272,435.613,1.2904,4.1693,1589.00000,111.13000,287.44000,689.43000],
        [220.000,110.000,0.00104038,477.363,1.4008,4.1811,1580.30000,109.11000,260.39000,692.94000],
        [220.000,120.000,0.0010486,519.239,1.5087,4.1945,1569.00000,106.71000,237.72000,695.24000],
        [220.000,130.000,0.00105739,561.259,1.6142,4.2097,1555.30000,103.99000,218.52000,696.38000],
        [220.000,140.000,0.00106675,603.44,1.7175,4.2269,1539.40000,100.97000,202.12000,696.41000],
        [220.000,150.000,0.00107673,645.804,1.8189,4.2463,1521.40000,97.71300,188.00000,695.37000],
        [220.000,160.000,0.00108735,688.375,1.9183,4.2683,1501.40000,94.23300,175.73000,693.30000],
        [220.000,170.000,0.00109866,731.179,2.016,4.2931,1479.50000,90.56200,164.99000,690.35000],
        [220.000,180.000,0.00111069,774.247,2.1121,4.3211,1455.70000,86.72500,155.53000,686.78000],
        [220.000,190.000,0.00112353,817.614,2.2068,4.3529,1430.10000,82.74300,147.12000,682.14000],
        [220.000,200.000,0.00113723,861.32,2.3001,4.3891,1402.60000,78.63700,139.61000,676.57000],
        [220.000,210.000,0.00115188,905.412,2.3923,4.4302,1373.30000,74.42600,132.85000,670.13000],
        [220.000,220.000,0.00116758,949.944,2.4836,4.4771,1342.20000,70.12900,126.71000,662.84000],
        [220.000,230.000,0.00118447,994.978,2.574,4.5309,1309.10000,65.76500,121.11000,654.71000],
        [220.000,240.000,0.00120269,1040.59,2.6637,4.5926,1274.10000,61.35300,115.95000,645.75000],
        [220.000,250.000,0.00122242,1086.86,2.753,4.6638,1237.20000,56.91300,111.17000,635.95000],
        [220.000,260.000,0.00124391,1133.9,2.8421,4.7464,1198.20000,52.46100,106.69000,625.31000],
        [220.000,270.000,0.00126744,1181.84,2.9312,4.8432,1157.10000,48.01400,102.46000,613.81000],
        [220.000,280.000,0.0012934,1230.82,3.0205,4.9576,1113.60000,43.58300,98.42900,601.42000],
        [220.000,290.000,0.00132229,1281.06,3.1105,5.0947,1067.50000,39.17600,94.54700,588.10000],
        [220.000,300.000,0.0013548,1332.82,3.2016,5.2623,1018.50000,34.80300,90.76200,573.76000],
        [220.000,310.000,0.0013919,1386.45,3.2944,5.4724,965.96000,30.47100,87.02000,558.31000],
        [220.000,320.000,0.00143507,1442.47,3.3896,5.7448,909.21000,26.18400,83.25800,541.56000],
        [220.000,330.000,0.00148663,1501.67,3.4886,6.1153,846.98000,21.93400,79.39400,523.24000],
        [220.000,340.000,0.00155059,1565.33,3.5933,6.6555,777.89000,17.73800,75.30700,502.92000],
        [220.000,350.000,0.00163487,1635.9,3.7074,7.5429,700.27000,13.63400,70.78800,479.81000],
        [220.000,360.000,0.00176017,1719.47,3.8404,9.4598,602.89000,9.38630,65.32500,452.51000],
        [220.000,370.000,0.00202856,1842.65,4.0333,18.352,452.83000,4.59480,56.68000,421.94000],
        //[220.000,373.707,0.00275039,2021.92,4.3109,1163.9,315.24000,1.64230,43.22100,859.00000],
        //[220.000,373.707,0.00357662,2164.18,4.5308,1707.2,326.11000,1.35160,35.62400,1010.20000],
        [220.000,380.000,0.00612498,2504.56,5.0556,19.419,420.44000,1.31180,27.88600,183.60000],
        [220.000,390.000,0.00737736,2643.66,5.2671,10.722,460.90000,1.30880,27.06100,137.30000],
        [220.000,400.000,0.00825503,2735.76,5.405,8.0332,487.13000,1.30660,26.97600,119.93000],
        [220.000,410.000,0.00896956,2808.37,5.5121,6.6169,507.74000,1.30640,27.11900,110.58000],
        [220.000,420.000,0.00958798,2869.89,5.6015,5.7489,524.85000,1.30590,27.36500,104.83000],
        [220.000,430.000,0.0101423,2924.25,5.6794,5.1572,539.62000,1.30500,27.66800,101.02000],
        [220.000,440.000,0.0106498,2973.55,5.7491,4.723,552.76000,1.30410,28.00300,98.40500],
        [220.000,450.000,0.0111214,3019.05,5.8124,4.3894,564.66000,1.30310,28.35900,96.58300],
        [220.000,460.000,0.0115644,3061.57,5.8708,4.1251,575.59000,1.30220,28.72800,95.32900],
        [220.000,470.000,0.0119839,3101.72,5.9252,3.9113,585.74000,1.30140,29.10700,94.49900],
        [220.000,480.000,0.012384,3139.92,5.9763,3.7354,595.25000,1.30050,29.49100,93.99600],
        [220.000,490.000,0.0127675,3176.52,6.0246,3.5887,604.20000,1.29970,29.87900,93.75300],
        [220.000,500.000,0.013137,3211.77,6.0704,3.4649,612.68000,1.29880,30.27000,93.72100],
        [220.000,510.000,0.0134943,3245.88,6.1143,3.3595,620.75000,1.29800,30.66300,93.86300],
        [220.000,520.000,0.013841,3279.01,6.1563,3.2689,628.46000,1.29710,31.05600,94.15200],
        [220.000,530.000,0.0141782,3311.3,6.1968,3.1906,635.85000,1.29620,31.45000,94.56700],
        [220.000,540.000,0.014507,3342.86,6.2358,3.1225,642.95000,1.29520,31.84300,95.08900],
        [220.000,550.000,0.0148284,3373.78,6.2736,3.0628,649.79000,1.29430,32.23600,95.70600],
        [220.000,560.000,0.0151431,3404.14,6.3103,3.0104,656.41000,1.29330,32.62900,96.40500],
        [220.000,570.000,0.0154516,3434.01,6.3459,2.964,662.81000,1.29240,33.02100,97.17800],
        [220.000,580.000,0.0157547,3463.44,6.3806,2.923,669.02000,1.29140,33.41300,98.01700],
        [220.000,590.000,0.0160527,3492.48,6.4145,2.8864,675.06000,1.29040,33.80300,98.91300],
        [220.000,600.000,0.0163461,3521.18,6.4475,2.8538,680.94000,1.28940,34.19200,99.86300],
        [220.000,650.000,0.0177555,3660.64,6.6029,2.7351,708.34000,1.28450,36.12400,105.24000],
        [220.000,700.000,0.0190916,3795.49,6.7451,2.6651,733.17000,1.27980,38.02900,111.36000],
        [220.000,750.000,0.0203752,3927.63,6.8776,2.6244,756.09000,1.27530,39.90700,118.07000],
        //[220.000,800.000,0.0216197,4058.25,7.0022,2.6029,777.51000,1.27100,41.76000,125.12000],


        ];

        for dataset in steam_table {
            let p_bar = dataset[0];
            let t_deg_c = dataset[1];
            let v_m3_per_kg = dataset[2];
            let h_kj_per_kg = dataset[3];
            let s_kj_per_kg_k = dataset[4];
            let cp_kj_per_kg_k = dataset[5];
            let w_m_per_s = dataset[6];
            let kappa_dimensionless = dataset[7];
            let eta_micropascal_second = dataset[8];
            let lambda_milliwatt_per_meter_kelvin = dataset[9];
            assert_hs_flash(p_bar, t_deg_c, v_m3_per_kg, h_kj_per_kg, 
                s_kj_per_kg_k, cp_kj_per_kg_k, w_m_per_s, 
                kappa_dimensionless, eta_micropascal_second, 
                lambda_milliwatt_per_meter_kelvin);
        }

}

fn assert_hs_flash(
    p_bar: f64,
    t_deg_c: f64,
    v_m3_per_kg: f64,
    h_kj_per_kg: f64,
    s_kj_per_kg_k: f64,
    cp_kj_per_kg_k: f64,
    w_m_per_s: f64,
    kappa_dimensionless: f64,
    eta_micropascal_second: f64,
    lambda_milliwatt_per_meter_kelvin: f64,
){
    let p = Pressure::new::<bar>(p_bar);
    let h = AvailableEnergy::new::<kilojoule_per_kilogram>(h_kj_per_kg);
    let s = SpecificHeatCapacity::new::<kilojoule_per_kilogram_kelvin>(
        s_kj_per_kg_k
    );

    // assert temp first to within 0.050 k
    // based on table 2.8
    let temp_tol_millikelvin = 50.0;

    let (t_test, p_test, v_test, x_test) = 
        tpvx_hs_flash_eqm(h, s);

    approx::assert_abs_diff_eq!(
        t_deg_c,
        t_test.get::<degree_celsius>(),
        epsilon=temp_tol_millikelvin*1e-2
        );

    // assert volume to within 0.5%  
    approx::assert_relative_eq!(
        v_m3_per_kg,
        v_test.get::<cubic_meter_per_kilogram>(),
        max_relative=5e-3
        );

    // assert pressure to within 15 kPa or 0.60%
    if p > Pressure::new::<megapascal>(2.5) {
        let pressure_error_tol = Pressure::new::<kilopascal>(25.0);
        let pressure_error_tol_bar = pressure_error_tol.get::<bar>();
        approx::assert_abs_diff_eq!(
            p_bar,
            p_test.get::<bar>(),
            epsilon=pressure_error_tol_bar
        ); 
    } else {
        dbg!(&(p_bar,t_deg_c));
        approx::assert_relative_eq!(
            p_bar,
            p_test.get::<bar>(),
            max_relative = 2e-2
        ); 

    }
    // the x for ph is quite reliable, i'll use that as reference 
    let x_ref = x_ph_flash(p, h);

    approx::assert_relative_eq!(
        x_ref.round(),
        x_test.get::<ratio>(),
        max_relative = 1e-3
    );


    // cp 
    let cp_test = cp_hs_eqm(h, s);
    approx::assert_relative_eq!(
        cp_kj_per_kg_k,
        cp_test.get::<kilojoule_per_kilogram_kelvin>(),
        max_relative=1e-3
        );
    // w 
    let w_test = w_hs_eqm(h, s);
    approx::assert_relative_eq!(
        w_m_per_s,
        w_test.get::<meter_per_second>(),
        max_relative=1e-2
        );

    // kappa
    let kappa_test = kappa_hs_eqm(h, s);
    approx::assert_relative_eq!(
        kappa_dimensionless,
        kappa_test.get::<ratio>(),
        max_relative=2e-2
        );

    // dynamic_viscosity
    //
    let eta_micropascal_second_test = mu_hs_eqm(h, s)
        .get::<micropascal_second>();
    approx::assert_relative_eq!(
        eta_micropascal_second,
        eta_micropascal_second_test,
        max_relative=2e-2
        );

    // thermal thermal conductivity
    let lambda_test_milliwatt_per_meter_kelvin = 
        lambda_hs_eqm(h, s).get::<milliwatt_per_meter_kelvin>();
    approx::assert_relative_eq!(
        lambda_milliwatt_per_meter_kelvin,
        lambda_test_milliwatt_per_meter_kelvin,
        max_relative=8e-2
        );

}












