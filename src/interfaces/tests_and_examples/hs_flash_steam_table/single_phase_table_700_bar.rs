
use uom::si::{dynamic_viscosity::micropascal_second, thermal_conductivity::milliwatt_per_meter_kelvin};
use uom::si::available_energy::kilojoule_per_kilogram;
use uom::si::pressure::{bar, kilopascal, megapascal};
use uom::si::f64::*;
use uom::si::ratio::ratio;
use uom::si::specific_heat_capacity::kilojoule_per_kilogram_kelvin;
use uom::si::specific_volume::cubic_meter_per_kilogram;
use uom::si::thermodynamic_temperature::degree_celsius;
use uom::si::velocity::meter_per_second;

use crate::interfaces::functional_programming::hs_flash_eqm::{cp_hs_eqm, kappa_hs_eqm, lambda_hs_eqm, mu_hs_eqm, tpvx_hs_flash_eqm, w_hs_eqm};
use crate::interfaces::functional_programming::ph_flash_eqm::x_ph_flash;

/// single phase table (see page 201)
///
/// thermal conductivity off by 8%
#[test]
pub fn single_phase_table_2_to_750_degc(){

    let steam_table: Vec<[f64; 10]> =
        vec![
        //[700.000,0.000,0.000968343,67.9346,-0.003378,3.9678,1521.60000,34.15500,1682.50000,601.17000],
        [700.000,2.000,0.000968644,75.8774,0.025594,3.9749,1531.00000,34.56900,1582.80000,604.81000],
        [700.000,4.000,0.00096898,83.8338,0.054406,3.9814,1540.00000,34.96400,1492.20000,608.37000],
        [700.000,6.000,0.000969347,91.8027,0.083056,3.9874,1548.60000,35.34100,1409.60000,611.87000],
        [700.000,8.000,0.000969746,99.783,0.11154,3.9928,1556.80000,35.70200,1334.00000,615.30000],
        [700.000,10.000,0.000970175,107.774,0.13986,3.9978,1564.60000,36.04500,1264.70000,618.67000],
        [700.000,12.000,0.000970632,115.774,0.16802,4.0024,1572.10000,36.37300,1201.00000,621.97000],
        [700.000,14.000,0.000971117,123.783,0.19601,4.0066,1579.20000,36.68600,1142.30000,625.22000],
        [700.000,16.000,0.000971629,131.8,0.22383,4.0104,1586.00000,36.98300,1088.00000,628.40000],
        [700.000,18.000,0.000972167,139.824,0.25149,4.0139,1592.50000,37.26700,1037.80000,631.54000],
        [700.000,20.000,0.00097273,147.856,0.27898,4.0172,1598.70000,37.53600,991.20000,634.61000],
        [700.000,25.000,0.000974245,167.96,0.34698,4.0242,1613.00000,38.15100,888.35000,642.06000],
        [700.000,30.000,0.000975905,188.096,0.41395,4.0301,1625.70000,38.68800,801.69000,649.18000],
        [700.000,35.000,0.000977702,208.259,0.47992,4.0351,1636.90000,39.14900,727.95000,655.98000],
        [700.000,40.000,0.00097963,228.446,0.54491,4.0395,1646.70000,39.54100,664.66000,662.44000],
        [700.000,45.000,0.000981686,248.654,0.60893,4.0435,1655.10000,39.86500,609.91000,668.58000],
        [700.000,50.000,0.000983863,268.881,0.67201,4.0472,1662.40000,40.12600,562.23000,674.40000],
        [700.000,55.000,0.00098616,289.125,0.73418,4.0507,1668.50000,40.32700,520.44000,679.89000],
        [700.000,60.000,0.000988572,309.387,0.79546,4.0541,1673.50000,40.47100,483.61000,685.05000],
        [700.000,65.000,0.000991097,329.666,0.85588,4.0575,1677.50000,40.56000,450.99000,689.89000],
        [700.000,70.000,0.000993734,349.962,0.91546,4.0609,1680.50000,40.59800,421.95000,694.40000],
        [700.000,75.000,0.00099648,370.275,0.97423,4.0644,1682.60000,40.58600,396.00000,698.59000],
        [700.000,80.000,0.000999335,390.606,1.0322,4.068,1683.80000,40.52900,372.72000,702.46000],
        [700.000,85.000,0.0010023,410.955,1.0894,4.0717,1684.20000,40.42900,351.75000,706.02000],
        [700.000,90.000,0.00100536,431.323,1.1459,4.0755,1683.80000,40.28700,332.79000,709.26000],
        [700.000,95.000,0.00100854,451.711,1.2017,4.0795,1682.70000,40.10700,315.61000,712.19000],
        [700.000,100.000,0.00101181,472.118,1.2567,4.0836,1680.90000,39.89200,299.98000,714.82000],
        [700.000,110.000,0.00101869,512.997,1.3648,4.0923,1675.30000,39.36100,272.70000,719.18000],
        [700.000,120.000,0.00102598,553.967,1.4704,4.1018,1667.40000,38.71200,249.78000,722.39000],
        [700.000,130.000,0.00103371,595.035,1.5735,4.112,1657.30000,37.95900,230.34000,724.49000],
        [700.000,140.000,0.00104188,636.211,1.6744,4.1233,1645.30000,37.11700,213.70000,725.52000],
        [700.000,150.000,0.00105049,677.504,1.7732,4.1355,1631.50000,36.19700,199.36000,725.55000],
        [700.000,160.000,0.00105957,718.926,1.8699,4.1491,1616.00000,35.21000,186.90000,724.61000],
        [700.000,170.000,0.00106913,760.49,1.9648,4.164,1599.00000,34.16300,176.00000,722.74000],
        [700.000,180.000,0.0010792,802.211,2.0579,4.1805,1580.50000,33.06600,166.40000,719.99000],
        [700.000,190.000,0.00108981,844.106,2.1493,4.1988,1560.60000,31.92600,157.90000,716.40000],
        [700.000,200.000,0.00110097,886.194,2.2392,4.2191,1539.40000,30.74800,150.32000,712.23000],
        [700.000,210.000,0.00111273,928.496,2.3277,4.2417,1516.90000,29.53900,143.52000,707.40000],
        [700.000,220.000,0.00112512,971.037,2.4149,4.2668,1493.10000,28.30500,137.39000,701.73000],
        [700.000,230.000,0.00113819,1013.84,2.5008,4.2947,1468.10000,27.05200,131.84000,695.33000],
        [700.000,240.000,0.00115199,1056.94,2.5856,4.3256,1442.00000,25.78500,126.77000,688.23000],
        [700.000,250.000,0.00116659,1100.36,2.6694,4.3598,1414.70000,24.50900,122.12000,680.47000],
        [700.000,260.000,0.00118204,1144.15,2.7523,4.3976,1386.40000,23.23100,117.83000,672.07000],
        [700.000,270.000,0.00119842,1188.33,2.8344,4.4393,1357.20000,21.95700,113.86000,663.05000],
        [700.000,280.000,0.00121583,1232.95,2.9158,4.4853,1327.00000,20.69200,110.14000,653.42000],
        [700.000,290.000,0.00123436,1278.05,2.9966,4.5358,1296.10000,19.44200,106.66000,643.21000],
        [700.000,300.000,0.00125413,1323.68,3.0769,4.5912,1264.40000,18.21200,103.37000,632.43000],
        [700.000,310.000,0.00127529,1369.89,3.1569,4.6516,1232.20000,17.00700,100.25000,621.09000],
        [700.000,320.000,0.00129798,1416.73,3.2365,4.7174,1199.40000,15.83200,97.26500,609.21000],
        [700.000,330.000,0.00132241,1464.26,3.316,4.7885,1166.20000,14.69100,94.39900,596.79000],
        [700.000,340.000,0.00134877,1512.52,3.3953,4.8648,1132.60000,13.58700,91.63300,583.84000],
        [700.000,350.000,0.00137734,1561.57,3.4747,4.9456,1098.80000,12.52300,88.94700,570.37000],
        [700.000,360.000,0.00140839,1611.49,3.5541,5.0456,1064.40000,11.49200,86.32900,556.40000],
        [700.000,370.000,0.00144236,1662.5,3.6341,5.1581,1028.90000,10.48500,83.75800,541.91000],
        [700.000,380.000,0.00147965,1714.68,3.7146,5.2776,993.30000,9.52590,81.22600,526.89000],
        [700.000,390.000,0.00152079,1768.09,3.7957,5.4083,957.83000,8.61800,78.72400,511.36000],
        [700.000,400.000,0.00156639,1822.89,3.8778,5.5547,922.59000,7.76290,76.24400,495.31000],
        [700.000,410.000,0.00161722,1879.25,3.9609,5.7192,887.84000,6.96310,73.77800,478.73000],
        [700.000,420.000,0.00167415,1937.34,4.0453,5.9017,853.87000,6.22140,71.32400,461.62000],
        [700.000,430.000,0.00173821,1997.33,4.1312,6.099,821.07000,5.54070,68.88300,444.00000],
        [700.000,440.000,0.00181047,2059.35,4.2188,6.3049,789.90000,4.92330,66.46000,425.88000],
        [700.000,450.000,0.00189208,2123.43,4.308,6.5096,760.87000,4.37100,64.07000,407.32000],
        [700.000,460.000,0.00198407,2189.49,4.3987,6.699,734.52000,3.88460,61.73100,388.43000],
        [700.000,470.000,0.00208719,2257.3,4.4906,6.8558,711.40000,3.46390,59.47100,369.39000],
        [700.000,480.000,0.00220176,2326.43,4.583,6.9619,691.97000,3.10680,57.32100,350.42000],
        [700.000,490.000,0.00232737,2396.31,4.6752,7.0021,676.51000,2.80920,55.31600,331.81000],
        [700.000,500.000,0.00246294,2466.23,4.7662,6.9693,665.04000,2.56530,53.48500,313.90000],
        [700.000,510.000,0.00260674,2535.47,4.8552,6.867,657.31000,2.36780,51.84900,297.02000],
        [700.000,520.000,0.0027567,2603.38,4.9413,6.7073,652.87000,2.20880,50.41800,281.41000],
        [700.000,530.000,0.00291072,2669.48,5.0242,6.507,651.17000,2.08110,49.18900,267.24000],
        [700.000,540.000,0.00306666,2733.39,5.1032,6.2797,652.00000,1.98030,48.15200,254.58000],
        [700.000,550.000,0.00322318,2795.01,5.1786,6.0369,654.19000,1.89680,47.28700,243.39000],
        [700.000,560.000,0.00337846,2854.09,5.2499,5.7814,657.60000,1.82860,46.58000,233.63000],
        [700.000,570.000,0.00353176,2910.72,5.3175,5.5472,661.76000,1.77140,46.00700,225.19000],
        [700.000,580.000,0.00368255,2965.08,5.3816,5.3277,666.47000,1.72310,45.55000,217.92000],
        [700.000,590.000,0.00383038,3017.31,5.4424,5.119,671.62000,1.68230,45.19200,211.67000],
        [700.000,600.000,0.00397492,3067.51,5.5003,4.9233,677.13000,1.64780,44.91900,206.33000],
        [700.000,650.000,0.00464832,3293.57,5.7522,4.1825,706.51000,1.53410,44.44700,189.70000],
        [700.000,700.000,0.00525194,3490.45,5.96,3.7267,735.57000,1.47170,44.84900,182.87000],
        [700.000,750.000,0.00580362,3668.96,6.139,3.4357,762.99000,1.43300,45.68900,182.78000],
        //[700.000,800.000,0.00631671,3835.81,6.2982,3.2526,787.58000,1.40280,46.77400,185.60000],


        ];

        for dataset in steam_table {
            let p_bar = dataset[0];
            let t_deg_c = dataset[1];
            let v_m3_per_kg = dataset[2];
            let h_kj_per_kg = dataset[3];
            let s_kj_per_kg_k = dataset[4];
            let cp_kj_per_kg_k = dataset[5];
            let w_m_per_s = dataset[6];
            let kappa_dimensionless = dataset[7];
            let eta_micropascal_second = dataset[8];
            let lambda_milliwatt_per_meter_kelvin = dataset[9];
            assert_hs_flash(p_bar, t_deg_c, v_m3_per_kg, h_kj_per_kg, 
                s_kj_per_kg_k, cp_kj_per_kg_k, w_m_per_s, 
                kappa_dimensionless, eta_micropascal_second, 
                lambda_milliwatt_per_meter_kelvin);
        }

}

fn assert_hs_flash(
    p_bar: f64,
    t_deg_c: f64,
    v_m3_per_kg: f64,
    h_kj_per_kg: f64,
    s_kj_per_kg_k: f64,
    cp_kj_per_kg_k: f64,
    w_m_per_s: f64,
    kappa_dimensionless: f64,
    eta_micropascal_second: f64,
    lambda_milliwatt_per_meter_kelvin: f64,
){
    let p = Pressure::new::<bar>(p_bar);
    let h = AvailableEnergy::new::<kilojoule_per_kilogram>(h_kj_per_kg);
    let s = SpecificHeatCapacity::new::<kilojoule_per_kilogram_kelvin>(
        s_kj_per_kg_k
    );

    // assert temp first to within 0.050 k
    // based on table 2.8
    let temp_tol_millikelvin = 50.0;

    let (t_test, p_test, v_test, _x_test) = 
        tpvx_hs_flash_eqm(h, s);

    approx::assert_abs_diff_eq!(
        t_deg_c,
        t_test.get::<degree_celsius>(),
        epsilon=temp_tol_millikelvin*1e-3
        );

    // assert volume to within 0.5%  
    approx::assert_relative_eq!(
        v_m3_per_kg,
        v_test.get::<cubic_meter_per_kilogram>(),
        max_relative=5e-3
        );

    // assert pressure to within 15 kPa or 0.60%
    if p > Pressure::new::<megapascal>(2.5) {
        let pressure_error_tol = Pressure::new::<kilopascal>(25.0);
        let pressure_error_tol_bar = pressure_error_tol.get::<bar>();
        approx::assert_abs_diff_eq!(
            p_bar,
            p_test.get::<bar>(),
            epsilon=pressure_error_tol_bar
        ); 
    } else {
        dbg!(&(p_bar,t_deg_c));
        approx::assert_relative_eq!(
            p_bar,
            p_test.get::<bar>(),
            max_relative = 2e-2
        ); 

    }
    // the x for ph is quite reliable, i'll use that as reference 
    // past supercritical pressure, quality doesn't matter
    let _x_ref = x_ph_flash(p, h);

    //approx::assert_relative_eq!(
    //    x_ref.round(),
    //    x_test.get::<ratio>(),
    //    max_relative = 1e-3
    //);


    // cp 
    let cp_test = cp_hs_eqm(h, s);
    approx::assert_relative_eq!(
        cp_kj_per_kg_k,
        cp_test.get::<kilojoule_per_kilogram_kelvin>(),
        max_relative=1e-3
        );
    // w 
    let w_test = w_hs_eqm(h, s);
    approx::assert_relative_eq!(
        w_m_per_s,
        w_test.get::<meter_per_second>(),
        max_relative=1e-3
        );

    // kappa
    let kappa_test = kappa_hs_eqm(h, s);
    approx::assert_relative_eq!(
        kappa_dimensionless,
        kappa_test.get::<ratio>(),
        max_relative=2e-2
        );

    // dynamic_viscosity
    //
    let eta_micropascal_second_test = mu_hs_eqm(h, s)
        .get::<micropascal_second>();
    approx::assert_relative_eq!(
        eta_micropascal_second,
        eta_micropascal_second_test,
        max_relative=2e-2
        );

    // thermal thermal conductivity
    let lambda_test_milliwatt_per_meter_kelvin = 
        lambda_hs_eqm(h, s).get::<milliwatt_per_meter_kelvin>();
    approx::assert_relative_eq!(
        lambda_milliwatt_per_meter_kelvin,
        lambda_test_milliwatt_per_meter_kelvin,
        max_relative=8e-2
        );

}












