use uom::si::{dynamic_viscosity::micropascal_second, thermal_conductivity::milliwatt_per_meter_kelvin};
use uom::si::available_energy::kilojoule_per_kilogram;
use uom::si::pressure::{bar, kilopascal, megapascal};
use uom::si::f64::*;
use uom::si::ratio::ratio;
use uom::si::specific_heat_capacity::kilojoule_per_kilogram_kelvin;
use uom::si::specific_volume::cubic_meter_per_kilogram;
use uom::si::thermodynamic_temperature::degree_celsius;
use uom::si::velocity::meter_per_second;

use crate::interfaces::functional_programming::hs_flash_eqm::{cp_hs_eqm, kappa_hs_eqm, lambda_hs_eqm, mu_hs_eqm, tpvx_hs_flash_eqm, w_hs_eqm};
use crate::interfaces::functional_programming::ph_flash_eqm::x_ph_flash;

/// single phase table (see page 201)
///
/// thermal conductivity off by 8%
#[test]
pub fn single_phase_table_2_to_750_degc(){

    let steam_table: Vec<[f64; 10]> =
        vec![

        //[10.000,0.000,0.000999699,0.97582,-0.00008842,4.215,1403.80000,1971.40000,1789.70000,556.33000],
        [10.000,2.000,0.000999606,9.39927,0.030637,4.2087,1413.60000,1999.20000,1671.80000,561.32000],
        [10.000,4.000,0.000999581,17.8112,0.061099,4.2034,1423.10000,2025.90000,1565.90000,566.10000],
        [10.000,6.000,0.000999618,26.2135,0.091307,4.199,1432.10000,2051.60000,1470.30000,570.70000],
        [10.000,8.000,0.000999716,34.6076,0.12127,4.1952,1440.70000,2076.20000,1383.70000,575.11000],
        [10.000,10.000,0.00099987,42.9948,0.151,4.1921,1449.00000,2099.80000,1305.10000,579.36000],
        [10.000,12.000,0.00100008,51.3761,0.18049,4.1894,1456.90000,2122.30000,1233.40000,583.46000],
        [10.000,14.000,0.00100033,59.7525,0.20977,4.1871,1464.40000,2143.70000,1167.80000,587.42000],
        [10.000,16.000,0.00100064,68.1246,0.23882,4.1851,1471.50000,2164.10000,1107.60000,591.25000],
        [10.000,18.000,0.00100099,76.4931,0.26766,4.1834,1478.40000,2183.40000,1052.30000,594.95000],
        [10.000,20.000,0.00100139,84.8585,0.2963,4.182,1484.80000,2201.70000,1001.30000,598.54000],
        [10.000,25.000,0.00100255,105.761,0.367,4.1793,1499.60000,2243.10000,889.90000,607.02000],
        [10.000,30.000,0.00100396,126.653,0.43649,4.1776,1512.40000,2278.40000,797.20000,614.89000],
        [10.000,35.000,0.0010056,147.538,0.50482,4.1766,1523.40000,2307.90000,719.18000,622.19000],
        [10.000,40.000,0.00100744,168.421,0.57204,4.1763,1532.80000,2332.00000,652.84000,628.97000],
        [10.000,45.000,0.00100947,189.303,0.6382,4.1766,1540.50000,2350.90000,595.93000,635.27000],
        [10.000,50.000,0.0010117,210.188,0.70334,4.1775,1546.80000,2365.00000,546.70000,641.10000],
        [10.000,55.000,0.0010141,231.079,0.76749,4.1789,1551.70000,2374.40000,503.83000,646.50000],
        [10.000,60.000,0.00101667,251.977,0.8307,4.1808,1555.40000,2379.60000,466.26000,651.49000],
        [10.000,65.000,0.00101941,272.887,0.89299,4.1832,1557.90000,2380.70000,433.14000,656.06000],
        [10.000,70.000,0.00102231,293.81,0.95441,4.1861,1559.20000,2378.00000,403.79000,660.25000],
        [10.000,75.000,0.00102537,314.749,1.015,4.1896,1559.50000,2371.70000,377.66000,664.06000],
        [10.000,80.000,0.00102859,335.707,1.0748,4.1935,1558.70000,2362.10000,354.30000,667.49000],
        [10.000,85.000,0.00103196,356.686,1.1338,4.198,1557.10000,2349.40000,333.32000,670.57000],
        [10.000,90.000,0.00103549,377.688,1.192,4.203,1554.50000,2333.70000,314.42000,673.29000],
        [10.000,95.000,0.00103917,398.717,1.2495,4.2085,1551.10000,2315.30000,297.33000,675.68000],
        [10.000,100.000,0.001043,419.774,1.3063,4.2146,1546.90000,2294.30000,281.83000,677.73000],
        [10.000,110.000,0.00105112,461.987,1.4179,4.2283,1536.30000,2245.40000,254.84000,680.85000],
        [10.000,120.000,0.00105988,504.348,1.5271,4.2443,1522.80000,2188.00000,232.25000,682.73000],
        [10.000,130.000,0.00106928,546.882,1.6339,4.2629,1506.80000,2123.30000,213.13000,683.41000],
        [10.000,140.000,0.00107936,589.614,1.7386,4.2841,1488.30000,2052.10000,196.81000,682.94000],
        [10.000,150.000,0.00109015,632.575,1.8414,4.3086,1467.40000,1975.20000,182.74000,681.37000],
        [10.000,160.000,0.00110171,675.797,1.9423,4.3366,1444.30000,1893.40000,170.53000,678.99000],
        [10.000,170.000,0.0011141,719.32,2.0417,4.3687,1418.90000,1807.10000,159.83000,675.67000],
        [10.000,179.886,0.00112723,762.683,2.1384,4.4051,1391.60000,1718.10000,150.48000,671.34000],
        [10.000,179.886,0.194349,2777.12,6.585,2.715,500.89000,1.29100,14.98100,34.81200],
        [10.000,180.000,0.194418,2777.43,6.5857,2.7119,501.00000,1.29110,14.98600,34.82100],
        [10.000,190.000,0.200319,2803.52,6.6426,2.5285,509.69000,1.29690,15.43300,35.55200],
        [10.000,200.000,0.206004,2828.27,6.6955,2.4288,517.32000,1.29910,15.87600,36.31200],
        [10.000,210.000,0.211542,2852.2,6.7455,2.3614,524.41000,1.30000,16.31600,37.09700],
        [10.000,220.000,0.216966,2875.55,6.7934,2.3105,531.18000,1.30050,16.75500,37.90600],
        [10.000,230.000,0.222297,2898.45,6.8393,2.2702,537.69000,1.30060,17.19100,38.73700],
        [10.000,240.000,0.227551,2920.98,6.8837,2.2378,543.99000,1.30050,17.62500,39.59000],
        [10.000,250.000,0.232739,2943.22,6.9266,2.2116,550.11000,1.30020,18.05800,40.46400],
        [10.000,260.000,0.237871,2965.23,6.9683,2.1905,556.06000,1.29990,18.49000,41.35800],
        [10.000,270.000,0.242955,2987.05,7.0088,2.1735,561.86000,1.29940,18.92000,42.27200],
        [10.000,280.000,0.247998,3008.71,7.0484,2.16,567.53000,1.29880,19.35000,43.20400],
        [10.000,290.000,0.253004,3030.25,7.087,2.1492,573.08000,1.29810,19.77800,44.15400],
        [10.000,300.000,0.257979,3051.7,7.1247,2.1408,578.51000,1.29730,20.20500,45.12200],
        [10.000,310.000,0.262926,3073.08,7.1617,2.1344,583.85000,1.29650,20.63200,46.10700],
        [10.000,320.000,0.267848,3094.4,7.1979,2.1297,589.09000,1.29560,21.05800,47.10800],
        [10.000,330.000,0.272749,3115.68,7.2335,2.1263,594.25000,1.29470,21.48200,48.12400],
        [10.000,340.000,0.277629,3136.93,7.2685,2.1242,599.32000,1.29380,21.90600,49.15500],
        [10.000,350.000,0.282492,3158.16,7.3028,2.1231,604.32000,1.29280,22.32900,50.20100],
        [10.000,360.000,0.287339,3179.39,7.3366,2.1228,609.24000,1.29180,22.75200,51.26000],
        [10.000,370.000,0.292172,3200.62,7.3699,2.1233,614.10000,1.29070,23.17300,52.33300],
        [10.000,380.000,0.296991,3221.86,7.4026,2.1245,618.89000,1.28970,23.59400,53.41900],
        [10.000,390.000,0.301799,3243.11,7.4349,2.1262,623.62000,1.28860,24.01400,54.51700],
        [10.000,400.000,0.306595,3264.39,7.4668,2.1284,628.30000,1.28760,24.43300,55.62700],
        [10.000,410.000,0.311381,3285.68,7.4982,2.1311,632.92000,1.28650,24.85200,56.74900],
        [10.000,420.000,0.316158,3307.01,7.5292,2.1341,637.48000,1.28540,25.26900,57.88200],
        [10.000,430.000,0.320927,3328.37,7.5598,2.1375,642.00000,1.28430,25.68600,59.02500],
        [10.000,440.000,0.325687,3349.76,7.59,2.1412,646.47000,1.28320,26.10200,60.17900],
        [10.000,450.000,0.33044,3371.19,7.6198,2.1451,650.89000,1.28210,26.51800,61.34400],
        [10.000,460.000,0.335186,3392.66,7.6493,2.1494,655.26000,1.28100,26.93200,62.51700],
        [10.000,470.000,0.339926,3414.18,7.6785,2.1538,659.59000,1.27990,27.34600,63.70100],
        [10.000,480.000,0.344659,3435.74,7.7073,2.1584,663.88000,1.27880,27.75800,64.89300],
        [10.000,490.000,0.349387,3457.35,7.7358,2.1632,668.13000,1.27770,28.17000,66.09400],
        [10.000,500.000,0.35411,3479.0,7.764,2.1682,672.34000,1.27660,28.58100,67.30300],
        [10.000,510.000,0.358828,3500.71,7.7919,2.1733,676.52000,1.27550,28.99100,68.52100],
        [10.000,520.000,0.363541,3522.47,7.8195,2.1786,680.65000,1.27440,29.40100,69.74700],
        [10.000,530.000,0.36825,3544.28,7.8468,2.184,684.75000,1.27330,29.80900,70.98000],
        [10.000,540.000,0.372955,3566.15,7.8739,2.1895,688.82000,1.27220,30.21600,72.22100],
        [10.000,550.000,0.377656,3588.07,7.9007,2.1951,692.85000,1.27110,30.62300,73.46900],
        [10.000,560.000,0.382354,3610.05,7.9272,2.2008,696.85000,1.27000,31.02900,74.72500],
        [10.000,570.000,0.387048,3632.09,7.9535,2.2066,700.82000,1.26900,31.43300,75.98700],
        [10.000,580.000,0.391738,3654.19,7.9795,2.2125,704.76000,1.26790,31.83700,77.25500],
        [10.000,590.000,0.396426,3676.34,8.0054,2.2185,708.66000,1.26680,32.24000,78.53000],
        [10.000,600.000,0.401111,3698.56,8.0309,2.2245,712.54000,1.26580,32.64200,79.81100],
        [10.000,650.000,0.424497,3810.55,8.1557,2.2555,731.51000,1.26060,34.63700,86.30500],
        [10.000,700.000,0.447829,3924.12,8.2755,2.2875,749.86000,1.25560,36.60700,92.92900],
        [10.000,750.000,0.471121,4039.31,8.3909,2.3201,767.64000,1.25080,38.55300,99.66700],
        //[10.000,800.000,0.49438,4156.14,8.5024,2.3532,784.91000,1.24620,40.47300,106.50000],

        ];

        for dataset in steam_table {
            let p_bar = dataset[0];
            let t_deg_c = dataset[1];
            let v_m3_per_kg = dataset[2];
            let h_kj_per_kg = dataset[3];
            let s_kj_per_kg_k = dataset[4];
            let cp_kj_per_kg_k = dataset[5];
            let w_m_per_s = dataset[6];
            let kappa_dimensionless = dataset[7];
            let eta_micropascal_second = dataset[8];
            let lambda_milliwatt_per_meter_kelvin = dataset[9];
            assert_hs_flash(p_bar, t_deg_c, v_m3_per_kg, h_kj_per_kg, 
                s_kj_per_kg_k, cp_kj_per_kg_k, w_m_per_s, 
                kappa_dimensionless, eta_micropascal_second, 
                lambda_milliwatt_per_meter_kelvin);
        }

}

fn assert_hs_flash(
    p_bar: f64,
    t_deg_c: f64,
    v_m3_per_kg: f64,
    h_kj_per_kg: f64,
    s_kj_per_kg_k: f64,
    cp_kj_per_kg_k: f64,
    w_m_per_s: f64,
    kappa_dimensionless: f64,
    eta_micropascal_second: f64,
    lambda_milliwatt_per_meter_kelvin: f64,
){
    let p = Pressure::new::<bar>(p_bar);
    let h = AvailableEnergy::new::<kilojoule_per_kilogram>(h_kj_per_kg);
    let s = SpecificHeatCapacity::new::<kilojoule_per_kilogram_kelvin>(
        s_kj_per_kg_k
    );

    // assert temp first to within 0.025 mk 
    // based on table 2.8
    let temp_tol_millikelvin = 25.0;

    let (t_test, p_test, v_test, x_test) = 
        tpvx_hs_flash_eqm(h, s);

    approx::assert_abs_diff_eq!(
        t_deg_c,
        t_test.get::<degree_celsius>(),
        epsilon=temp_tol_millikelvin*1e-3
        );

    // assert volume to within 0.5%  
    approx::assert_relative_eq!(
        v_m3_per_kg,
        v_test.get::<cubic_meter_per_kilogram>(),
        max_relative=5e-3
        );

    // assert pressure to within 15 kPa or 0.60%
    if p > Pressure::new::<megapascal>(2.5) {
        let pressure_error_tol = Pressure::new::<kilopascal>(25.0);
        let pressure_error_tol_bar = pressure_error_tol.get::<bar>();
        approx::assert_abs_diff_eq!(
            p_bar,
            p_test.get::<bar>(),
            epsilon=pressure_error_tol_bar
        ); 
    } else {
        dbg!(&(p_bar,t_deg_c));
        approx::assert_relative_eq!(
            p_bar,
            p_test.get::<bar>(),
            max_relative = 2e-2
        ); 

    }
    // the x for ph is quite reliable, i'll use that as reference 
    let x_ref = x_ph_flash(p, h);

    approx::assert_relative_eq!(
        x_ref.round(),
        x_test.get::<ratio>(),
        max_relative = 1e-3
    );


    // cp 
    let cp_test = cp_hs_eqm(h, s);
    approx::assert_relative_eq!(
        cp_kj_per_kg_k,
        cp_test.get::<kilojoule_per_kilogram_kelvin>(),
        max_relative=1e-3
        );
    // w 
    let w_test = w_hs_eqm(h, s);
    approx::assert_relative_eq!(
        w_m_per_s,
        w_test.get::<meter_per_second>(),
        max_relative=1e-3
        );

    // kappa
    let kappa_test = kappa_hs_eqm(h, s);
    approx::assert_relative_eq!(
        kappa_dimensionless,
        kappa_test.get::<ratio>(),
        max_relative=2e-2
        );

    // dynamic_viscosity
    //
    let eta_micropascal_second_test = mu_hs_eqm(h, s)
        .get::<micropascal_second>();
    approx::assert_relative_eq!(
        eta_micropascal_second,
        eta_micropascal_second_test,
        max_relative=2e-2
        );

    // thermal thermal conductivity
    let lambda_test_milliwatt_per_meter_kelvin = 
        lambda_hs_eqm(h, s).get::<milliwatt_per_meter_kelvin>();
    approx::assert_relative_eq!(
        lambda_milliwatt_per_meter_kelvin,
        lambda_test_milliwatt_per_meter_kelvin,
        max_relative=8e-2
        );

}





