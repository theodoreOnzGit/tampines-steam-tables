
use uom::si::{dynamic_viscosity::micropascal_second, thermal_conductivity::milliwatt_per_meter_kelvin};
use uom::si::available_energy::kilojoule_per_kilogram;
use uom::si::pressure::{bar, kilopascal, megapascal};
use uom::si::f64::*;
use uom::si::ratio::ratio;
use uom::si::specific_heat_capacity::kilojoule_per_kilogram_kelvin;
use uom::si::specific_volume::cubic_meter_per_kilogram;
use uom::si::thermodynamic_temperature::degree_celsius;
use uom::si::velocity::meter_per_second;

use crate::interfaces::functional_programming::hs_flash_eqm::{cp_hs_eqm, kappa_hs_eqm, lambda_hs_eqm, mu_hs_eqm, tpvx_hs_flash_eqm, w_hs_eqm};
use crate::interfaces::functional_programming::ph_flash_eqm::x_ph_flash;

/// single phase table (see page 201)
///
/// thermal conductivity off by 8%
#[test]
pub fn single_phase_table_2_to_750_degc(){

    let steam_table: Vec<[f64; 10]> =
        vec![
        //[60.000,0.000,0.000997183,6.04286,0.0001856,4.1908,1411.80000,333.11000,1778.90000,560.09000],
        [60.000,2.000,0.000997126,14.4195,0.030741,4.186,1421.60000,337.78000,1662.80000,564.95000],
        [60.000,4.000,0.000997133,22.7873,0.061042,4.182,1431.00000,342.27000,1558.30000,569.61000],
        [60.000,6.000,0.000997201,31.1478,0.0911,4.1787,1440.00000,346.58000,1464.00000,574.10000],
        [60.000,8.000,0.000997326,39.5024,0.12092,4.1759,1448.70000,350.71000,1378.50000,578.42000],
        [60.000,10.000,0.000997504,47.8519,0.15051,4.1737,1456.90000,354.65000,1300.70000,582.59000],
        [60.000,12.000,0.000997733,56.1973,0.17988,4.1718,1464.80000,358.42000,1229.80000,586.61000],
        [60.000,14.000,0.000998011,64.5391,0.20904,4.1702,1472.30000,362.01000,1164.90000,590.50000],
        [60.000,16.000,0.000998335,72.8781,0.23798,4.1689,1479.50000,365.42000,1105.30000,594.27000],
        [60.000,18.000,0.000998702,81.2147,0.26671,4.1678,1486.30000,368.66000,1050.40000,597.91000],
        [60.000,20.000,0.000999112,89.5493,0.29524,4.1668,1492.80000,371.73000,999.86000,601.45000],
        [60.000,25.000,0.00100031,110.379,0.36569,4.1652,1507.60000,378.67000,889.26000,609.83000],
        [60.000,30.000,0.00100174,131.203,0.43496,4.1643,1520.40000,384.60000,797.14000,617.61000],
        [60.000,35.000,0.00100339,152.024,0.50308,4.1641,1531.50000,389.58000,719.54000,624.86000],
        [60.000,40.000,0.00100524,172.844,0.5701,4.1643,1540.90000,393.65000,653.49000,631.60000],
        [60.000,45.000,0.00100727,193.667,0.63607,4.165,1548.70000,396.87000,596.79000,637.87000],
        [60.000,50.000,0.00100949,214.495,0.70103,4.1661,1555.10000,399.28000,547.72000,643.69000],
        [60.000,55.000,0.00101188,235.329,0.76501,4.1678,1560.20000,400.93000,504.96000,649.09000],
        [60.000,60.000,0.00101444,256.173,0.82805,4.1698,1564.00000,401.87000,467.46000,654.07000],
        [60.000,65.000,0.00101716,277.028,0.89018,4.1724,1566.60000,402.13000,434.40000,658.66000],
        [60.000,70.000,0.00102004,297.898,0.95145,4.1754,1568.10000,401.76000,405.09000,662.87000],
        [60.000,75.000,0.00102307,318.783,1.0119,4.1788,1568.50000,400.81000,378.98000,666.70000],
        [60.000,80.000,0.00102625,339.687,1.0715,4.1828,1568.00000,399.29000,355.64000,670.16000],
        [60.000,85.000,0.00102958,360.612,1.1303,4.1872,1566.50000,397.26000,334.67000,673.27000],
        [60.000,90.000,0.00103307,381.559,1.1884,4.1921,1564.20000,394.74000,315.77000,676.04000],
        [60.000,95.000,0.0010367,402.533,1.2458,4.1974,1561.00000,391.77000,298.68000,678.46000],
        [60.000,100.000,0.00104048,423.535,1.3024,4.2033,1557.10000,388.37000,283.17000,680.55000],
        [60.000,110.000,0.00104849,465.632,1.4138,4.2165,1547.00000,380.41000,256.17000,683.77000],
        [60.000,120.000,0.0010571,507.871,1.5226,4.2318,1534.10000,371.05000,233.56000,685.75000],
        [60.000,130.000,0.00106635,550.276,1.6291,4.2495,1518.70000,360.47000,214.43000,686.54000],
        [60.000,140.000,0.00107624,592.869,1.7335,4.2697,1500.90000,348.83000,198.09000,686.19000],
        [60.000,150.000,0.00108682,635.679,1.8358,4.2927,1480.80000,336.25000,184.01000,684.75000],
        [60.000,160.000,0.00109814,678.735,1.9364,4.3191,1458.50000,322.85000,171.79000,682.26000],
        [60.000,170.000,0.00111024,722.073,2.0353,4.3492,1434.10000,308.72000,161.08000,679.26000],
        [60.000,180.000,0.00112321,765.733,2.1327,4.3837,1407.50000,293.96000,151.64000,675.05000],
        [60.000,190.000,0.00113711,809.763,2.2289,4.4232,1378.80000,278.65000,143.24000,669.85000],
        [60.000,200.000,0.00115205,854.217,2.3238,4.4687,1348.00000,262.87000,135.71000,663.71000],
        [60.000,210.000,0.00116817,899.16,2.4178,4.5213,1314.90000,246.69000,128.92000,656.64000],
        [60.000,220.000,0.00118561,944.671,2.511,4.5823,1279.70000,230.19000,122.73000,648.65000],
        [60.000,230.000,0.00120456,990.841,2.6037,4.6537,1242.00000,213.45000,117.05000,639.75000],
        [60.000,240.000,0.00122528,1037.79,2.6961,4.7378,1202.00000,196.52000,111.79000,629.91000],
        [60.000,250.000,0.00124808,1085.65,2.7885,4.8379,1159.30000,179.46000,106.86000,619.12000],
        [60.000,260.000,0.00127338,1134.61,2.8812,4.9589,1113.50000,162.29000,102.21000,607.32000],
        [60.000,270.000,0.00130177,1184.92,2.9747,5.1082,1064.20000,145.00000,97.74400,594.46000],
        //[60.000,275.586,0.00131927,1213.73,3.0274,5.208,1034.80000,135.28000,95.31000,586.78000],
        [60.000,275.586,0.0324487,2784.56,5.8901,4.8768,494.01000,1.25350,18.44000,59.06500],
        [60.000,280.000,0.0331998,2805.25,5.9276,4.516,501.07000,1.26040,18.67700,58.55300],
        [60.000,290.000,0.0347631,2847.5,6.0033,3.9812,514.56000,1.26940,19.20200,57.84100],
        [60.000,300.000,0.0361911,2885.49,6.0702,3.6378,526.04000,1.27430,19.71300,57.51500],
        [60.000,310.000,0.037523,2920.58,6.1309,3.3929,536.29000,1.27750,20.21300,57.44200],
        [60.000,320.000,0.0387819,2953.55,6.187,3.2078,545.69000,1.27970,20.70500,57.55200],
        [60.000,330.000,0.0399833,2984.87,6.2393,3.0626,554.43000,1.28130,21.18800,57.80400],
        [60.000,340.000,0.0411378,3014.89,6.2887,2.9459,562.64000,1.28250,21.66500,58.17100],
        [60.000,350.000,0.0422535,3043.86,6.3356,2.8504,570.41000,1.28340,22.13500,58.63300],
        [60.000,360.000,0.0433364,3071.96,6.3803,2.7714,577.79000,1.28390,22.60100,59.17800],
        [60.000,370.000,0.0443912,3099.33,6.4232,2.7054,584.85000,1.28420,23.06100,59.79300],
        [60.000,380.000,0.045422,3126.1,6.4645,2.6499,591.62000,1.28430,23.51700,60.47000],
        [60.000,390.000,0.0464317,3152.36,6.5044,2.603,598.14000,1.28420,23.96900,61.20200],
        [60.000,400.000,0.047423,3178.18,6.5431,2.5632,604.44000,1.28400,24.41700,61.98400],
        [60.000,410.000,0.048398,3203.64,6.5806,2.5293,610.54000,1.28370,24.86200,62.81000],
        [60.000,420.000,0.0493586,3228.79,6.6171,2.5004,616.47000,1.28320,25.30400,63.67700],
        [60.000,430.000,0.0503063,3253.66,6.6528,2.4757,622.23000,1.28270,25.74300,64.58100],
        [60.000,440.000,0.0512425,3278.31,6.6876,2.4545,627.84000,1.28210,26.17900,65.51900],
        [60.000,450.000,0.0521683,3302.76,6.7216,2.4364,633.32000,1.28140,26.61200,66.48900],
        [60.000,460.000,0.0530847,3327.05,6.755,2.4209,638.68000,1.28070,27.04300,67.48700],
        [60.000,470.000,0.0539925,3351.19,6.7877,2.4077,643.93000,1.27990,27.47200,68.51300],
        [60.000,480.000,0.0548925,3375.21,6.8198,2.3964,649.07000,1.27910,27.89800,69.56300],
        [60.000,490.000,0.0557854,3399.12,6.8513,2.3868,654.12000,1.27830,28.32300,70.63700],
        [60.000,500.000,0.0566717,3422.95,6.8824,2.3787,659.07000,1.27750,28.74500,71.73300],
        [60.000,510.000,0.0575519,3446.7,6.9129,2.3719,663.95000,1.27660,29.16500,72.84900],
        [60.000,520.000,0.0584266,3470.39,6.9429,2.3663,668.74000,1.27570,29.58400,73.98400],
        [60.000,530.000,0.059296,3494.03,6.9726,2.3616,673.46000,1.27480,30.00100,75.13800],
        [60.000,540.000,0.0601607,3517.63,7.0018,2.3579,678.11000,1.27390,30.41600,76.30800],
        [60.000,550.000,0.0610209,3541.19,7.0306,2.355,682.70000,1.27300,30.83000,77.49500],
        [60.000,560.000,0.0618769,3564.73,7.059,2.3528,687.22000,1.27210,31.24200,78.69600],
        [60.000,570.000,0.062729,3588.25,7.087,2.3512,691.69000,1.27120,31.65200,79.91200],
        [60.000,580.000,0.0635775,3611.76,7.1148,2.3503,696.09000,1.27020,32.06100,81.14100],
        [60.000,590.000,0.0644225,3635.26,7.1421,2.3498,700.45000,1.26930,32.46800,82.38300],
        [60.000,600.000,0.0652644,3658.76,7.1692,2.3499,704.75000,1.26840,32.87400,83.63700],
        [60.000,650.000,0.0694316,3776.36,7.3002,2.3559,725.58000,1.26380,34.88300,90.06800],
        [60.000,700.000,0.0735419,3894.47,7.4248,2.3692,745.42000,1.25930,36.85900,96.71900],
        [60.000,750.000,0.0776087,4013.37,7.5439,2.3874,764.42000,1.25490,38.80500,103.54700],
        //[60.000,800.000,0.0816416,4133.27,7.6583,2.4092,782.69000,1.25060,40.72100,110.51200],


        ];

        for dataset in steam_table {
            let p_bar = dataset[0];
            let t_deg_c = dataset[1];
            let v_m3_per_kg = dataset[2];
            let h_kj_per_kg = dataset[3];
            let s_kj_per_kg_k = dataset[4];
            let cp_kj_per_kg_k = dataset[5];
            let w_m_per_s = dataset[6];
            let kappa_dimensionless = dataset[7];
            let eta_micropascal_second = dataset[8];
            let lambda_milliwatt_per_meter_kelvin = dataset[9];
            assert_hs_flash(p_bar, t_deg_c, v_m3_per_kg, h_kj_per_kg, 
                s_kj_per_kg_k, cp_kj_per_kg_k, w_m_per_s, 
                kappa_dimensionless, eta_micropascal_second, 
                lambda_milliwatt_per_meter_kelvin);
        }

}

fn assert_hs_flash(
    p_bar: f64,
    t_deg_c: f64,
    v_m3_per_kg: f64,
    h_kj_per_kg: f64,
    s_kj_per_kg_k: f64,
    cp_kj_per_kg_k: f64,
    w_m_per_s: f64,
    kappa_dimensionless: f64,
    eta_micropascal_second: f64,
    lambda_milliwatt_per_meter_kelvin: f64,
){
    let p = Pressure::new::<bar>(p_bar);
    let h = AvailableEnergy::new::<kilojoule_per_kilogram>(h_kj_per_kg);
    let s = SpecificHeatCapacity::new::<kilojoule_per_kilogram_kelvin>(
        s_kj_per_kg_k
    );

    // assert temp first to within 0.050 k
    // based on table 2.8
    let temp_tol_millikelvin = 50.0;

    let (t_test, p_test, v_test, x_test) = 
        tpvx_hs_flash_eqm(h, s);

    approx::assert_abs_diff_eq!(
        t_deg_c,
        t_test.get::<degree_celsius>(),
        epsilon=temp_tol_millikelvin*1e-3
        );

    // assert volume to within 0.5%  
    approx::assert_relative_eq!(
        v_m3_per_kg,
        v_test.get::<cubic_meter_per_kilogram>(),
        max_relative=5e-3
        );

    // assert pressure to within 15 kPa or 0.60%
    if p > Pressure::new::<megapascal>(2.5) {
        let pressure_error_tol = Pressure::new::<kilopascal>(25.0);
        let pressure_error_tol_bar = pressure_error_tol.get::<bar>();
        approx::assert_abs_diff_eq!(
            p_bar,
            p_test.get::<bar>(),
            epsilon=pressure_error_tol_bar
        ); 
    } else {
        dbg!(&(p_bar,t_deg_c));
        approx::assert_relative_eq!(
            p_bar,
            p_test.get::<bar>(),
            max_relative = 2e-2
        ); 

    }
    // the x for ph is quite reliable, i'll use that as reference 
    let x_ref = x_ph_flash(p, h);

    approx::assert_relative_eq!(
        x_ref.round(),
        x_test.get::<ratio>(),
        max_relative = 1e-3
    );


    // cp 
    let cp_test = cp_hs_eqm(h, s);
    approx::assert_relative_eq!(
        cp_kj_per_kg_k,
        cp_test.get::<kilojoule_per_kilogram_kelvin>(),
        max_relative=1e-3
        );
    // w 
    let w_test = w_hs_eqm(h, s);
    approx::assert_relative_eq!(
        w_m_per_s,
        w_test.get::<meter_per_second>(),
        max_relative=1e-3
        );

    // kappa
    let kappa_test = kappa_hs_eqm(h, s);
    approx::assert_relative_eq!(
        kappa_dimensionless,
        kappa_test.get::<ratio>(),
        max_relative=2e-2
        );

    // dynamic_viscosity
    //
    let eta_micropascal_second_test = mu_hs_eqm(h, s)
        .get::<micropascal_second>();
    approx::assert_relative_eq!(
        eta_micropascal_second,
        eta_micropascal_second_test,
        max_relative=2e-2
        );

    // thermal thermal conductivity
    let lambda_test_milliwatt_per_meter_kelvin = 
        lambda_hs_eqm(h, s).get::<milliwatt_per_meter_kelvin>();
    approx::assert_relative_eq!(
        lambda_milliwatt_per_meter_kelvin,
        lambda_test_milliwatt_per_meter_kelvin,
        max_relative=8e-2
        );

}












