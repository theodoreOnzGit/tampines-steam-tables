use uom::si::{dynamic_viscosity::micropascal_second, thermal_conductivity::milliwatt_per_meter_kelvin};
use uom::si::available_energy::kilojoule_per_kilogram;
use uom::si::pressure::{bar, kilopascal, megapascal};
use uom::si::f64::*;
use uom::si::ratio::ratio;
use uom::si::specific_heat_capacity::kilojoule_per_kilogram_kelvin;
use uom::si::specific_volume::cubic_meter_per_kilogram;
use uom::si::thermodynamic_temperature::degree_celsius;
use uom::si::velocity::meter_per_second;

use crate::interfaces::functional_programming::hs_flash_eqm::{cp_hs_eqm, kappa_hs_eqm, lambda_hs_eqm, mu_hs_eqm, tpvx_hs_flash_eqm, w_hs_eqm};
use crate::interfaces::functional_programming::ph_flash_eqm::x_ph_flash;

/// single phase table (see page 201)
///
/// thermal conductivity off by 8%
///
/// kappa fails badly here.
/// also saturation fails at saturation line
#[test]
pub fn single_phase_table_2_to_750_degc(){

    let steam_table: Vec<[f64; 10]> =
        vec![

        //[1.0,0.0,0.00100016,0.05966,-0.0001478,4.2194,1402.4,19665.0,1791.8,555.65],
        [1.0,2.0,0.00100006,8.49179,0.03061,4.2129,1412.2,19943.0,1673.5,560.66],
        [1.0,4.0,0.00100003,16.9119,0.061101,4.2074,1421.6,20210.0,1567.3,565.47],
        [1.0,6.0,0.00100006,25.3219,0.091336,4.2027,1430.7,20467.0,1471.5,570.08],
        [1.0,8.0,0.00100015,33.7233,0.12133,4.1988,1439.3,20713.0,1384.7,574.51],
        [1.0,10.0,0.0010003,42.1174,0.15108,4.1955,1447.6,20948.0,1305.9,578.78],
        [1.0,12.0,0.0010005,50.5054,0.1806,4.1926,1455.4,21172.0,1234.0,582.89],
        [1.0,14.0,0.00100076,58.8881,0.20989,4.1902,1463.0,21386.0,1168.3,586.86],
        [1.0,16.0,0.00100106,67.2664,0.23897,4.1881,1470.1,21590.0,1108.1,590.7],
        [1.0,18.0,0.00100141,75.6407,0.26783,4.1863,1476.9,21783.0,1052.7,594.42],
        [1.0,20.0,0.0010018,84.0118,0.29648,4.1848,1483.4,21966.0,1001.6,598.01],
        [1.0,25.0,0.00100296,104.928,0.36723,4.1819,1498.2,22379.0,890.02,606.52],
        [1.0,30.0,0.00100437,125.833,0.43676,4.18,1511.0,22731.0,797.22,614.39],
        [1.0,35.0,0.001006,146.73,0.50513,4.179,1522.0,23026.0,719.13,621.71],
        [1.0,40.0,0.00100784,167.623,0.57239,4.1786,1531.3,23266.0,652.73,628.49],
        [1.0,45.0,0.00100987,188.516,0.63859,4.1788,1539.0,23455.0,595.77,634.8],
        [1.0,50.0,0.0010121,209.412,0.70375,4.1796,1545.3,23595.0,546.52,640.64],
        [1.0,55.0,0.0010145,230.313,0.76794,4.1809,1550.2,23689.0,503.63,646.04],
        [1.0,60.0,0.00101708,251.222,0.83117,4.1828,1553.9,23739.0,466.04,651.02],
        [1.0,65.0,0.00101982,272.141,0.8935,4.1852,1556.3,23749.0,432.91,655.59],
        [1.0,70.0,0.00102273,293.074,0.95495,4.1881,1557.6,23722.0,403.56,659.78],
        [1.0,75.0,0.00102579,314.023,1.0156,4.1915,1557.8,23658.0,377.42,663.58],
        [1.0,80.0,0.00102902,334.991,1.0754,4.1955,1557.1,23561.0,354.06,667.01],
        [1.0,85.0,0.00103239,355.979,1.1344,4.2,1555.4,23432.0,333.08,670.08],
        [1.0,90.0,0.00103593,376.992,1.1926,4.205,1552.8,23275.0,314.18,672.8],
        [1.0,95.0,0.00103962,398.03,1.2502,4.2106,1549.3,23090.0,297.09,675.17],
        //[1.0,99.6,0.00104315,417.436,1.3026,4.2161,1545.5,22896.0,282.75,677.07],
        //[1.0,99.6,1.69402,2674.95,7.3588,2.0759,472.05,1.3154,12.218,24.532],
        [1.0,100.0,1.69596,2675.77,7.361,2.0741,472.34,1.3155,12.234,24.564],
        [1.0,110.0,1.74482,2696.32,7.4154,2.0399,479.27,1.3165,12.62,25.397],
        [1.0,120.0,1.79324,2716.61,7.4676,2.0187,485.89,1.3166,13.009,26.24],
        [1.0,130.0,1.84132,2736.72,7.5181,2.0039,492.31,1.3163,13.401,27.096],
        [1.0,140.0,1.88913,2756.7,7.5671,1.9933,498.57,1.3158,13.796,27.963],
        [1.0,150.0,1.93673,2776.59,7.6147,1.9857,504.7,1.3152,14.192,28.843],
        [1.0,160.0,1.98414,2796.42,7.661,1.9805,510.7,1.3145,14.591,29.736],
        [1.0,170.0,2.0314,2816.21,7.7062,1.9772,516.59,1.3137,14.992,30.642],
        [1.0,180.0,2.07853,2835.97,7.7503,1.9755,522.38,1.3129,15.394,31.56],
        [1.0,190.0,2.12556,2855.72,7.7934,1.9751,528.07,1.3119,15.798,32.491],
        [1.0,200.0,2.17249,2875.48,7.8356,1.9757,533.67,1.311,16.204,33.436],
        [1.0,210.0,2.21935,2895.24,7.8769,1.9772,539.19,1.3099,16.611,34.392],
        [1.0,220.0,2.26614,2915.02,7.9174,1.9793,544.62,1.3089,17.019,35.361],
        [1.0,230.0,2.31287,2934.83,7.9572,1.9821,549.98,1.3078,17.428,36.342],
        [1.0,240.0,2.35955,2954.66,7.9962,1.9854,555.27,1.3067,17.838,37.335],
        [1.0,250.0,2.40619,2974.54,8.0346,1.9891,560.49,1.3056,18.249,38.34],
        [1.0,260.0,2.45279,2994.45,8.0723,1.9932,565.65,1.3045,18.661,39.356],
        [1.0,270.0,2.49935,3014.4,8.1094,1.9975,570.74,1.3033,19.073,40.383],
        [1.0,280.0,2.54588,3034.4,8.1458,2.0022,575.77,1.3022,19.486,41.421],
        [1.0,290.0,2.59239,3054.45,8.1818,2.007,580.75,1.301,19.899,42.47],
        [1.0,300.0,2.63887,3074.54,8.2171,2.0121,585.67,1.2998,20.313,43.53],
        [1.0,310.0,2.68533,3094.69,8.252,2.0173,590.54,1.2987,20.727,44.599],
        [1.0,320.0,2.73176,3114.89,8.2863,2.0227,595.35,1.2975,21.141,45.679],
        [1.0,330.0,2.77818,3135.14,8.3202,2.0282,600.11,1.2963,21.555,46.768],
        [1.0,340.0,2.82458,3155.45,8.3536,2.0338,604.83,1.2951,21.969,47.867],
        [1.0,350.0,2.87097,3175.82,8.3865,2.0396,609.5,1.2939,22.384,48.975],
        [1.0,360.0,2.91735,3196.24,8.419,2.0454,614.12,1.2928,22.798,50.093],
        [1.0,370.0,2.96371,3216.73,8.4511,2.0514,618.7,1.2916,23.212,51.219],
        [1.0,380.0,3.01006,3237.27,8.4828,2.0574,623.23,1.2904,23.626,52.354],
        [1.0,390.0,3.05639,3257.87,8.5141,2.0635,627.73,1.2892,24.04,53.498],
        [1.0,400.0,3.10272,3278.54,8.5451,2.0697,632.18,1.2881,24.453,54.649],
        [1.0,410.0,3.14904,3299.27,8.5756,2.0759,636.59,1.2869,24.866,55.809],
        [1.0,420.0,3.19535,3320.06,8.6059,2.0822,640.96,1.2857,25.279,56.977],
        [1.0,430.0,3.24165,3340.91,8.6357,2.0886,645.3,1.2845,25.692,58.153],
        [1.0,440.0,3.28795,3361.83,8.6653,2.095,649.59,1.2834,26.103,59.336],
        [1.0,450.0,3.33424,3382.81,8.6945,2.1015,653.85,1.2822,26.515,60.527],
        [1.0,460.0,3.38052,3403.86,8.7234,2.108,658.08,1.2811,26.926,61.725],
        [1.0,470.0,3.42679,3424.97,8.752,2.1146,662.27,1.2799,27.336,62.93],
        [1.0,480.0,3.47306,3446.15,8.7803,2.1212,666.43,1.2788,27.746,64.142],
        [1.0,490.0,3.51932,3467.4,8.8083,2.1279,670.55,1.2776,28.155,65.361],
        [1.0,500.0,3.56558,3488.71,8.8361,2.1345,674.64,1.2765,28.564,66.586],
        [1.0,510.0,3.61184,3510.09,8.8635,2.1413,678.7,1.2753,28.971,67.818],
        [1.0,520.0,3.65809,3531.53,8.8907,2.148,682.73,1.2742,29.379,69.056],
        [1.0,530.0,3.70433,3553.05,8.9177,2.1548,686.73,1.2731,29.785,70.3],
        [1.0,540.0,3.75057,3574.63,8.9444,2.1617,690.7,1.272,30.191,71.551],
        [1.0,550.0,3.79681,3596.28,8.9709,2.1685,694.64,1.2709,30.596,72.807],
        [1.0,560.0,3.84304,3618.0,8.9971,2.1754,698.55,1.2698,31.0,74.069],
        [1.0,570.0,3.88928,3639.79,9.0231,2.1823,702.44,1.2687,31.403,75.337],
        [1.0,580.0,3.9355,3661.65,9.0489,2.1892,706.29,1.2676,31.806,76.611],
        [1.0,590.0,3.98173,3683.58,9.0744,2.1962,710.12,1.2665,32.207,77.889],
        [1.0,600.0,4.02795,3705.57,9.0998,2.2031,713.93,1.2654,32.608,79.173],
        [1.0,650.0,4.25902,3816.6,9.2234,2.2381,732.59,1.2601,34.6,85.67],
        [1.0,700.0,4.49004,3929.38,9.3424,2.2732,750.68,1.255,36.568,92.282],
        [1.0,750.0,4.72101,4043.92,9.4571,2.3083,768.24,1.2502,38.512,98.999],
        [1.0,800.0,4.95196,4160.21,9.5681,2.3434,785.34,1.2455,40.433,105.81],

        ];

        for dataset in steam_table {
            let p_bar = dataset[0];
            let t_deg_c = dataset[1];
            let v_m3_per_kg = dataset[2];
            let h_kj_per_kg = dataset[3];
            let s_kj_per_kg_k = dataset[4];
            let cp_kj_per_kg_k = dataset[5];
            let w_m_per_s = dataset[6];
            let kappa_dimensionless = dataset[7];
            let eta_micropascal_second = dataset[8];
            let lambda_milliwatt_per_meter_kelvin = dataset[9];
            assert_hs_flash(p_bar, t_deg_c, v_m3_per_kg, h_kj_per_kg, 
                s_kj_per_kg_k, cp_kj_per_kg_k, w_m_per_s, 
                kappa_dimensionless, eta_micropascal_second, 
                lambda_milliwatt_per_meter_kelvin);
        }

}

fn assert_hs_flash(
    p_bar: f64,
    t_deg_c: f64,
    v_m3_per_kg: f64,
    h_kj_per_kg: f64,
    s_kj_per_kg_k: f64,
    cp_kj_per_kg_k: f64,
    w_m_per_s: f64,
    kappa_dimensionless: f64,
    eta_micropascal_second: f64,
    lambda_milliwatt_per_meter_kelvin: f64,
){
    let p = Pressure::new::<bar>(p_bar);
    let h = AvailableEnergy::new::<kilojoule_per_kilogram>(h_kj_per_kg);
    let s = SpecificHeatCapacity::new::<kilojoule_per_kilogram_kelvin>(
        s_kj_per_kg_k
    );

    // assert temp first to within 0.050 k
    // based on table 2.8
    let temp_tol_millikelvin = 50.0;

    let (t_test, p_test, v_test, x_test) = 
        tpvx_hs_flash_eqm(h, s);

    approx::assert_abs_diff_eq!(
        t_deg_c,
        t_test.get::<degree_celsius>(),
        epsilon=temp_tol_millikelvin*1e-3
        );

    // assert volume to within 0.5%  
    approx::assert_relative_eq!(
        v_m3_per_kg,
        v_test.get::<cubic_meter_per_kilogram>(),
        max_relative=5e-3
        );

    // assert pressure to within 15 kPa or 0.60%
    if p > Pressure::new::<megapascal>(2.5) {
        let pressure_error_tol = Pressure::new::<kilopascal>(25.0);
        let pressure_error_tol_bar = pressure_error_tol.get::<bar>();
        approx::assert_abs_diff_eq!(
            p_bar,
            p_test.get::<bar>(),
            epsilon=pressure_error_tol_bar
        ); 
    } else {
        dbg!(&(p_bar,t_deg_c));
        approx::assert_relative_eq!(
            p_bar,
            p_test.get::<bar>(),
            max_relative = 20e-2
        ); 

    }
    // the x for ph is quite reliable, i'll use that as reference 
    let x_ref = x_ph_flash(p, h);

    approx::assert_relative_eq!(
        x_ref.round(),
        x_test.get::<ratio>(),
        max_relative = 1e-3
    );


    // cp 
    let cp_test = cp_hs_eqm(h, s);
    approx::assert_relative_eq!(
        cp_kj_per_kg_k,
        cp_test.get::<kilojoule_per_kilogram_kelvin>(),
        max_relative=1e-3
        );
    // w 
    let w_test = w_hs_eqm(h, s);
    approx::assert_relative_eq!(
        w_m_per_s,
        w_test.get::<meter_per_second>(),
        max_relative=1e-3
        );

    // kappa
    let kappa_test = kappa_hs_eqm(h, s);
    approx::assert_relative_eq!(
        kappa_dimensionless,
        kappa_test.get::<ratio>(),
        max_relative=30e-2
        );

    // dynamic_viscosity
    //
    let eta_micropascal_second_test = mu_hs_eqm(h, s)
        .get::<micropascal_second>();
    approx::assert_relative_eq!(
        eta_micropascal_second,
        eta_micropascal_second_test,
        max_relative=2e-2
        );

    // thermal thermal conductivity
    let lambda_test_milliwatt_per_meter_kelvin = 
        lambda_hs_eqm(h, s).get::<milliwatt_per_meter_kelvin>();
    approx::assert_relative_eq!(
        lambda_milliwatt_per_meter_kelvin,
        lambda_test_milliwatt_per_meter_kelvin,
        max_relative=8e-2
        );

}









